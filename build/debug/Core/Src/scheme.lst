ARM GAS  /tmp/ccGRH1Zt.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"scheme.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/scheme.c"
  20              		.section	.text.do_error,"ax",%progbits
  21              		.align	1
  22              		.global	do_error
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	do_error:
  28              	.LVL0:
  29              	.LFB226:
   1:Core/Src/scheme.c **** /******************************************************************************
   2:Core/Src/scheme.c **** Finite State Machine
   3:Core/Src/scheme.c **** Project: scheme.dot
   4:Core/Src/scheme.c **** Description: micro-nucleo
   5:Core/Src/scheme.c **** 
   6:Core/Src/scheme.c **** Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
   7:Core/Src/scheme.c **** gv_fsm version 0.3.7
   8:Core/Src/scheme.c **** Generation date: 2024-10-15 09:51:40 +0200
   9:Core/Src/scheme.c **** Generated from: scheme.dot
  10:Core/Src/scheme.c **** The finite state machine has:
  11:Core/Src/scheme.c ****   6 states
  12:Core/Src/scheme.c ****   0 transition functions
  13:Core/Src/scheme.c **** ******************************************************************************/
  14:Core/Src/scheme.c **** 
  15:Core/Src/scheme.c **** #include "scheme.h"
  16:Core/Src/scheme.c **** #include "main.h"
  17:Core/Src/scheme.c **** #include <string.h>
  18:Core/Src/scheme.c **** #include <stdio.h>
  19:Core/Src/scheme.c **** #include <time.h> //for random values
  20:Core/Src/scheme.c **** #include <stdlib.h>
  21:Core/Src/scheme.c **** 
  22:Core/Src/scheme.c **** #define ADC_BUFFER_SIZE 300
  23:Core/Src/scheme.c **** #define MOVING_AVG_SIZE 150
  24:Core/Src/scheme.c **** #define BUFFER_SIZE 50
  25:Core/Src/scheme.c **** #define RANDOM_RANGE 300
  26:Core/Src/scheme.c **** 
  27:Core/Src/scheme.c **** // SEARCH FOR Your Code Here FOR CODE INSERTION POINTS!
  28:Core/Src/scheme.c **** ADC_HandleTypeDef hadc1;
  29:Core/Src/scheme.c **** DMA_HandleTypeDef hdma_adc1;
ARM GAS  /tmp/ccGRH1Zt.s 			page 2


  30:Core/Src/scheme.c **** UART_HandleTypeDef huart2;
  31:Core/Src/scheme.c **** HAL_StatusTypeDef halStatus;
  32:Core/Src/scheme.c **** 
  33:Core/Src/scheme.c **** typedef enum {
  34:Core/Src/scheme.c ****     RAW,
  35:Core/Src/scheme.c ****     MOVING_AVERAGE,
  36:Core/Src/scheme.c ****     RANDOM_NOISE
  37:Core/Src/scheme.c **** } FilterMode;
  38:Core/Src/scheme.c **** 
  39:Core/Src/scheme.c **** //digital and analog variables
  40:Core/Src/scheme.c **** uint16_t lastAnalogValue = 0; 
  41:Core/Src/scheme.c **** uint16_t lastDigitalValue = 0;
  42:Core/Src/scheme.c **** 
  43:Core/Src/scheme.c **** uint16_t last_index = 0;//position of last written element on buffer
  44:Core/Src/scheme.c **** uint32_t adcBuffer[ADC_BUFFER_SIZE];//dma data structure
  45:Core/Src/scheme.c **** uint8_t disableInterrupt = 0;
  46:Core/Src/scheme.c **** 
  47:Core/Src/scheme.c **** //moving average variables
  48:Core/Src/scheme.c **** uint16_t adc_moving_average[MOVING_AVG_SIZE];
  49:Core/Src/scheme.c **** uint16_t buffer_index = 0;
  50:Core/Src/scheme.c **** uint32_t sum = 0;
  51:Core/Src/scheme.c **** 
  52:Core/Src/scheme.c **** //millis for warning state
  53:Core/Src/scheme.c **** uint32_t lastTimer = 0;
  54:Core/Src/scheme.c **** uint8_t isWarningState = 0;
  55:Core/Src/scheme.c **** 
  56:Core/Src/scheme.c **** //filter mode for data variables
  57:Core/Src/scheme.c **** FilterMode currentFilterMode = RAW;
  58:Core/Src/scheme.c **** char cli_command[BUFFER_SIZE];
  59:Core/Src/scheme.c **** uint8_t sendRequest = 0;
  60:Core/Src/scheme.c **** 
  61:Core/Src/scheme.c **** //debug/info variables
  62:Core/Src/scheme.c **** char msg_buffer[BUFFER_SIZE];//buffer for serial msg
  63:Core/Src/scheme.c **** 
  64:Core/Src/scheme.c **** // GLOBALS
  65:Core/Src/scheme.c **** // State human-readable names
  66:Core/Src/scheme.c **** const char *state_names[] = {"init", "wait_request", "error", "listening", "warning", "pause"};
  67:Core/Src/scheme.c **** 
  68:Core/Src/scheme.c **** // List of state functions
  69:Core/Src/scheme.c **** state_func_t *const state_table[NUM_STATES] = {
  70:Core/Src/scheme.c ****   do_init,         // in state init
  71:Core/Src/scheme.c ****   do_wait_request, // in state wait_request
  72:Core/Src/scheme.c ****   do_error,        // in state error
  73:Core/Src/scheme.c ****   do_listening,    // in state listening
  74:Core/Src/scheme.c ****   do_warning,      // in state warning
  75:Core/Src/scheme.c ****   do_pause,        // in state pause
  76:Core/Src/scheme.c **** };
  77:Core/Src/scheme.c **** 
  78:Core/Src/scheme.c **** 
  79:Core/Src/scheme.c **** //USER DEFINED FUNCTIONS
  80:Core/Src/scheme.c **** /**
  81:Core/Src/scheme.c **** Based on the user input, change the filter mode.
  82:Core/Src/scheme.c **** If the comand is unknown, the current filter is not changed but
  83:Core/Src/scheme.c **** a falsse value is returned
  84:Core/Src/scheme.c **** */
  85:Core/Src/scheme.c **** u_int8_t handle_cli_command() {
  86:Core/Src/scheme.c ****     if (strcmp(cli_command, "raw") == 0) {
ARM GAS  /tmp/ccGRH1Zt.s 			page 3


  87:Core/Src/scheme.c ****         currentFilterMode = RAW;
  88:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
  89:Core/Src/scheme.c ****         currentFilterMode = MOVING_AVERAGE;
  90:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
  91:Core/Src/scheme.c ****         currentFilterMode = RANDOM_NOISE;
  92:Core/Src/scheme.c ****     } else {
  93:Core/Src/scheme.c ****         //comand not recognized
  94:Core/Src/scheme.c ****         memset(cli_command, '\0', sizeof(cli_command)); 
  95:Core/Src/scheme.c ****         return 1;
  96:Core/Src/scheme.c ****     }
  97:Core/Src/scheme.c ****     //clear buffer
  98:Core/Src/scheme.c ****     memset(cli_command, '\0', sizeof(cli_command)); 
  99:Core/Src/scheme.c ****     return 0;
 100:Core/Src/scheme.c **** }
 101:Core/Src/scheme.c **** 
 102:Core/Src/scheme.c **** // No transition functions
 103:Core/Src/scheme.c **** 
 104:Core/Src/scheme.c **** /*  ____  _        _       
 105:Core/Src/scheme.c ****  * / ___|| |_ __ _| |_ ___ 
 106:Core/Src/scheme.c ****  * \___ \| __/ _` | __/ _ \
 107:Core/Src/scheme.c ****  *  ___) | || (_| | ||  __/
 108:Core/Src/scheme.c ****  * |____/ \__\__,_|\__\___|
 109:Core/Src/scheme.c ****  *                         
 110:Core/Src/scheme.c ****  *   __                  _   _                 
 111:Core/Src/scheme.c ****  *  / _|_   _ _ __   ___| |_(_) ___  _ __  ___ 
 112:Core/Src/scheme.c ****  * | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
 113:Core/Src/scheme.c ****  * |  _| |_| | | | | (__| |_| | (_) | | | \__ \
 114:Core/Src/scheme.c ****  * |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
 115:Core/Src/scheme.c ****  */                                             
 116:Core/Src/scheme.c **** 
 117:Core/Src/scheme.c **** // Function to be executed in state init
 118:Core/Src/scheme.c **** // valid return states: STATE_WAIT_REQUEST, STATE_ERROR
 119:Core/Src/scheme.c **** state_t do_init(state_data_t *data) {
 120:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 121:Core/Src/scheme.c ****   
 122:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state init");
 123:Core/Src/scheme.c ****   /* Your Code Here */
 124:Core/Src/scheme.c ****   srand(time(NULL)); //set seed for random number generator
 125:Core/Src/scheme.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 126:Core/Src/scheme.c ****   halStatus = HAL_Init();
 127:Core/Src/scheme.c **** 
 128:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 129:Core/Src/scheme.c ****     return STATE_ERROR;
 130:Core/Src/scheme.c **** 
 131:Core/Src/scheme.c ****   /* Configure the system clock */
 132:Core/Src/scheme.c ****   SystemClock_Config();
 133:Core/Src/scheme.c **** 
 134:Core/Src/scheme.c ****   /* Initialize all configured peripherals */
 135:Core/Src/scheme.c ****   MX_GPIO_Init();
 136:Core/Src/scheme.c ****   MX_DMA_Init();
 137:Core/Src/scheme.c ****   MX_USART2_UART_Init();
 138:Core/Src/scheme.c ****   MX_ADC1_Init();
 139:Core/Src/scheme.c **** 
 140:Core/Src/scheme.c ****   // Initialize the DMA conversion
 141:Core/Src/scheme.c ****   halStatus = HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 142:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 143:Core/Src/scheme.c ****     return STATE_ERROR;
ARM GAS  /tmp/ccGRH1Zt.s 			page 4


 144:Core/Src/scheme.c **** 
 145:Core/Src/scheme.c ****   halStatus = HAL_UARTEx_ReceiveToIdle_IT(&huart2, (u_int8_t *)cli_command, BUFFER_SIZE);
 146:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 147:Core/Src/scheme.c ****     return STATE_ERROR;
 148:Core/Src/scheme.c **** 
 149:Core/Src/scheme.c ****   lastTimer = HAL_GetTick();//start time of MCU
 150:Core/Src/scheme.c ****   
 151:Core/Src/scheme.c ****   return STATE_WAIT_REQUEST;
 152:Core/Src/scheme.c **** }
 153:Core/Src/scheme.c **** 
 154:Core/Src/scheme.c **** 
 155:Core/Src/scheme.c **** // Function to be executed in state wait_request
 156:Core/Src/scheme.c **** // valid return states: STATE_ERROR, STATE_LISTENING
 157:Core/Src/scheme.c **** state_t do_wait_request(state_data_t *data) {
 158:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 159:Core/Src/scheme.c ****   
 160:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state wait_request");
 161:Core/Src/scheme.c ****   /* Your Code Here */
 162:Core/Src/scheme.c ****   if(!sendRequest){
 163:Core/Src/scheme.c ****     HAL_ADC_Stop_DMA(&hadc1);
 164:Core/Src/scheme.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 165:Core/Src/scheme.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 166:Core/Src/scheme.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 167:Core/Src/scheme.c ****     sendRequest = 1;
 168:Core/Src/scheme.c ****   }
 169:Core/Src/scheme.c **** 
 170:Core/Src/scheme.c **** 
 171:Core/Src/scheme.c ****   switch (next_state) {
 172:Core/Src/scheme.c ****     case STATE_ERROR:
 173:Core/Src/scheme.c ****     case STATE_LISTENING:
 174:Core/Src/scheme.c ****       break;
 175:Core/Src/scheme.c ****     default:
 176:Core/Src/scheme.c ****       //syslog(LOG_WARNING, "[FSM] Cannot pass from wait_request to %s, remaining in this state", s
 177:Core/Src/scheme.c ****       next_state = NO_CHANGE;
 178:Core/Src/scheme.c ****   }
 179:Core/Src/scheme.c ****   
 180:Core/Src/scheme.c ****   return next_state;
 181:Core/Src/scheme.c **** }
 182:Core/Src/scheme.c **** 
 183:Core/Src/scheme.c **** 
 184:Core/Src/scheme.c **** // Function to be executed in state error
 185:Core/Src/scheme.c **** // valid return states: NO_CHANGE
 186:Core/Src/scheme.c **** state_t do_error(state_data_t *data) {
  30              		.loc 1 186 38 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 187:Core/Src/scheme.c ****   state_t next_state = NO_CHANGE;
  35              		.loc 1 187 3 view .LVU1
 188:Core/Src/scheme.c ****   
 189:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state error");
 190:Core/Src/scheme.c ****   /* Your Code Here */
 191:Core/Src/scheme.c ****   
 192:Core/Src/scheme.c ****   switch (next_state) {
  36              		.loc 1 192 3 view .LVU2
 193:Core/Src/scheme.c ****     case NO_CHANGE:
ARM GAS  /tmp/ccGRH1Zt.s 			page 5


 194:Core/Src/scheme.c ****       break;
 195:Core/Src/scheme.c ****     default:
 196:Core/Src/scheme.c ****       //syslog(LOG_WARNING, "[FSM] Cannot pass from error to %s, remaining in this state", state_na
 197:Core/Src/scheme.c ****       next_state = NO_CHANGE;
 198:Core/Src/scheme.c ****   }
 199:Core/Src/scheme.c ****   
 200:Core/Src/scheme.c ****   return next_state;
  37              		.loc 1 200 3 view .LVU3
 201:Core/Src/scheme.c **** }
  38              		.loc 1 201 1 is_stmt 0 view .LVU4
  39 0000 0720     		movs	r0, #7
  40              	.LVL1:
  41              		.loc 1 201 1 view .LVU5
  42 0002 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE226:
  46              		.section	.text.do_warning,"ax",%progbits
  47              		.align	1
  48              		.global	do_warning
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  53              	do_warning:
  54              	.LVL2:
  55              	.LFB228:
 202:Core/Src/scheme.c **** 
 203:Core/Src/scheme.c **** 
 204:Core/Src/scheme.c **** // Function to be executed in state listening
 205:Core/Src/scheme.c **** // valid return states: STATE_ERROR, STATE_WARNING, STATE_PAUSE
 206:Core/Src/scheme.c **** state_t do_listening(state_data_t *data) {
 207:Core/Src/scheme.c ****   state_t next_state = STATE_ERROR;
 208:Core/Src/scheme.c ****   
 209:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state listening");
 210:Core/Src/scheme.c ****   /* Your Code Here */
 211:Core/Src/scheme.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 212:Core/Src/scheme.c **** 
 213:Core/Src/scheme.c ****   last_index = (BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % BUFFER_SIZE;
 214:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 215:Core/Src/scheme.c ****     //update moving average if in MOVING_AVERAGE mode
 216:Core/Src/scheme.c ****     if (currentFilterMode == MOVING_AVERAGE) {
 217:Core/Src/scheme.c ****       sum -= adc_moving_average[buffer_index];
 218:Core/Src/scheme.c ****       adc_moving_average[buffer_index] = lastAnalogValue;
 219:Core/Src/scheme.c ****       sum += lastAnalogValue;
 220:Core/Src/scheme.c ****       buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 221:Core/Src/scheme.c ****     }
 222:Core/Src/scheme.c **** 
 223:Core/Src/scheme.c ****     //print analog data
 224:Core/Src/scheme.c ****     switch (currentFilterMode)
 225:Core/Src/scheme.c ****     {
 226:Core/Src/scheme.c ****     case RAW:
 227:Core/Src/scheme.c ****       sprintf(msg_buffer, "A:%hu\r\n", (u_int16_t)lastAnalogValue);
 228:Core/Src/scheme.c ****       break;
 229:Core/Src/scheme.c ****     
 230:Core/Src/scheme.c ****     case MOVING_AVERAGE:
 231:Core/Src/scheme.c ****       float moving_avg = (float)sum / MOVING_AVG_SIZE;
 232:Core/Src/scheme.c ****       sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 233:Core/Src/scheme.c ****       break;
ARM GAS  /tmp/ccGRH1Zt.s 			page 6


 234:Core/Src/scheme.c **** 
 235:Core/Src/scheme.c ****     case RANDOM_NOISE:
 236:Core/Src/scheme.c ****       sprintf(msg_buffer, "A: %hu\r\n", (u_int16_t)(adcBuffer[0] + rand() % RANDOM_RANGE));
 237:Core/Src/scheme.c ****       break;
 238:Core/Src/scheme.c **** 
 239:Core/Src/scheme.c ****     default:
 240:Core/Src/scheme.c ****       break;
 241:Core/Src/scheme.c ****     }
 242:Core/Src/scheme.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 243:Core/Src/scheme.c **** 
 244:Core/Src/scheme.c ****     //print digital data
 245:Core/Src/scheme.c ****     sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 246:Core/Src/scheme.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 247:Core/Src/scheme.c ****     
 248:Core/Src/scheme.c ****     if(lastDigitalValue){
 249:Core/Src/scheme.c ****       //check if is high for 5 seconds
 250:Core/Src/scheme.c ****       if(HAL_GetTick() - lastTimer >= 5000){
 251:Core/Src/scheme.c ****         //warning state
 252:Core/Src/scheme.c ****         isWarningState = 1;
 253:Core/Src/scheme.c ****       }
 254:Core/Src/scheme.c ****     }else{
 255:Core/Src/scheme.c ****       //reset timer
 256:Core/Src/scheme.c ****       lastTimer = HAL_GetTick();
 257:Core/Src/scheme.c ****       isWarningState = 0;
 258:Core/Src/scheme.c ****     }
 259:Core/Src/scheme.c ****     
 260:Core/Src/scheme.c ****     if(isWarningState){
 261:Core/Src/scheme.c ****       next_state = STATE_WARNING;
 262:Core/Src/scheme.c ****       //sprintf(msg_buffer, "WARNING STATE!\r\n");
 263:Core/Src/scheme.c ****       //HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); 
 264:Core/Src/scheme.c ****     }
 265:Core/Src/scheme.c **** 
 266:Core/Src/scheme.c ****   switch (next_state) {
 267:Core/Src/scheme.c ****     case STATE_ERROR:
 268:Core/Src/scheme.c ****     case STATE_WARNING:
 269:Core/Src/scheme.c ****     case STATE_PAUSE:
 270:Core/Src/scheme.c ****       break;
 271:Core/Src/scheme.c ****     default:
 272:Core/Src/scheme.c ****       //syslog(LOG_WARNING, "[FSM] Cannot pass from listening to %s, remaining in this state", stat
 273:Core/Src/scheme.c ****       next_state = NO_CHANGE;
 274:Core/Src/scheme.c ****   }
 275:Core/Src/scheme.c ****   
 276:Core/Src/scheme.c ****   return next_state;
 277:Core/Src/scheme.c **** }
 278:Core/Src/scheme.c **** 
 279:Core/Src/scheme.c **** 
 280:Core/Src/scheme.c **** // Function to be executed in state warning
 281:Core/Src/scheme.c **** // valid return states: STATE_WAIT_REQUEST, STATE_ERROR
 282:Core/Src/scheme.c **** state_t do_warning(state_data_t *data) {
  56              		.loc 1 282 40 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
 283:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
  61              		.loc 1 283 3 view .LVU7
 284:Core/Src/scheme.c ****   
ARM GAS  /tmp/ccGRH1Zt.s 			page 7


 285:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state warning");
 286:Core/Src/scheme.c ****   /* Your Code Here */
 287:Core/Src/scheme.c ****   
 288:Core/Src/scheme.c ****   switch (next_state) {
  62              		.loc 1 288 3 view .LVU8
 289:Core/Src/scheme.c ****     case STATE_WAIT_REQUEST:
 290:Core/Src/scheme.c ****     case STATE_ERROR:
 291:Core/Src/scheme.c ****       break;
 292:Core/Src/scheme.c ****     default:
 293:Core/Src/scheme.c ****       //syslog(LOG_WARNING, "[FSM] Cannot pass from warning to %s, remaining in this state", state_
 294:Core/Src/scheme.c ****       next_state = NO_CHANGE;
 295:Core/Src/scheme.c ****   }
 296:Core/Src/scheme.c ****   
 297:Core/Src/scheme.c ****   return next_state;
  63              		.loc 1 297 3 view .LVU9
 298:Core/Src/scheme.c **** }
  64              		.loc 1 298 1 is_stmt 0 view .LVU10
  65 0000 0120     		movs	r0, #1
  66              	.LVL3:
  67              		.loc 1 298 1 view .LVU11
  68 0002 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE228:
  72              		.section	.text.do_pause,"ax",%progbits
  73              		.align	1
  74              		.global	do_pause
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  79              	do_pause:
  80              	.LVL4:
  81              	.LFB229:
 299:Core/Src/scheme.c **** 
 300:Core/Src/scheme.c **** 
 301:Core/Src/scheme.c **** // Function to be executed in state pause
 302:Core/Src/scheme.c **** // valid return states: STATE_ERROR, STATE_LISTENING
 303:Core/Src/scheme.c **** state_t do_pause(state_data_t *data) {
  82              		.loc 1 303 38 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
 304:Core/Src/scheme.c ****   state_t next_state = STATE_ERROR;
  87              		.loc 1 304 3 view .LVU13
 305:Core/Src/scheme.c ****   
 306:Core/Src/scheme.c ****   //syslog(LOG_INFO, "[FSM] In state pause");
 307:Core/Src/scheme.c ****   /* Your Code Here */
 308:Core/Src/scheme.c ****   
 309:Core/Src/scheme.c ****   switch (next_state) {
  88              		.loc 1 309 3 view .LVU14
 310:Core/Src/scheme.c ****     case STATE_ERROR:
 311:Core/Src/scheme.c ****     case STATE_LISTENING:
 312:Core/Src/scheme.c ****       break;
 313:Core/Src/scheme.c ****     default:
 314:Core/Src/scheme.c ****       //syslog(LOG_WARNING, "[FSM] Cannot pass from pause to %s, remaining in this state", state_na
 315:Core/Src/scheme.c ****       next_state = NO_CHANGE;
 316:Core/Src/scheme.c ****   }
ARM GAS  /tmp/ccGRH1Zt.s 			page 8


 317:Core/Src/scheme.c ****   
 318:Core/Src/scheme.c ****   return next_state;
  89              		.loc 1 318 3 view .LVU15
 319:Core/Src/scheme.c **** }
  90              		.loc 1 319 1 is_stmt 0 view .LVU16
  91 0000 0220     		movs	r0, #2
  92              	.LVL5:
  93              		.loc 1 319 1 view .LVU17
  94 0002 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE229:
  98              		.section	.text.do_init,"ax",%progbits
  99              		.align	1
 100              		.global	do_init
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 105              	do_init:
 106              	.LVL6:
 107              	.LFB224:
 119:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 108              		.loc 1 119 37 is_stmt 1 view -0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 119:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 112              		.loc 1 119 37 is_stmt 0 view .LVU19
 113 0000 08B5     		push	{r3, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 3, -8
 116              		.cfi_offset 14, -4
 120:Core/Src/scheme.c ****   
 117              		.loc 1 120 3 is_stmt 1 view .LVU20
 118              	.LVL7:
 124:Core/Src/scheme.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 119              		.loc 1 124 3 view .LVU21
 124:Core/Src/scheme.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 120              		.loc 1 124 9 is_stmt 0 view .LVU22
 121 0002 0020     		movs	r0, #0
 122              	.LVL8:
 124:Core/Src/scheme.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 123              		.loc 1 124 9 view .LVU23
 124 0004 FFF7FEFF 		bl	time
 125              	.LVL9:
 124:Core/Src/scheme.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 126              		.loc 1 124 3 discriminator 1 view .LVU24
 127 0008 FFF7FEFF 		bl	srand
 128              	.LVL10:
 126:Core/Src/scheme.c **** 
 129              		.loc 1 126 3 is_stmt 1 view .LVU25
 126:Core/Src/scheme.c **** 
 130              		.loc 1 126 15 is_stmt 0 view .LVU26
 131 000c FFF7FEFF 		bl	HAL_Init
 132              	.LVL11:
 126:Core/Src/scheme.c **** 
 133              		.loc 1 126 13 discriminator 1 view .LVU27
 134 0010 144B     		ldr	r3, .L10
ARM GAS  /tmp/ccGRH1Zt.s 			page 9


 135 0012 1870     		strb	r0, [r3]
 128:Core/Src/scheme.c ****     return STATE_ERROR;
 136              		.loc 1 128 3 is_stmt 1 view .LVU28
 128:Core/Src/scheme.c ****     return STATE_ERROR;
 137              		.loc 1 128 5 is_stmt 0 view .LVU29
 138 0014 00BB     		cbnz	r0, .L6
 132:Core/Src/scheme.c **** 
 139              		.loc 1 132 3 is_stmt 1 view .LVU30
 140 0016 FFF7FEFF 		bl	SystemClock_Config
 141              	.LVL12:
 135:Core/Src/scheme.c ****   MX_DMA_Init();
 142              		.loc 1 135 3 view .LVU31
 143 001a FFF7FEFF 		bl	MX_GPIO_Init
 144              	.LVL13:
 136:Core/Src/scheme.c ****   MX_USART2_UART_Init();
 145              		.loc 1 136 3 view .LVU32
 146 001e FFF7FEFF 		bl	MX_DMA_Init
 147              	.LVL14:
 137:Core/Src/scheme.c ****   MX_ADC1_Init();
 148              		.loc 1 137 3 view .LVU33
 149 0022 FFF7FEFF 		bl	MX_USART2_UART_Init
 150              	.LVL15:
 138:Core/Src/scheme.c **** 
 151              		.loc 1 138 3 view .LVU34
 152 0026 FFF7FEFF 		bl	MX_ADC1_Init
 153              	.LVL16:
 141:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 154              		.loc 1 141 3 view .LVU35
 141:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 155              		.loc 1 141 15 is_stmt 0 view .LVU36
 156 002a 4FF49672 		mov	r2, #300
 157 002e 0E49     		ldr	r1, .L10+4
 158 0030 0E48     		ldr	r0, .L10+8
 159 0032 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 160              	.LVL17:
 141:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 161              		.loc 1 141 13 discriminator 1 view .LVU37
 162 0036 0B4B     		ldr	r3, .L10
 163 0038 1870     		strb	r0, [r3]
 142:Core/Src/scheme.c ****     return STATE_ERROR;
 164              		.loc 1 142 3 is_stmt 1 view .LVU38
 142:Core/Src/scheme.c ****     return STATE_ERROR;
 165              		.loc 1 142 5 is_stmt 0 view .LVU39
 166 003a 78B9     		cbnz	r0, .L7
 145:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 167              		.loc 1 145 3 is_stmt 1 view .LVU40
 145:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 168              		.loc 1 145 15 is_stmt 0 view .LVU41
 169 003c 3222     		movs	r2, #50
 170 003e 0C49     		ldr	r1, .L10+12
 171 0040 0C48     		ldr	r0, .L10+16
 172 0042 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 173              	.LVL18:
 145:Core/Src/scheme.c ****   if(halStatus != HAL_OK)
 174              		.loc 1 145 13 discriminator 1 view .LVU42
 175 0046 074B     		ldr	r3, .L10
 176 0048 1870     		strb	r0, [r3]
ARM GAS  /tmp/ccGRH1Zt.s 			page 10


 146:Core/Src/scheme.c ****     return STATE_ERROR;
 177              		.loc 1 146 3 is_stmt 1 view .LVU43
 146:Core/Src/scheme.c ****     return STATE_ERROR;
 178              		.loc 1 146 5 is_stmt 0 view .LVU44
 179 004a 48B9     		cbnz	r0, .L8
 149:Core/Src/scheme.c ****   
 180              		.loc 1 149 3 is_stmt 1 view .LVU45
 149:Core/Src/scheme.c ****   
 181              		.loc 1 149 15 is_stmt 0 view .LVU46
 182 004c FFF7FEFF 		bl	HAL_GetTick
 183              	.LVL19:
 149:Core/Src/scheme.c ****   
 184              		.loc 1 149 13 discriminator 1 view .LVU47
 185 0050 094B     		ldr	r3, .L10+20
 186 0052 1860     		str	r0, [r3]
 151:Core/Src/scheme.c **** }
 187              		.loc 1 151 3 is_stmt 1 view .LVU48
 151:Core/Src/scheme.c **** }
 188              		.loc 1 151 10 is_stmt 0 view .LVU49
 189 0054 0120     		movs	r0, #1
 190 0056 00E0     		b	.L5
 191              	.L6:
 129:Core/Src/scheme.c **** 
 192              		.loc 1 129 12 view .LVU50
 193 0058 0220     		movs	r0, #2
 194              	.L5:
 152:Core/Src/scheme.c **** 
 195              		.loc 1 152 1 view .LVU51
 196 005a 08BD     		pop	{r3, pc}
 197              	.L7:
 143:Core/Src/scheme.c **** 
 198              		.loc 1 143 12 view .LVU52
 199 005c 0220     		movs	r0, #2
 200 005e FCE7     		b	.L5
 201              	.L8:
 147:Core/Src/scheme.c **** 
 202              		.loc 1 147 12 view .LVU53
 203 0060 0220     		movs	r0, #2
 204 0062 FAE7     		b	.L5
 205              	.L11:
 206              		.align	2
 207              	.L10:
 208 0064 00000000 		.word	halStatus
 209 0068 00000000 		.word	adcBuffer
 210 006c 00000000 		.word	hadc1
 211 0070 00000000 		.word	cli_command
 212 0074 00000000 		.word	huart2
 213 0078 00000000 		.word	lastTimer
 214              		.cfi_endproc
 215              	.LFE224:
 217              		.section	.rodata.do_wait_request.str1.4,"aMS",%progbits,1
 218              		.align	2
 219              	.LC0:
 220 0000 433A0D0A 		.ascii	"C:\015\012\000"
 220      00
 221              		.section	.text.do_wait_request,"ax",%progbits
 222              		.align	1
ARM GAS  /tmp/ccGRH1Zt.s 			page 11


 223              		.global	do_wait_request
 224              		.syntax unified
 225              		.thumb
 226              		.thumb_func
 228              	do_wait_request:
 229              	.LVL20:
 230              	.LFB225:
 157:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 231              		.loc 1 157 45 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
 158:Core/Src/scheme.c ****   
 235              		.loc 1 158 3 view .LVU55
 162:Core/Src/scheme.c ****     HAL_ADC_Stop_DMA(&hadc1);
 236              		.loc 1 162 3 view .LVU56
 162:Core/Src/scheme.c ****     HAL_ADC_Stop_DMA(&hadc1);
 237              		.loc 1 162 6 is_stmt 0 view .LVU57
 238 0000 114B     		ldr	r3, .L19
 239 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 162:Core/Src/scheme.c ****     HAL_ADC_Stop_DMA(&hadc1);
 240              		.loc 1 162 5 view .LVU58
 241 0004 0BB1     		cbz	r3, .L18
 171:Core/Src/scheme.c ****     case STATE_ERROR:
 242              		.loc 1 171 3 is_stmt 1 view .LVU59
 177:Core/Src/scheme.c ****   }
 243              		.loc 1 177 7 view .LVU60
 244              	.LVL21:
 180:Core/Src/scheme.c **** }
 245              		.loc 1 180 3 view .LVU61
 181:Core/Src/scheme.c **** 
 246              		.loc 1 181 1 is_stmt 0 view .LVU62
 247 0006 0720     		movs	r0, #7
 248              	.LVL22:
 181:Core/Src/scheme.c **** 
 249              		.loc 1 181 1 view .LVU63
 250 0008 7047     		bx	lr
 251              	.LVL23:
 252              	.L18:
 157:Core/Src/scheme.c ****   state_t next_state = STATE_WAIT_REQUEST;
 253              		.loc 1 157 45 view .LVU64
 254 000a 10B5     		push	{r4, lr}
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 14, -4
 163:Core/Src/scheme.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 258              		.loc 1 163 5 is_stmt 1 view .LVU65
 259 000c 0F48     		ldr	r0, .L19+4
 260              	.LVL24:
 163:Core/Src/scheme.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 261              		.loc 1 163 5 is_stmt 0 view .LVU66
 262 000e FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 263              	.LVL25:
 164:Core/Src/scheme.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 264              		.loc 1 164 5 is_stmt 1 view .LVU67
 265 0012 0F4C     		ldr	r4, .L19+8
 266 0014 0F4B     		ldr	r3, .L19+12
ARM GAS  /tmp/ccGRH1Zt.s 			page 12


 267 0016 93E80300 		ldm	r3, {r0, r1}
 268 001a 2060     		str	r0, [r4]
 269 001c 2171     		strb	r1, [r4, #4]
 165:Core/Src/scheme.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 270              		.loc 1 165 5 view .LVU68
 165:Core/Src/scheme.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 271              		.loc 1 165 55 is_stmt 0 view .LVU69
 272 001e 2046     		mov	r0, r4
 273 0020 FFF7FEFF 		bl	strlen
 274              	.LVL26:
 165:Core/Src/scheme.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 275              		.loc 1 165 5 discriminator 1 view .LVU70
 276 0024 4FF0FF33 		mov	r3, #-1
 277 0028 82B2     		uxth	r2, r0
 278 002a 2146     		mov	r1, r4
 279 002c 0A48     		ldr	r0, .L19+16
 280 002e FFF7FEFF 		bl	HAL_UART_Transmit
 281              	.LVL27:
 166:Core/Src/scheme.c ****     sendRequest = 1;
 282              		.loc 1 166 5 is_stmt 1 view .LVU71
 283 0032 0022     		movs	r2, #0
 284 0034 2021     		movs	r1, #32
 285 0036 0948     		ldr	r0, .L19+20
 286 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 287              	.LVL28:
 167:Core/Src/scheme.c ****   }
 288              		.loc 1 167 5 view .LVU72
 167:Core/Src/scheme.c ****   }
 289              		.loc 1 167 17 is_stmt 0 view .LVU73
 290 003c 024B     		ldr	r3, .L19
 291 003e 0122     		movs	r2, #1
 292 0040 1A70     		strb	r2, [r3]
 171:Core/Src/scheme.c ****     case STATE_ERROR:
 293              		.loc 1 171 3 is_stmt 1 view .LVU74
 177:Core/Src/scheme.c ****   }
 294              		.loc 1 177 7 view .LVU75
 295              	.LVL29:
 180:Core/Src/scheme.c **** }
 296              		.loc 1 180 3 view .LVU76
 181:Core/Src/scheme.c **** 
 297              		.loc 1 181 1 is_stmt 0 view .LVU77
 298 0042 0720     		movs	r0, #7
 299 0044 10BD     		pop	{r4, pc}
 300              	.L20:
 301 0046 00BF     		.align	2
 302              	.L19:
 303 0048 00000000 		.word	sendRequest
 304 004c 00000000 		.word	hadc1
 305 0050 00000000 		.word	msg_buffer
 306 0054 00000000 		.word	.LC0
 307 0058 00000000 		.word	huart2
 308 005c 00080240 		.word	1073874944
 309              		.cfi_endproc
 310              	.LFE225:
 312              		.section	.rodata.do_listening.str1.4,"aMS",%progbits,1
 313              		.align	2
 314              	.LC1:
ARM GAS  /tmp/ccGRH1Zt.s 			page 13


 315 0000 413A2568 		.ascii	"A:%hu\015\012\000"
 315      750D0A00 
 316              		.global	__aeabi_f2d
 317              		.align	2
 318              	.LC2:
 319 0008 413A2025 		.ascii	"A: %.3f\015\012\000"
 319      2E33660D 
 319      0A00
 320 0012 0000     		.align	2
 321              	.LC3:
 322 0014 413A2025 		.ascii	"A: %hu\015\012\000"
 322      68750D0A 
 322      00
 323 001d 000000   		.align	2
 324              	.LC4:
 325 0020 443A2025 		.ascii	"D: %hu\015\012\000"
 325      68750D0A 
 325      00
 326              		.section	.text.do_listening,"ax",%progbits
 327              		.align	1
 328              		.global	do_listening
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 333              	do_listening:
 334              	.LVL30:
 335              	.LFB227:
 206:Core/Src/scheme.c ****   state_t next_state = STATE_ERROR;
 336              		.loc 1 206 42 is_stmt 1 view -0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 206:Core/Src/scheme.c ****   state_t next_state = STATE_ERROR;
 340              		.loc 1 206 42 is_stmt 0 view .LVU79
 341 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 342              		.cfi_def_cfa_offset 24
 343              		.cfi_offset 3, -24
 344              		.cfi_offset 4, -20
 345              		.cfi_offset 5, -16
 346              		.cfi_offset 6, -12
 347              		.cfi_offset 7, -8
 348              		.cfi_offset 14, -4
 207:Core/Src/scheme.c ****   
 349              		.loc 1 207 3 is_stmt 1 view .LVU80
 350              	.LVL31:
 211:Core/Src/scheme.c **** 
 351              		.loc 1 211 5 view .LVU81
 352 0002 0122     		movs	r2, #1
 353 0004 2021     		movs	r1, #32
 354 0006 5148     		ldr	r0, .L32
 355              	.LVL32:
 211:Core/Src/scheme.c **** 
 356              		.loc 1 211 5 is_stmt 0 view .LVU82
 357 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 358              	.LVL33:
 213:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 359              		.loc 1 213 3 is_stmt 1 view .LVU83
ARM GAS  /tmp/ccGRH1Zt.s 			page 14


 213:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 360              		.loc 1 213 31 is_stmt 0 view .LVU84
 361 000c 504B     		ldr	r3, .L32+4
 362 000e 1B68     		ldr	r3, [r3]
 363 0010 5A68     		ldr	r2, [r3, #4]
 213:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 364              		.loc 1 213 29 view .LVU85
 365 0012 C2F13202 		rsb	r2, r2, #50
 213:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 366              		.loc 1 213 66 view .LVU86
 367 0016 4F4B     		ldr	r3, .L32+8
 368 0018 A3FB0213 		umull	r1, r3, r3, r2
 369 001c 1B09     		lsrs	r3, r3, #4
 370 001e 3221     		movs	r1, #50
 371 0020 01FB1323 		mls	r3, r1, r3, r2
 213:Core/Src/scheme.c ****     lastAnalogValue = adcBuffer[last_index];
 372              		.loc 1 213 14 view .LVU87
 373 0024 4C4A     		ldr	r2, .L32+12
 374 0026 1380     		strh	r3, [r2]	@ movhi
 214:Core/Src/scheme.c ****     //update moving average if in MOVING_AVERAGE mode
 375              		.loc 1 214 5 is_stmt 1 view .LVU88
 214:Core/Src/scheme.c ****     //update moving average if in MOVING_AVERAGE mode
 376              		.loc 1 214 32 is_stmt 0 view .LVU89
 377 0028 9BB2     		uxth	r3, r3
 378 002a 4C4A     		ldr	r2, .L32+16
 379 002c 52F82320 		ldr	r2, [r2, r3, lsl #2]
 214:Core/Src/scheme.c ****     //update moving average if in MOVING_AVERAGE mode
 380              		.loc 1 214 21 view .LVU90
 381 0030 94B2     		uxth	r4, r2
 382 0032 4B4B     		ldr	r3, .L32+20
 383 0034 1C80     		strh	r4, [r3]	@ movhi
 216:Core/Src/scheme.c ****       sum -= adc_moving_average[buffer_index];
 384              		.loc 1 216 5 is_stmt 1 view .LVU91
 216:Core/Src/scheme.c ****       sum -= adc_moving_average[buffer_index];
 385              		.loc 1 216 27 is_stmt 0 view .LVU92
 386 0036 4B4B     		ldr	r3, .L32+24
 387 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 216:Core/Src/scheme.c ****       sum -= adc_moving_average[buffer_index];
 388              		.loc 1 216 8 view .LVU93
 389 003a 012B     		cmp	r3, #1
 390 003c 35D0     		beq	.L31
 391              	.L22:
 224:Core/Src/scheme.c ****     {
 392              		.loc 1 224 5 is_stmt 1 view .LVU94
 393 003e 012B     		cmp	r3, #1
 394 0040 4CD0     		beq	.L23
 395 0042 022B     		cmp	r3, #2
 396 0044 5ED0     		beq	.L24
 397 0046 23B9     		cbnz	r3, .L25
 398              	.LBB2:
 227:Core/Src/scheme.c ****       break;
 399              		.loc 1 227 7 view .LVU95
 400 0048 92B2     		uxth	r2, r2
 401 004a 4749     		ldr	r1, .L32+28
 402 004c 4748     		ldr	r0, .L32+32
 403 004e FFF7FEFF 		bl	sprintf
 404              	.LVL34:
ARM GAS  /tmp/ccGRH1Zt.s 			page 15


 228:Core/Src/scheme.c ****     
 405              		.loc 1 228 7 view .LVU96
 406              	.L25:
 407              	.LBE2:
 242:Core/Src/scheme.c **** 
 408              		.loc 1 242 5 view .LVU97
 242:Core/Src/scheme.c **** 
 409              		.loc 1 242 55 is_stmt 0 view .LVU98
 410 0052 464C     		ldr	r4, .L32+32
 411 0054 2046     		mov	r0, r4
 412 0056 FFF7FEFF 		bl	strlen
 413              	.LVL35:
 242:Core/Src/scheme.c **** 
 414              		.loc 1 242 5 discriminator 1 view .LVU99
 415 005a 454E     		ldr	r6, .L32+36
 416 005c 4FF0FF33 		mov	r3, #-1
 417 0060 82B2     		uxth	r2, r0
 418 0062 2146     		mov	r1, r4
 419 0064 3046     		mov	r0, r6
 420 0066 FFF7FEFF 		bl	HAL_UART_Transmit
 421              	.LVL36:
 245:Core/Src/scheme.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 422              		.loc 1 245 5 is_stmt 1 view .LVU100
 423 006a 424D     		ldr	r5, .L32+40
 424 006c 2A88     		ldrh	r2, [r5]
 425 006e 4249     		ldr	r1, .L32+44
 426 0070 2046     		mov	r0, r4
 427 0072 FFF7FEFF 		bl	sprintf
 428              	.LVL37:
 246:Core/Src/scheme.c ****     
 429              		.loc 1 246 5 view .LVU101
 246:Core/Src/scheme.c ****     
 430              		.loc 1 246 55 is_stmt 0 view .LVU102
 431 0076 2046     		mov	r0, r4
 432 0078 FFF7FEFF 		bl	strlen
 433              	.LVL38:
 246:Core/Src/scheme.c ****     
 434              		.loc 1 246 5 discriminator 1 view .LVU103
 435 007c 4FF0FF33 		mov	r3, #-1
 436 0080 82B2     		uxth	r2, r0
 437 0082 2146     		mov	r1, r4
 438 0084 3046     		mov	r0, r6
 439 0086 FFF7FEFF 		bl	HAL_UART_Transmit
 440              	.LVL39:
 248:Core/Src/scheme.c ****       //check if is high for 5 seconds
 441              		.loc 1 248 5 is_stmt 1 view .LVU104
 248:Core/Src/scheme.c ****       //check if is high for 5 seconds
 442              		.loc 1 248 8 is_stmt 0 view .LVU105
 443 008a 2B88     		ldrh	r3, [r5]
 248:Core/Src/scheme.c ****       //check if is high for 5 seconds
 444              		.loc 1 248 7 view .LVU106
 445 008c 002B     		cmp	r3, #0
 446 008e 4ED0     		beq	.L26
 250:Core/Src/scheme.c ****         //warning state
 447              		.loc 1 250 7 is_stmt 1 view .LVU107
 250:Core/Src/scheme.c ****         //warning state
 448              		.loc 1 250 10 is_stmt 0 view .LVU108
ARM GAS  /tmp/ccGRH1Zt.s 			page 16


 449 0090 FFF7FEFF 		bl	HAL_GetTick
 450              	.LVL40:
 250:Core/Src/scheme.c ****         //warning state
 451              		.loc 1 250 24 discriminator 1 view .LVU109
 452 0094 394B     		ldr	r3, .L32+48
 453 0096 1B68     		ldr	r3, [r3]
 454 0098 C01A     		subs	r0, r0, r3
 250:Core/Src/scheme.c ****         //warning state
 455              		.loc 1 250 9 discriminator 1 view .LVU110
 456 009a 41F28733 		movw	r3, #4999
 457 009e 9842     		cmp	r0, r3
 458 00a0 4CD9     		bls	.L27
 252:Core/Src/scheme.c ****       }
 459              		.loc 1 252 9 is_stmt 1 view .LVU111
 252:Core/Src/scheme.c ****       }
 460              		.loc 1 252 24 is_stmt 0 view .LVU112
 461 00a2 374B     		ldr	r3, .L32+52
 462 00a4 0122     		movs	r2, #1
 463 00a6 1A70     		strb	r2, [r3]
 464 00a8 48E0     		b	.L27
 465              	.L31:
 217:Core/Src/scheme.c ****       adc_moving_average[buffer_index] = lastAnalogValue;
 466              		.loc 1 217 7 is_stmt 1 view .LVU113
 217:Core/Src/scheme.c ****       adc_moving_average[buffer_index] = lastAnalogValue;
 467              		.loc 1 217 32 is_stmt 0 view .LVU114
 468 00aa 364E     		ldr	r6, .L32+56
 469 00ac 3188     		ldrh	r1, [r6]
 470 00ae 364F     		ldr	r7, .L32+60
 471 00b0 37F811C0 		ldrh	ip, [r7, r1, lsl #1]
 217:Core/Src/scheme.c ****       adc_moving_average[buffer_index] = lastAnalogValue;
 472              		.loc 1 217 11 view .LVU115
 473 00b4 354D     		ldr	r5, .L32+64
 474 00b6 2868     		ldr	r0, [r5]
 475 00b8 A0EB0C00 		sub	r0, r0, ip
 476 00bc 2860     		str	r0, [r5]
 218:Core/Src/scheme.c ****       sum += lastAnalogValue;
 477              		.loc 1 218 7 is_stmt 1 view .LVU116
 218:Core/Src/scheme.c ****       sum += lastAnalogValue;
 478              		.loc 1 218 40 is_stmt 0 view .LVU117
 479 00be 27F81140 		strh	r4, [r7, r1, lsl #1]	@ movhi
 219:Core/Src/scheme.c ****       buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 480              		.loc 1 219 7 is_stmt 1 view .LVU118
 219:Core/Src/scheme.c ****       buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 481              		.loc 1 219 11 is_stmt 0 view .LVU119
 482 00c2 10FA82F0 		uxtah	r0, r0, r2
 483 00c6 2860     		str	r0, [r5]
 220:Core/Src/scheme.c ****     }
 484              		.loc 1 220 7 is_stmt 1 view .LVU120
 220:Core/Src/scheme.c ****     }
 485              		.loc 1 220 36 is_stmt 0 view .LVU121
 486 00c8 481C     		adds	r0, r1, #1
 220:Core/Src/scheme.c ****     }
 487              		.loc 1 220 41 view .LVU122
 488 00ca 3149     		ldr	r1, .L32+68
 489 00cc 81FB0041 		smull	r4, r1, r1, r0
 490 00d0 0911     		asrs	r1, r1, #4
 491 00d2 9624     		movs	r4, #150
ARM GAS  /tmp/ccGRH1Zt.s 			page 17


 492 00d4 04FB1101 		mls	r1, r4, r1, r0
 220:Core/Src/scheme.c ****     }
 493              		.loc 1 220 20 view .LVU123
 494 00d8 3180     		strh	r1, [r6]	@ movhi
 495 00da B0E7     		b	.L22
 496              	.L23:
 497              	.LBB3:
 231:Core/Src/scheme.c ****       sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 498              		.loc 1 231 7 is_stmt 1 view .LVU124
 231:Core/Src/scheme.c ****       sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 499              		.loc 1 231 26 is_stmt 0 view .LVU125
 500 00dc 2B4B     		ldr	r3, .L32+64
 501 00de D3ED007A 		vldr.32	s15, [r3]	@ int
 502 00e2 F8EE677A 		vcvt.f32.u32	s15, s15
 503              	.LVL41:
 232:Core/Src/scheme.c ****       break;
 504              		.loc 1 232 7 is_stmt 1 view .LVU126
 505 00e6 9FED2B7A 		vldr.32	s14, .L32+72
 506 00ea C7EE877A 		vdiv.f32	s15, s15, s14
 507              	.LVL42:
 232:Core/Src/scheme.c ****       break;
 508              		.loc 1 232 7 is_stmt 0 view .LVU127
 509 00ee 17EE900A 		vmov	r0, s15
 510 00f2 FFF7FEFF 		bl	__aeabi_f2d
 511              	.LVL43:
 232:Core/Src/scheme.c ****       break;
 512              		.loc 1 232 7 view .LVU128
 513 00f6 0246     		mov	r2, r0
 514 00f8 0B46     		mov	r3, r1
 515 00fa 2749     		ldr	r1, .L32+76
 516 00fc 1B48     		ldr	r0, .L32+32
 517 00fe FFF7FEFF 		bl	sprintf
 518              	.LVL44:
 233:Core/Src/scheme.c **** 
 519              		.loc 1 233 7 is_stmt 1 view .LVU129
 520 0102 A6E7     		b	.L25
 521              	.LVL45:
 522              	.L24:
 236:Core/Src/scheme.c ****       break;
 523              		.loc 1 236 7 view .LVU130
 236:Core/Src/scheme.c ****       break;
 524              		.loc 1 236 62 is_stmt 0 view .LVU131
 525 0104 154B     		ldr	r3, .L32+16
 526 0106 1C68     		ldr	r4, [r3]
 236:Core/Src/scheme.c ****       break;
 527              		.loc 1 236 68 view .LVU132
 528 0108 FFF7FEFF 		bl	rand
 529              	.LVL46:
 236:Core/Src/scheme.c ****       break;
 530              		.loc 1 236 75 discriminator 1 view .LVU133
 531 010c 204A     		ldr	r2, .L32+68
 532 010e 82FB0032 		smull	r3, r2, r2, r0
 533 0112 C317     		asrs	r3, r0, #31
 534 0114 C3EB6213 		rsb	r3, r3, r2, asr #5
 535 0118 4FF49672 		mov	r2, #300
 536 011c 02FB1303 		mls	r3, r2, r3, r0
 236:Core/Src/scheme.c ****       break;
ARM GAS  /tmp/ccGRH1Zt.s 			page 18


 537              		.loc 1 236 41 discriminator 1 view .LVU134
 538 0120 E218     		adds	r2, r4, r3
 236:Core/Src/scheme.c ****       break;
 539              		.loc 1 236 7 discriminator 1 view .LVU135
 540 0122 92B2     		uxth	r2, r2
 541 0124 1D49     		ldr	r1, .L32+80
 542 0126 1148     		ldr	r0, .L32+32
 543 0128 FFF7FEFF 		bl	sprintf
 544              	.LVL47:
 237:Core/Src/scheme.c **** 
 545              		.loc 1 237 7 is_stmt 1 view .LVU136
 546 012c 91E7     		b	.L25
 547              	.L26:
 548              	.LBE3:
 256:Core/Src/scheme.c ****       isWarningState = 0;
 549              		.loc 1 256 7 view .LVU137
 256:Core/Src/scheme.c ****       isWarningState = 0;
 550              		.loc 1 256 19 is_stmt 0 view .LVU138
 551 012e FFF7FEFF 		bl	HAL_GetTick
 552              	.LVL48:
 256:Core/Src/scheme.c ****       isWarningState = 0;
 553              		.loc 1 256 17 discriminator 1 view .LVU139
 554 0132 124B     		ldr	r3, .L32+48
 555 0134 1860     		str	r0, [r3]
 257:Core/Src/scheme.c ****     }
 556              		.loc 1 257 7 is_stmt 1 view .LVU140
 257:Core/Src/scheme.c ****     }
 557              		.loc 1 257 22 is_stmt 0 view .LVU141
 558 0136 124B     		ldr	r3, .L32+52
 559 0138 0022     		movs	r2, #0
 560 013a 1A70     		strb	r2, [r3]
 561              	.L27:
 260:Core/Src/scheme.c ****       next_state = STATE_WARNING;
 562              		.loc 1 260 5 is_stmt 1 view .LVU142
 260:Core/Src/scheme.c ****       next_state = STATE_WARNING;
 563              		.loc 1 260 8 is_stmt 0 view .LVU143
 564 013c 104B     		ldr	r3, .L32+52
 565 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 260:Core/Src/scheme.c ****       next_state = STATE_WARNING;
 566              		.loc 1 260 7 view .LVU144
 567 0140 0BB9     		cbnz	r3, .L29
 207:Core/Src/scheme.c ****   
 568              		.loc 1 207 11 view .LVU145
 569 0142 0220     		movs	r0, #2
 570              	.L28:
 571              	.LVL49:
 276:Core/Src/scheme.c **** }
 572              		.loc 1 276 3 is_stmt 1 view .LVU146
 277:Core/Src/scheme.c **** 
 573              		.loc 1 277 1 is_stmt 0 view .LVU147
 574 0144 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 575              	.LVL50:
 576              	.L29:
 261:Core/Src/scheme.c ****       //sprintf(msg_buffer, "WARNING STATE!\r\n");
 577              		.loc 1 261 18 view .LVU148
 578 0146 0420     		movs	r0, #4
 579 0148 FCE7     		b	.L28
ARM GAS  /tmp/ccGRH1Zt.s 			page 19


 580              	.L33:
 581 014a 00BF     		.align	2
 582              	.L32:
 583 014c 00080240 		.word	1073874944
 584 0150 00000000 		.word	hdma_adc1
 585 0154 1F85EB51 		.word	1374389535
 586 0158 00000000 		.word	last_index
 587 015c 00000000 		.word	adcBuffer
 588 0160 00000000 		.word	lastAnalogValue
 589 0164 00000000 		.word	currentFilterMode
 590 0168 00000000 		.word	.LC1
 591 016c 00000000 		.word	msg_buffer
 592 0170 00000000 		.word	huart2
 593 0174 00000000 		.word	lastDigitalValue
 594 0178 20000000 		.word	.LC4
 595 017c 00000000 		.word	lastTimer
 596 0180 00000000 		.word	isWarningState
 597 0184 00000000 		.word	buffer_index
 598 0188 00000000 		.word	adc_moving_average
 599 018c 00000000 		.word	sum
 600 0190 B5814E1B 		.word	458129845
 601 0194 00001643 		.word	1125515264
 602 0198 08000000 		.word	.LC2
 603 019c 14000000 		.word	.LC3
 604              		.cfi_endproc
 605              	.LFE227:
 607              		.section	.rodata.handle_cli_command.str1.4,"aMS",%progbits,1
 608              		.align	2
 609              	.LC5:
 610 0000 72617700 		.ascii	"raw\000"
 611              		.align	2
 612              	.LC6:
 613 0004 6D6F7669 		.ascii	"moving average\000"
 613      6E672061 
 613      76657261 
 613      676500
 614 0013 00       		.align	2
 615              	.LC7:
 616 0014 72616E64 		.ascii	"random noise\000"
 616      6F6D206E 
 616      6F697365 
 616      00
 617              		.section	.text.handle_cli_command,"ax",%progbits
 618              		.align	1
 619              		.global	handle_cli_command
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 624              	handle_cli_command:
 625              	.LFB223:
  85:Core/Src/scheme.c ****     if (strcmp(cli_command, "raw") == 0) {
 626              		.loc 1 85 31 is_stmt 1 view -0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630 0000 08B5     		push	{r3, lr}
 631              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccGRH1Zt.s 			page 20


 632              		.cfi_offset 3, -8
 633              		.cfi_offset 14, -4
  86:Core/Src/scheme.c ****         currentFilterMode = RAW;
 634              		.loc 1 86 5 view .LVU150
  86:Core/Src/scheme.c ****         currentFilterMode = RAW;
 635              		.loc 1 86 9 is_stmt 0 view .LVU151
 636 0002 1449     		ldr	r1, .L41
 637 0004 1448     		ldr	r0, .L41+4
 638 0006 FFF7FEFF 		bl	strcmp
 639              	.LVL51:
  86:Core/Src/scheme.c ****         currentFilterMode = RAW;
 640              		.loc 1 86 8 discriminator 1 view .LVU152
 641 000a 48B9     		cbnz	r0, .L35
  87:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 642              		.loc 1 87 9 is_stmt 1 view .LVU153
  87:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 643              		.loc 1 87 27 is_stmt 0 view .LVU154
 644 000c 134B     		ldr	r3, .L41+8
 645 000e 0022     		movs	r2, #0
 646 0010 1A70     		strb	r2, [r3]
 647              	.L36:
  98:Core/Src/scheme.c ****     return 0;
 648              		.loc 1 98 5 is_stmt 1 view .LVU155
 649 0012 3222     		movs	r2, #50
 650 0014 0021     		movs	r1, #0
 651 0016 1048     		ldr	r0, .L41+4
 652 0018 FFF7FEFF 		bl	memset
 653              	.LVL52:
  99:Core/Src/scheme.c **** }
 654              		.loc 1 99 5 view .LVU156
  99:Core/Src/scheme.c **** }
 655              		.loc 1 99 12 is_stmt 0 view .LVU157
 656 001c 0020     		movs	r0, #0
 657              	.L39:
 100:Core/Src/scheme.c **** 
 658              		.loc 1 100 1 view .LVU158
 659 001e 08BD     		pop	{r3, pc}
 660              	.L35:
  88:Core/Src/scheme.c ****         currentFilterMode = MOVING_AVERAGE;
 661              		.loc 1 88 12 is_stmt 1 view .LVU159
  88:Core/Src/scheme.c ****         currentFilterMode = MOVING_AVERAGE;
 662              		.loc 1 88 16 is_stmt 0 view .LVU160
 663 0020 0F49     		ldr	r1, .L41+12
 664 0022 0D48     		ldr	r0, .L41+4
 665 0024 FFF7FEFF 		bl	strcmp
 666              	.LVL53:
  88:Core/Src/scheme.c ****         currentFilterMode = MOVING_AVERAGE;
 667              		.loc 1 88 15 discriminator 1 view .LVU161
 668 0028 18B9     		cbnz	r0, .L37
  89:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 669              		.loc 1 89 9 is_stmt 1 view .LVU162
  89:Core/Src/scheme.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 670              		.loc 1 89 27 is_stmt 0 view .LVU163
 671 002a 0C4B     		ldr	r3, .L41+8
 672 002c 0122     		movs	r2, #1
 673 002e 1A70     		strb	r2, [r3]
 674 0030 EFE7     		b	.L36
ARM GAS  /tmp/ccGRH1Zt.s 			page 21


 675              	.L37:
  90:Core/Src/scheme.c ****         currentFilterMode = RANDOM_NOISE;
 676              		.loc 1 90 12 is_stmt 1 view .LVU164
  90:Core/Src/scheme.c ****         currentFilterMode = RANDOM_NOISE;
 677              		.loc 1 90 16 is_stmt 0 view .LVU165
 678 0032 0C49     		ldr	r1, .L41+16
 679 0034 0848     		ldr	r0, .L41+4
 680 0036 FFF7FEFF 		bl	strcmp
 681              	.LVL54:
  90:Core/Src/scheme.c ****         currentFilterMode = RANDOM_NOISE;
 682              		.loc 1 90 15 discriminator 1 view .LVU166
 683 003a 18B9     		cbnz	r0, .L38
  91:Core/Src/scheme.c ****     } else {
 684              		.loc 1 91 9 is_stmt 1 view .LVU167
  91:Core/Src/scheme.c ****     } else {
 685              		.loc 1 91 27 is_stmt 0 view .LVU168
 686 003c 074B     		ldr	r3, .L41+8
 687 003e 0222     		movs	r2, #2
 688 0040 1A70     		strb	r2, [r3]
 689 0042 E6E7     		b	.L36
 690              	.L38:
  94:Core/Src/scheme.c ****         return 1;
 691              		.loc 1 94 9 is_stmt 1 view .LVU169
 692 0044 3222     		movs	r2, #50
 693 0046 0021     		movs	r1, #0
 694 0048 0348     		ldr	r0, .L41+4
 695 004a FFF7FEFF 		bl	memset
 696              	.LVL55:
  95:Core/Src/scheme.c ****     }
 697              		.loc 1 95 9 view .LVU170
  95:Core/Src/scheme.c ****     }
 698              		.loc 1 95 16 is_stmt 0 view .LVU171
 699 004e 0120     		movs	r0, #1
 700 0050 E5E7     		b	.L39
 701              	.L42:
 702 0052 00BF     		.align	2
 703              	.L41:
 704 0054 00000000 		.word	.LC5
 705 0058 00000000 		.word	cli_command
 706 005c 00000000 		.word	currentFilterMode
 707 0060 04000000 		.word	.LC6
 708 0064 14000000 		.word	.LC7
 709              		.cfi_endproc
 710              	.LFE223:
 712              		.section	.text.run_state,"ax",%progbits
 713              		.align	1
 714              		.global	run_state
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
 719              	run_state:
 720              	.LVL56:
 721              	.LFB230:
 320:Core/Src/scheme.c **** 
 321:Core/Src/scheme.c **** 
 322:Core/Src/scheme.c **** 
 323:Core/Src/scheme.c **** /*  ____  _        _        
ARM GAS  /tmp/ccGRH1Zt.s 			page 22


 324:Core/Src/scheme.c ****  * / ___|| |_ __ _| |_ ___  
 325:Core/Src/scheme.c ****  * \___ \| __/ _` | __/ _ \
 326:Core/Src/scheme.c ****  *  ___) | || (_| | ||  __/ 
 327:Core/Src/scheme.c ****  * |____/ \__\__,_|\__\___| 
 328:Core/Src/scheme.c ****  *                          
 329:Core/Src/scheme.c ****  *                                              
 330:Core/Src/scheme.c ****  *  _ __ ___   __ _ _ __   __ _  __ _  ___ _ __ 
 331:Core/Src/scheme.c ****  * | '_ ` _ \ / _` | '_ \ / _` |/ _` |/ _ \ '__|
 332:Core/Src/scheme.c ****  * | | | | | | (_| | | | | (_| | (_| |  __/ |   
 333:Core/Src/scheme.c ****  * |_| |_| |_|\__,_|_| |_|\__,_|\__, |\___|_|   
 334:Core/Src/scheme.c ****  *                              |___/           
 335:Core/Src/scheme.c ****  */
 336:Core/Src/scheme.c **** 
 337:Core/Src/scheme.c **** state_t run_state(state_t cur_state, state_data_t *data) {
 722              		.loc 1 337 58 is_stmt 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726              		.loc 1 337 58 is_stmt 0 view .LVU173
 727 0000 10B5     		push	{r4, lr}
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 4, -8
 730              		.cfi_offset 14, -4
 731 0002 0446     		mov	r4, r0
 338:Core/Src/scheme.c ****   state_t new_state = state_table[cur_state](data);
 732              		.loc 1 338 3 is_stmt 1 view .LVU174
 733              		.loc 1 338 34 is_stmt 0 view .LVU175
 734 0004 044B     		ldr	r3, .L48
 735 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 736              		.loc 1 338 23 view .LVU176
 737 000a 0846     		mov	r0, r1
 738              	.LVL57:
 739              		.loc 1 338 23 view .LVU177
 740 000c 9847     		blx	r3
 741              	.LVL58:
 339:Core/Src/scheme.c ****   if (new_state == NO_CHANGE) new_state = cur_state;
 742              		.loc 1 339 3 is_stmt 1 view .LVU178
 743              		.loc 1 339 6 is_stmt 0 view .LVU179
 744 000e 0728     		cmp	r0, #7
 745 0010 00D0     		beq	.L47
 746              	.LVL59:
 747              	.L44:
 340:Core/Src/scheme.c ****   return new_state;
 748              		.loc 1 340 3 is_stmt 1 view .LVU180
 341:Core/Src/scheme.c **** };
 749              		.loc 1 341 1 is_stmt 0 view .LVU181
 750 0012 10BD     		pop	{r4, pc}
 751              	.LVL60:
 752              	.L47:
 339:Core/Src/scheme.c ****   if (new_state == NO_CHANGE) new_state = cur_state;
 753              		.loc 1 339 41 discriminator 1 view .LVU182
 754 0014 2046     		mov	r0, r4
 755              	.LVL61:
 339:Core/Src/scheme.c ****   if (new_state == NO_CHANGE) new_state = cur_state;
 756              		.loc 1 339 41 discriminator 1 view .LVU183
 757 0016 FCE7     		b	.L44
 758              	.L49:
ARM GAS  /tmp/ccGRH1Zt.s 			page 23


 759              		.align	2
 760              	.L48:
 761 0018 00000000 		.word	state_table
 762              		.cfi_endproc
 763              	.LFE230:
 765              		.global	state_table
 766              		.section	.rodata.state_table,"a"
 767              		.align	2
 770              	state_table:
 771 0000 00000000 		.word	do_init
 772 0004 00000000 		.word	do_wait_request
 773 0008 00000000 		.word	do_error
 774 000c 00000000 		.word	do_listening
 775 0010 00000000 		.word	do_warning
 776 0014 00000000 		.word	do_pause
 777              		.global	state_names
 778              		.section	.rodata.str1.4,"aMS",%progbits,1
 779              		.align	2
 780              	.LC8:
 781 0000 696E6974 		.ascii	"init\000"
 781      00
 782 0005 000000   		.align	2
 783              	.LC9:
 784 0008 77616974 		.ascii	"wait_request\000"
 784      5F726571 
 784      75657374 
 784      00
 785 0015 000000   		.align	2
 786              	.LC10:
 787 0018 6572726F 		.ascii	"error\000"
 787      7200
 788 001e 0000     		.align	2
 789              	.LC11:
 790 0020 6C697374 		.ascii	"listening\000"
 790      656E696E 
 790      6700
 791 002a 0000     		.align	2
 792              	.LC12:
 793 002c 7761726E 		.ascii	"warning\000"
 793      696E6700 
 794              		.align	2
 795              	.LC13:
 796 0034 70617573 		.ascii	"pause\000"
 796      6500
 797              		.section	.data.state_names,"aw"
 798              		.align	2
 801              	state_names:
 802 0000 00000000 		.word	.LC8
 803 0004 08000000 		.word	.LC9
 804 0008 18000000 		.word	.LC10
 805 000c 20000000 		.word	.LC11
 806 0010 2C000000 		.word	.LC12
 807 0014 34000000 		.word	.LC13
 808              		.global	msg_buffer
 809              		.section	.bss.msg_buffer,"aw",%nobits
 810              		.align	2
 813              	msg_buffer:
ARM GAS  /tmp/ccGRH1Zt.s 			page 24


 814 0000 00000000 		.space	50
 814      00000000 
 814      00000000 
 814      00000000 
 814      00000000 
 815              		.global	sendRequest
 816              		.section	.bss.sendRequest,"aw",%nobits
 819              	sendRequest:
 820 0000 00       		.space	1
 821              		.global	cli_command
 822              		.section	.bss.cli_command,"aw",%nobits
 823              		.align	2
 826              	cli_command:
 827 0000 00000000 		.space	50
 827      00000000 
 827      00000000 
 827      00000000 
 827      00000000 
 828              		.global	currentFilterMode
 829              		.section	.bss.currentFilterMode,"aw",%nobits
 832              	currentFilterMode:
 833 0000 00       		.space	1
 834              		.global	isWarningState
 835              		.section	.bss.isWarningState,"aw",%nobits
 838              	isWarningState:
 839 0000 00       		.space	1
 840              		.global	lastTimer
 841              		.section	.bss.lastTimer,"aw",%nobits
 842              		.align	2
 845              	lastTimer:
 846 0000 00000000 		.space	4
 847              		.global	sum
 848              		.section	.bss.sum,"aw",%nobits
 849              		.align	2
 852              	sum:
 853 0000 00000000 		.space	4
 854              		.global	buffer_index
 855              		.section	.bss.buffer_index,"aw",%nobits
 856              		.align	1
 859              	buffer_index:
 860 0000 0000     		.space	2
 861              		.global	adc_moving_average
 862              		.section	.bss.adc_moving_average,"aw",%nobits
 863              		.align	2
 866              	adc_moving_average:
 867 0000 00000000 		.space	300
 867      00000000 
 867      00000000 
 867      00000000 
 867      00000000 
 868              		.global	disableInterrupt
 869              		.section	.bss.disableInterrupt,"aw",%nobits
 872              	disableInterrupt:
 873 0000 00       		.space	1
 874              		.global	adcBuffer
 875              		.section	.bss.adcBuffer,"aw",%nobits
 876              		.align	2
ARM GAS  /tmp/ccGRH1Zt.s 			page 25


 879              	adcBuffer:
 880 0000 00000000 		.space	1200
 880      00000000 
 880      00000000 
 880      00000000 
 880      00000000 
 881              		.global	last_index
 882              		.section	.bss.last_index,"aw",%nobits
 883              		.align	1
 886              	last_index:
 887 0000 0000     		.space	2
 888              		.global	lastDigitalValue
 889              		.section	.bss.lastDigitalValue,"aw",%nobits
 890              		.align	1
 893              	lastDigitalValue:
 894 0000 0000     		.space	2
 895              		.global	lastAnalogValue
 896              		.section	.bss.lastAnalogValue,"aw",%nobits
 897              		.align	1
 900              	lastAnalogValue:
 901 0000 0000     		.space	2
 902              		.global	halStatus
 903              		.section	.bss.halStatus,"aw",%nobits
 906              	halStatus:
 907 0000 00       		.space	1
 908              		.global	huart2
 909              		.section	.bss.huart2,"aw",%nobits
 910              		.align	2
 913              	huart2:
 914 0000 00000000 		.space	72
 914      00000000 
 914      00000000 
 914      00000000 
 914      00000000 
 915              		.global	hdma_adc1
 916              		.section	.bss.hdma_adc1,"aw",%nobits
 917              		.align	2
 920              	hdma_adc1:
 921 0000 00000000 		.space	96
 921      00000000 
 921      00000000 
 921      00000000 
 921      00000000 
 922              		.global	hadc1
 923              		.section	.bss.hadc1,"aw",%nobits
 924              		.align	2
 927              	hadc1:
 928 0000 00000000 		.space	72
 928      00000000 
 928      00000000 
 928      00000000 
 928      00000000 
 929              		.text
 930              	.Letext0:
 931              		.file 2 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 932              		.file 3 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 933              		.file 4 "Core/Src/scheme.h"
ARM GAS  /tmp/ccGRH1Zt.s 			page 26


 934              		.file 5 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 935              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 936              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 937              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 938              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 939              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 940              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 941              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 942              		.file 13 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 943              		.file 14 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 944              		.file 15 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 945              		.file 16 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 946              		.file 17 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 947              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 948              		.file 19 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 949              		.file 20 "<built-in>"
ARM GAS  /tmp/ccGRH1Zt.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 scheme.c
     /tmp/ccGRH1Zt.s:21     .text.do_error:00000000 $t
     /tmp/ccGRH1Zt.s:27     .text.do_error:00000000 do_error
     /tmp/ccGRH1Zt.s:47     .text.do_warning:00000000 $t
     /tmp/ccGRH1Zt.s:53     .text.do_warning:00000000 do_warning
     /tmp/ccGRH1Zt.s:73     .text.do_pause:00000000 $t
     /tmp/ccGRH1Zt.s:79     .text.do_pause:00000000 do_pause
     /tmp/ccGRH1Zt.s:99     .text.do_init:00000000 $t
     /tmp/ccGRH1Zt.s:105    .text.do_init:00000000 do_init
     /tmp/ccGRH1Zt.s:208    .text.do_init:00000064 $d
     /tmp/ccGRH1Zt.s:906    .bss.halStatus:00000000 halStatus
     /tmp/ccGRH1Zt.s:879    .bss.adcBuffer:00000000 adcBuffer
     /tmp/ccGRH1Zt.s:927    .bss.hadc1:00000000 hadc1
     /tmp/ccGRH1Zt.s:826    .bss.cli_command:00000000 cli_command
     /tmp/ccGRH1Zt.s:913    .bss.huart2:00000000 huart2
     /tmp/ccGRH1Zt.s:845    .bss.lastTimer:00000000 lastTimer
     /tmp/ccGRH1Zt.s:218    .rodata.do_wait_request.str1.4:00000000 $d
     /tmp/ccGRH1Zt.s:222    .text.do_wait_request:00000000 $t
     /tmp/ccGRH1Zt.s:228    .text.do_wait_request:00000000 do_wait_request
     /tmp/ccGRH1Zt.s:303    .text.do_wait_request:00000048 $d
     /tmp/ccGRH1Zt.s:819    .bss.sendRequest:00000000 sendRequest
     /tmp/ccGRH1Zt.s:813    .bss.msg_buffer:00000000 msg_buffer
     /tmp/ccGRH1Zt.s:313    .rodata.do_listening.str1.4:00000000 $d
     /tmp/ccGRH1Zt.s:327    .text.do_listening:00000000 $t
     /tmp/ccGRH1Zt.s:333    .text.do_listening:00000000 do_listening
     /tmp/ccGRH1Zt.s:583    .text.do_listening:0000014c $d
     /tmp/ccGRH1Zt.s:920    .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccGRH1Zt.s:886    .bss.last_index:00000000 last_index
     /tmp/ccGRH1Zt.s:900    .bss.lastAnalogValue:00000000 lastAnalogValue
     /tmp/ccGRH1Zt.s:832    .bss.currentFilterMode:00000000 currentFilterMode
     /tmp/ccGRH1Zt.s:893    .bss.lastDigitalValue:00000000 lastDigitalValue
     /tmp/ccGRH1Zt.s:838    .bss.isWarningState:00000000 isWarningState
     /tmp/ccGRH1Zt.s:859    .bss.buffer_index:00000000 buffer_index
     /tmp/ccGRH1Zt.s:866    .bss.adc_moving_average:00000000 adc_moving_average
     /tmp/ccGRH1Zt.s:852    .bss.sum:00000000 sum
     /tmp/ccGRH1Zt.s:608    .rodata.handle_cli_command.str1.4:00000000 $d
     /tmp/ccGRH1Zt.s:618    .text.handle_cli_command:00000000 $t
     /tmp/ccGRH1Zt.s:624    .text.handle_cli_command:00000000 handle_cli_command
     /tmp/ccGRH1Zt.s:704    .text.handle_cli_command:00000054 $d
     /tmp/ccGRH1Zt.s:713    .text.run_state:00000000 $t
     /tmp/ccGRH1Zt.s:719    .text.run_state:00000000 run_state
     /tmp/ccGRH1Zt.s:761    .text.run_state:00000018 $d
     /tmp/ccGRH1Zt.s:770    .rodata.state_table:00000000 state_table
     /tmp/ccGRH1Zt.s:767    .rodata.state_table:00000000 $d
     /tmp/ccGRH1Zt.s:801    .data.state_names:00000000 state_names
     /tmp/ccGRH1Zt.s:779    .rodata.str1.4:00000000 $d
     /tmp/ccGRH1Zt.s:798    .data.state_names:00000000 $d
     /tmp/ccGRH1Zt.s:810    .bss.msg_buffer:00000000 $d
     /tmp/ccGRH1Zt.s:820    .bss.sendRequest:00000000 $d
     /tmp/ccGRH1Zt.s:823    .bss.cli_command:00000000 $d
     /tmp/ccGRH1Zt.s:833    .bss.currentFilterMode:00000000 $d
     /tmp/ccGRH1Zt.s:839    .bss.isWarningState:00000000 $d
     /tmp/ccGRH1Zt.s:842    .bss.lastTimer:00000000 $d
     /tmp/ccGRH1Zt.s:849    .bss.sum:00000000 $d
     /tmp/ccGRH1Zt.s:856    .bss.buffer_index:00000000 $d
     /tmp/ccGRH1Zt.s:863    .bss.adc_moving_average:00000000 $d
ARM GAS  /tmp/ccGRH1Zt.s 			page 28


     /tmp/ccGRH1Zt.s:872    .bss.disableInterrupt:00000000 disableInterrupt
     /tmp/ccGRH1Zt.s:873    .bss.disableInterrupt:00000000 $d
     /tmp/ccGRH1Zt.s:876    .bss.adcBuffer:00000000 $d
     /tmp/ccGRH1Zt.s:883    .bss.last_index:00000000 $d
     /tmp/ccGRH1Zt.s:890    .bss.lastDigitalValue:00000000 $d
     /tmp/ccGRH1Zt.s:897    .bss.lastAnalogValue:00000000 $d
     /tmp/ccGRH1Zt.s:907    .bss.halStatus:00000000 $d
     /tmp/ccGRH1Zt.s:910    .bss.huart2:00000000 $d
     /tmp/ccGRH1Zt.s:917    .bss.hdma_adc1:00000000 $d
     /tmp/ccGRH1Zt.s:924    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
time
srand
HAL_Init
SystemClock_Config
MX_GPIO_Init
MX_DMA_Init
MX_USART2_UART_Init
MX_ADC1_Init
HAL_ADC_Start_DMA
HAL_UARTEx_ReceiveToIdle_IT
HAL_GetTick
HAL_ADC_Stop_DMA
strlen
HAL_UART_Transmit
HAL_GPIO_WritePin
__aeabi_f2d
sprintf
rand
strcmp
memset
