ARM GAS  /tmp/cctN8Zca.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB231:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <time.h> //for random values
  27:Core/Src/main.c **** #include <stdlib.h>
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cctN8Zca.s 			page 2


  32:Core/Src/main.c **** typedef enum {
  33:Core/Src/main.c ****     RAW,
  34:Core/Src/main.c ****     MOVING_AVERAGE,
  35:Core/Src/main.c ****     RANDOM_NOISE
  36:Core/Src/main.c **** } FilterMode;
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** #define ADC_BUFFER_SIZE 300
  43:Core/Src/main.c **** #define MOVING_AVG_SIZE 150
  44:Core/Src/main.c **** #define BUFFER_SIZE 50
  45:Core/Src/main.c **** #define RANDOM_RANGE 300
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  55:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** UART_HandleTypeDef huart2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** //digital and analog variables
  62:Core/Src/main.c **** uint16_t lastAnalogValue = 0; 
  63:Core/Src/main.c **** uint16_t lastDigitalValue = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** uint32_t adcBuffer[ADC_BUFFER_SIZE];//dma data structure
  66:Core/Src/main.c **** uint8_t disableInterrupt = 0;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** //moving average variables
  70:Core/Src/main.c **** uint16_t adc_moving_average[MOVING_AVG_SIZE];
  71:Core/Src/main.c **** uint16_t buffer_index = 0;
  72:Core/Src/main.c **** uint32_t sum = 0;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** //filter mode for data variables
  76:Core/Src/main.c **** FilterMode currentFilterMode = RAW;
  77:Core/Src/main.c **** char cli_command[BUFFER_SIZE];
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** //debug/info variables
  81:Core/Src/main.c **** char msg_buffer[BUFFER_SIZE];//buffer for serial msg
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE END PV */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  86:Core/Src/main.c **** void SystemClock_Config(void);
  87:Core/Src/main.c **** static void MX_GPIO_Init(void);
  88:Core/Src/main.c **** static void MX_DMA_Init(void);
ARM GAS  /tmp/cctN8Zca.s 			page 3


  89:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  90:Core/Src/main.c **** static void MX_ADC1_Init(void);
  91:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END PFP */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  96:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /*
  99:Core/Src/main.c **** this function will handle the interrupt whenever a new digital value is read
 100:Core/Src/main.c **** or the user button is pressed
 101:Core/Src/main.c **** */
 102:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 103:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 104:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 105:Core/Src/main.c ****   }
 106:Core/Src/main.c ****   else if(GPIO_Pin == GPIO_PIN_13){
 107:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 108:Core/Src/main.c ****     disableInterrupt = !disableInterrupt;
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****     //activate/deactivate interrupt for dma and set led pin
 111:Core/Src/main.c ****     if(disableInterrupt){
 112:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 113:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 114:Core/Src/main.c ****     }else{
 115:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 116:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 117:Core/Src/main.c ****     }
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   }
 120:Core/Src/main.c **** }
 121:Core/Src/main.c **** 
 122:Core/Src/main.c **** /*
 123:Core/Src/main.c **** void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 124:Core/Src/main.c **** }
 125:Core/Src/main.c **** */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /*
 128:Core/Src/main.c **** based on the input, change the filter mode
 129:Core/Src/main.c **** */
 130:Core/Src/main.c **** void handle_cli_command() {
 131:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 132:Core/Src/main.c ****         currentFilterMode = RAW;
 133:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 134:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 135:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 136:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 137:Core/Src/main.c ****     } else {
 138:Core/Src/main.c ****         //do nothing, comand not recognized
 139:Core/Src/main.c ****     }
 140:Core/Src/main.c ****     //clear buffer
 141:Core/Src/main.c ****     memset(cli_command, '\0', sizeof(cli_command)); 
 142:Core/Src/main.c **** }
 143:Core/Src/main.c **** 
 144:Core/Src/main.c **** /**
 145:Core/Src/main.c ****  * callback function to handle the receiving of a comand from the user
ARM GAS  /tmp/cctN8Zca.s 			page 4


 146:Core/Src/main.c ****  */
 147:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 148:Core/Src/main.c **** {
 149:Core/Src/main.c ****   handle_cli_command();
 150:Core/Src/main.c ****   sprintf(msg_buffer, "New filter mode: %d\r\n", currentFilterMode);
 151:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 152:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 153:Core/Src/main.c **** }
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /* USER CODE END 0 */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c **** /**
 158:Core/Src/main.c ****   * @brief  The application entry point.
 159:Core/Src/main.c ****   * @retval int
 160:Core/Src/main.c ****   */
 161:Core/Src/main.c **** int main(void)
 162:Core/Src/main.c **** {
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 165:Core/Src/main.c ****   srand(time(NULL)); //set seed for random number generator
 166:Core/Src/main.c ****   /* USER CODE END 1 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 171:Core/Src/main.c ****   HAL_Init();
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* USER CODE END Init */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* Configure the system clock */
 178:Core/Src/main.c ****   SystemClock_Config();
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE END SysInit */
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* Initialize all configured peripherals */
 185:Core/Src/main.c ****   MX_GPIO_Init();
 186:Core/Src/main.c ****   MX_DMA_Init();
 187:Core/Src/main.c ****   MX_USART2_UART_Init();
 188:Core/Src/main.c ****   MX_ADC1_Init();
 189:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   // Initialize the DMA conversion
 192:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 193:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE END 2 */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* Infinite loop */
 198:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   while (1)
 201:Core/Src/main.c ****   {
 202:Core/Src/main.c ****     /* USER CODE END WHILE */
ARM GAS  /tmp/cctN8Zca.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 205:Core/Src/main.c ****     if(!disableInterrupt){
 206:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 207:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 208:Core/Src/main.c ****       if (currentFilterMode == MOVING_AVERAGE) {
 209:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 210:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 211:Core/Src/main.c ****         sum += lastAnalogValue;
 212:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 213:Core/Src/main.c ****       }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****       //print analog data
 216:Core/Src/main.c ****       switch (currentFilterMode)
 217:Core/Src/main.c ****       {
 218:Core/Src/main.c ****       case RAW:
 219:Core/Src/main.c ****         sprintf(msg_buffer, "A:%hu\r\n", (u_int16_t)lastAnalogValue);
 220:Core/Src/main.c ****         break;
 221:Core/Src/main.c ****       
 222:Core/Src/main.c ****       case MOVING_AVERAGE:
 223:Core/Src/main.c ****         float moving_avg = (float)sum / MOVING_AVG_SIZE;
 224:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 225:Core/Src/main.c ****         break;
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****       case RANDOM_NOISE:
 228:Core/Src/main.c ****         sprintf(msg_buffer, "A: %hu\r\n", (u_int16_t)(adcBuffer[0] + rand() % RANDOM_RANGE));
 229:Core/Src/main.c ****         break;
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****       default:
 232:Core/Src/main.c ****         break;
 233:Core/Src/main.c ****       }
 234:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****       //print digital data
 237:Core/Src/main.c ****       sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 238:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 239:Core/Src/main.c ****     }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   /* USER CODE END 3 */
 244:Core/Src/main.c **** }
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** /**
 247:Core/Src/main.c ****   * @brief System Clock Configuration
 248:Core/Src/main.c ****   * @retval None
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c **** void SystemClock_Config(void)
 251:Core/Src/main.c **** {
 252:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 253:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 259:Core/Src/main.c **** 
ARM GAS  /tmp/cctN8Zca.s 			page 6


 260:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 261:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 262:Core/Src/main.c ****   */
 263:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 273:Core/Src/main.c ****   {
 274:Core/Src/main.c ****     Error_Handler();
 275:Core/Src/main.c ****   }
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 280:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 287:Core/Src/main.c ****   {
 288:Core/Src/main.c ****     Error_Handler();
 289:Core/Src/main.c ****   }
 290:Core/Src/main.c **** }
 291:Core/Src/main.c **** 
 292:Core/Src/main.c **** /**
 293:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 294:Core/Src/main.c ****   * @param None
 295:Core/Src/main.c ****   * @retval None
 296:Core/Src/main.c ****   */
 297:Core/Src/main.c **** static void MX_ADC1_Init(void)
 298:Core/Src/main.c **** {
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 307:Core/Src/main.c **** 
 308:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c ****   hadc1.Instance = ADC1;
 313:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 314:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 315:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 316:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/cctN8Zca.s 			page 7


 317:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 318:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 319:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 320:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 321:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 322:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 323:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 332:Core/Src/main.c ****   sConfig.Rank = 1;
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 335:Core/Src/main.c ****   {
 336:Core/Src/main.c ****     Error_Handler();
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 339:Core/Src/main.c **** 
 340:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** }
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** /**
 345:Core/Src/main.c ****   * @brief USART2 Initialization Function
 346:Core/Src/main.c ****   * @param None
 347:Core/Src/main.c ****   * @retval None
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 350:Core/Src/main.c **** {
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 359:Core/Src/main.c ****   huart2.Instance = USART2;
 360:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 361:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 362:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 363:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 364:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 365:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 366:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 367:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 368:Core/Src/main.c ****   {
 369:Core/Src/main.c ****     Error_Handler();
 370:Core/Src/main.c ****   }
 371:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
ARM GAS  /tmp/cctN8Zca.s 			page 8


 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** }
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /**
 378:Core/Src/main.c ****   * Enable DMA controller clock
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c **** static void MX_DMA_Init(void)
 381:Core/Src/main.c **** {
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /* DMA controller clock enable */
 384:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /* DMA interrupt init */
 387:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 388:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 389:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 390:Core/Src/main.c **** 
 391:Core/Src/main.c **** }
 392:Core/Src/main.c **** 
 393:Core/Src/main.c **** /**
 394:Core/Src/main.c ****   * @brief GPIO Initialization Function
 395:Core/Src/main.c ****   * @param None
 396:Core/Src/main.c ****   * @retval None
 397:Core/Src/main.c ****   */
 398:Core/Src/main.c **** static void MX_GPIO_Init(void)
 399:Core/Src/main.c **** {
  28              		.loc 1 399 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 400:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 400 3 view .LVU1
  41              		.loc 1 400 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 401:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 402:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 405:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 405 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 405 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 405 3 view .LVU5
ARM GAS  /tmp/cctN8Zca.s 			page 9


  53 0012 304B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 405 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 405 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 405 3 view .LVU8
 406:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 406 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 406 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 406 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 406 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 406 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 406 3 view .LVU14
 407:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 407 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 407 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 407 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 407 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 407 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 407 3 view .LVU20
 408:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 408 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 408 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 408 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 408 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/cctN8Zca.s 			page 10


 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 408 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 408 3 view .LVU26
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 411:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 411 3 view .LVU27
 114 0062 1D4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 414:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 414 3 view .LVU28
 121              		.loc 1 414 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 415:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 415 3 is_stmt 1 view .LVU30
 125              		.loc 1 415 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 416:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 416 3 is_stmt 1 view .LVU32
 129              		.loc 1 416 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 417:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 417 3 is_stmt 1 view .LVU34
 132 007c 174E     		ldr	r6, .L3+8
 133 007e 05A9     		add	r1, sp, #20
 134 0080 3046     		mov	r0, r6
 135 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /*Configure GPIO pin : PC2 */
 420:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 137              		.loc 1 420 3 view .LVU35
 138              		.loc 1 420 23 is_stmt 0 view .LVU36
 139 0086 0423     		movs	r3, #4
 140 0088 0593     		str	r3, [sp, #20]
 421:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 141              		.loc 1 421 3 is_stmt 1 view .LVU37
 142              		.loc 1 421 24 is_stmt 0 view .LVU38
 143 008a 4FF44413 		mov	r3, #3211264
 144 008e 0693     		str	r3, [sp, #24]
 422:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 422 3 is_stmt 1 view .LVU39
 146              		.loc 1 422 24 is_stmt 0 view .LVU40
 147 0090 0794     		str	r4, [sp, #28]
 423:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 148              		.loc 1 423 3 is_stmt 1 view .LVU41
ARM GAS  /tmp/cctN8Zca.s 			page 11


 149 0092 05A9     		add	r1, sp, #20
 150 0094 3046     		mov	r0, r6
 151 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL2:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 426:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 153              		.loc 1 426 3 view .LVU42
 154              		.loc 1 426 23 is_stmt 0 view .LVU43
 155 009a 2023     		movs	r3, #32
 156 009c 0593     		str	r3, [sp, #20]
 427:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 157              		.loc 1 427 3 is_stmt 1 view .LVU44
 158              		.loc 1 427 24 is_stmt 0 view .LVU45
 159 009e 0123     		movs	r3, #1
 160 00a0 0693     		str	r3, [sp, #24]
 428:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 428 3 is_stmt 1 view .LVU46
 162              		.loc 1 428 24 is_stmt 0 view .LVU47
 163 00a2 0794     		str	r4, [sp, #28]
 429:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 164              		.loc 1 429 3 is_stmt 1 view .LVU48
 165              		.loc 1 429 25 is_stmt 0 view .LVU49
 166 00a4 0894     		str	r4, [sp, #32]
 430:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 430 3 is_stmt 1 view .LVU50
 168 00a6 05A9     		add	r1, sp, #20
 169 00a8 2846     		mov	r0, r5
 170 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL3:
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* EXTI interrupt init*/
 433:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 172              		.loc 1 433 3 view .LVU51
 173 00ae 2246     		mov	r2, r4
 174 00b0 2146     		mov	r1, r4
 175 00b2 0820     		movs	r0, #8
 176 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 434:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 178              		.loc 1 434 3 view .LVU52
 179 00b8 0820     		movs	r0, #8
 180 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL5:
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 182              		.loc 1 436 3 view .LVU53
 183 00be 2246     		mov	r2, r4
 184 00c0 2146     		mov	r1, r4
 185 00c2 2820     		movs	r0, #40
 186 00c4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL6:
 437:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 188              		.loc 1 437 3 view .LVU54
 189 00c8 2820     		movs	r0, #40
 190 00ca FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL7:
ARM GAS  /tmp/cctN8Zca.s 			page 12


 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 440:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 441:Core/Src/main.c **** }
 192              		.loc 1 441 1 is_stmt 0 view .LVU55
 193 00ce 0AB0     		add	sp, sp, #40
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 00d0 70BD     		pop	{r4, r5, r6, pc}
 197              	.L4:
 198 00d2 00BF     		.align	2
 199              	.L3:
 200 00d4 00380240 		.word	1073887232
 201 00d8 00000240 		.word	1073872896
 202 00dc 00080240 		.word	1073874944
 203              		.cfi_endproc
 204              	.LFE231:
 206              		.section	.text.MX_DMA_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_DMA_Init:
 213              	.LFB230:
 381:Core/Src/main.c **** 
 214              		.loc 1 381 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 8
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 00B5     		push	{lr}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              		.cfi_def_cfa_offset 16
 384:Core/Src/main.c **** 
 223              		.loc 1 384 3 view .LVU57
 224              	.LBB8:
 384:Core/Src/main.c **** 
 225              		.loc 1 384 3 view .LVU58
 226 0004 0021     		movs	r1, #0
 227 0006 0191     		str	r1, [sp, #4]
 384:Core/Src/main.c **** 
 228              		.loc 1 384 3 view .LVU59
 229 0008 094B     		ldr	r3, .L7
 230 000a 1A6B     		ldr	r2, [r3, #48]
 231 000c 42F48002 		orr	r2, r2, #4194304
 232 0010 1A63     		str	r2, [r3, #48]
 384:Core/Src/main.c **** 
 233              		.loc 1 384 3 view .LVU60
 234 0012 1B6B     		ldr	r3, [r3, #48]
 235 0014 03F48003 		and	r3, r3, #4194304
 236 0018 0193     		str	r3, [sp, #4]
 384:Core/Src/main.c **** 
 237              		.loc 1 384 3 view .LVU61
 238 001a 019B     		ldr	r3, [sp, #4]
 239              	.LBE8:
 384:Core/Src/main.c **** 
ARM GAS  /tmp/cctN8Zca.s 			page 13


 240              		.loc 1 384 3 view .LVU62
 388:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 241              		.loc 1 388 3 view .LVU63
 242 001c 0A46     		mov	r2, r1
 243 001e 3820     		movs	r0, #56
 244 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
 389:Core/Src/main.c **** 
 246              		.loc 1 389 3 view .LVU64
 247 0024 3820     		movs	r0, #56
 248 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 391:Core/Src/main.c **** 
 250              		.loc 1 391 1 is_stmt 0 view .LVU65
 251 002a 03B0     		add	sp, sp, #12
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 002c 5DF804FB 		ldr	pc, [sp], #4
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0030 00380240 		.word	1073887232
 259              		.cfi_endproc
 260              	.LFE230:
 262              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_GPIO_EXTI_Callback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 269              	HAL_GPIO_EXTI_Callback:
 270              	.LVL10:
 271              	.LFB223:
 102:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 272              		.loc 1 102 47 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 102:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 276              		.loc 1 102 47 is_stmt 0 view .LVU67
 277 0000 08B5     		push	{r3, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
 103:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 281              		.loc 1 103 3 is_stmt 1 view .LVU68
 103:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 282              		.loc 1 103 5 is_stmt 0 view .LVU69
 283 0002 0428     		cmp	r0, #4
 284 0004 03D0     		beq	.L14
 106:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 285              		.loc 1 106 8 is_stmt 1 view .LVU70
 106:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 286              		.loc 1 106 10 is_stmt 0 view .LVU71
 287 0006 B0F5005F 		cmp	r0, #8192
 288 000a 07D0     		beq	.L15
 289              	.LVL11:
ARM GAS  /tmp/cctN8Zca.s 			page 14


 290              	.L9:
 120:Core/Src/main.c **** 
 291              		.loc 1 120 1 view .LVU72
 292 000c 08BD     		pop	{r3, pc}
 293              	.LVL12:
 294              	.L14:
 104:Core/Src/main.c ****   }
 295              		.loc 1 104 5 is_stmt 1 view .LVU73
 104:Core/Src/main.c ****   }
 296              		.loc 1 104 24 is_stmt 0 view .LVU74
 297 000e 0421     		movs	r1, #4
 298 0010 1048     		ldr	r0, .L16
 299              	.LVL13:
 104:Core/Src/main.c ****   }
 300              		.loc 1 104 24 view .LVU75
 301 0012 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 302              	.LVL14:
 104:Core/Src/main.c ****   }
 303              		.loc 1 104 22 discriminator 1 view .LVU76
 304 0016 104B     		ldr	r3, .L16+4
 305 0018 1880     		strh	r0, [r3]	@ movhi
 306 001a F7E7     		b	.L9
 307              	.LVL15:
 308              	.L15:
 108:Core/Src/main.c **** 
 309              		.loc 1 108 5 is_stmt 1 view .LVU77
 108:Core/Src/main.c **** 
 310              		.loc 1 108 24 is_stmt 0 view .LVU78
 311 001c 0F4A     		ldr	r2, .L16+8
 312 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 313 0020 B3FA83F3 		clz	r3, r3
 314 0024 5B09     		lsrs	r3, r3, #5
 108:Core/Src/main.c **** 
 315              		.loc 1 108 22 view .LVU79
 316 0026 1370     		strb	r3, [r2]
 111:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 317              		.loc 1 111 5 is_stmt 1 view .LVU80
 111:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 318              		.loc 1 111 7 is_stmt 0 view .LVU81
 319 0028 43B1     		cbz	r3, .L12
 112:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 320              		.loc 1 112 7 is_stmt 1 view .LVU82
 321 002a 0D48     		ldr	r0, .L16+12
 322              	.LVL16:
 112:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 323              		.loc 1 112 7 is_stmt 0 view .LVU83
 324 002c FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 325              	.LVL17:
 113:Core/Src/main.c ****     }else{
 326              		.loc 1 113 7 is_stmt 1 view .LVU84
 327 0030 0122     		movs	r2, #1
 328 0032 2021     		movs	r1, #32
 329 0034 0B48     		ldr	r0, .L16+16
 330 0036 FFF7FEFF 		bl	HAL_GPIO_WritePin
 331              	.LVL18:
 332 003a E7E7     		b	.L9
 333              	.LVL19:
ARM GAS  /tmp/cctN8Zca.s 			page 15


 334              	.L12:
 115:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 335              		.loc 1 115 7 view .LVU85
 336 003c 4FF49672 		mov	r2, #300
 337 0040 0949     		ldr	r1, .L16+20
 338 0042 0748     		ldr	r0, .L16+12
 339              	.LVL20:
 115:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 340              		.loc 1 115 7 is_stmt 0 view .LVU86
 341 0044 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 342              	.LVL21:
 116:Core/Src/main.c ****     }
 343              		.loc 1 116 7 is_stmt 1 view .LVU87
 344 0048 0022     		movs	r2, #0
 345 004a 2021     		movs	r1, #32
 346 004c 0548     		ldr	r0, .L16+16
 347 004e FFF7FEFF 		bl	HAL_GPIO_WritePin
 348              	.LVL22:
 120:Core/Src/main.c **** 
 349              		.loc 1 120 1 is_stmt 0 view .LVU88
 350 0052 DBE7     		b	.L9
 351              	.L17:
 352              		.align	2
 353              	.L16:
 354 0054 00080240 		.word	1073874944
 355 0058 00000000 		.word	lastDigitalValue
 356 005c 00000000 		.word	disableInterrupt
 357 0060 00000000 		.word	hadc1
 358 0064 00000240 		.word	1073872896
 359 0068 00000000 		.word	adcBuffer
 360              		.cfi_endproc
 361              	.LFE223:
 363              		.section	.rodata.handle_cli_command.str1.4,"aMS",%progbits,1
 364              		.align	2
 365              	.LC0:
 366 0000 72617700 		.ascii	"raw\000"
 367              		.align	2
 368              	.LC1:
 369 0004 6D6F7669 		.ascii	"moving average\000"
 369      6E672061 
 369      76657261 
 369      676500
 370 0013 00       		.align	2
 371              	.LC2:
 372 0014 72616E64 		.ascii	"random noise\000"
 372      6F6D206E 
 372      6F697365 
 372      00
 373              		.section	.text.handle_cli_command,"ax",%progbits
 374              		.align	1
 375              		.global	handle_cli_command
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 380              	handle_cli_command:
 381              	.LFB224:
 130:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
ARM GAS  /tmp/cctN8Zca.s 			page 16


 382              		.loc 1 130 27 is_stmt 1 view -0
 383              		.cfi_startproc
 384              		@ args = 0, pretend = 0, frame = 0
 385              		@ frame_needed = 0, uses_anonymous_args = 0
 386 0000 08B5     		push	{r3, lr}
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 3, -8
 389              		.cfi_offset 14, -4
 131:Core/Src/main.c ****         currentFilterMode = RAW;
 390              		.loc 1 131 5 view .LVU90
 131:Core/Src/main.c ****         currentFilterMode = RAW;
 391              		.loc 1 131 9 is_stmt 0 view .LVU91
 392 0002 1049     		ldr	r1, .L23
 393 0004 1048     		ldr	r0, .L23+4
 394 0006 FFF7FEFF 		bl	strcmp
 395              	.LVL23:
 131:Core/Src/main.c ****         currentFilterMode = RAW;
 396              		.loc 1 131 8 discriminator 1 view .LVU92
 397 000a 40B9     		cbnz	r0, .L19
 132:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 398              		.loc 1 132 9 is_stmt 1 view .LVU93
 132:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 399              		.loc 1 132 27 is_stmt 0 view .LVU94
 400 000c 0F4B     		ldr	r3, .L23+8
 401 000e 0022     		movs	r2, #0
 402 0010 1A70     		strb	r2, [r3]
 403              	.L20:
 139:Core/Src/main.c ****     //clear buffer
 404              		.loc 1 139 5 is_stmt 1 view .LVU95
 141:Core/Src/main.c **** }
 405              		.loc 1 141 5 view .LVU96
 406 0012 3222     		movs	r2, #50
 407 0014 0021     		movs	r1, #0
 408 0016 0C48     		ldr	r0, .L23+4
 409 0018 FFF7FEFF 		bl	memset
 410              	.LVL24:
 142:Core/Src/main.c **** 
 411              		.loc 1 142 1 is_stmt 0 view .LVU97
 412 001c 08BD     		pop	{r3, pc}
 413              	.L19:
 133:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 414              		.loc 1 133 12 is_stmt 1 view .LVU98
 133:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 415              		.loc 1 133 16 is_stmt 0 view .LVU99
 416 001e 0C49     		ldr	r1, .L23+12
 417 0020 0948     		ldr	r0, .L23+4
 418 0022 FFF7FEFF 		bl	strcmp
 419              	.LVL25:
 133:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 420              		.loc 1 133 15 discriminator 1 view .LVU100
 421 0026 18B9     		cbnz	r0, .L21
 134:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 422              		.loc 1 134 9 is_stmt 1 view .LVU101
 134:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 423              		.loc 1 134 27 is_stmt 0 view .LVU102
 424 0028 084B     		ldr	r3, .L23+8
 425 002a 0122     		movs	r2, #1
ARM GAS  /tmp/cctN8Zca.s 			page 17


 426 002c 1A70     		strb	r2, [r3]
 427 002e F0E7     		b	.L20
 428              	.L21:
 135:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 429              		.loc 1 135 12 is_stmt 1 view .LVU103
 135:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 430              		.loc 1 135 16 is_stmt 0 view .LVU104
 431 0030 0849     		ldr	r1, .L23+16
 432 0032 0548     		ldr	r0, .L23+4
 433 0034 FFF7FEFF 		bl	strcmp
 434              	.LVL26:
 135:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 435              		.loc 1 135 15 discriminator 1 view .LVU105
 436 0038 0028     		cmp	r0, #0
 437 003a EAD1     		bne	.L20
 136:Core/Src/main.c ****     } else {
 438              		.loc 1 136 9 is_stmt 1 view .LVU106
 136:Core/Src/main.c ****     } else {
 439              		.loc 1 136 27 is_stmt 0 view .LVU107
 440 003c 034B     		ldr	r3, .L23+8
 441 003e 0222     		movs	r2, #2
 442 0040 1A70     		strb	r2, [r3]
 443 0042 E6E7     		b	.L20
 444              	.L24:
 445              		.align	2
 446              	.L23:
 447 0044 00000000 		.word	.LC0
 448 0048 00000000 		.word	cli_command
 449 004c 00000000 		.word	currentFilterMode
 450 0050 04000000 		.word	.LC1
 451 0054 14000000 		.word	.LC2
 452              		.cfi_endproc
 453              	.LFE224:
 455              		.section	.rodata.HAL_UARTEx_RxEventCallback.str1.4,"aMS",%progbits,1
 456              		.align	2
 457              	.LC3:
 458 0000 4E657720 		.ascii	"New filter mode: %d\015\012\000"
 458      66696C74 
 458      6572206D 
 458      6F64653A 
 458      2025640D 
 459              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 460              		.align	1
 461              		.global	HAL_UARTEx_RxEventCallback
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 466              	HAL_UARTEx_RxEventCallback:
 467              	.LVL27:
 468              	.LFB225:
 148:Core/Src/main.c ****   handle_cli_command();
 469              		.loc 1 148 1 is_stmt 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 148:Core/Src/main.c ****   handle_cli_command();
 473              		.loc 1 148 1 is_stmt 0 view .LVU109
ARM GAS  /tmp/cctN8Zca.s 			page 18


 474 0000 38B5     		push	{r3, r4, r5, lr}
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 3, -16
 477              		.cfi_offset 4, -12
 478              		.cfi_offset 5, -8
 479              		.cfi_offset 14, -4
 149:Core/Src/main.c ****   sprintf(msg_buffer, "New filter mode: %d\r\n", currentFilterMode);
 480              		.loc 1 149 3 is_stmt 1 view .LVU110
 481 0002 FFF7FEFF 		bl	handle_cli_command
 482              	.LVL28:
 150:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 483              		.loc 1 150 3 view .LVU111
 484 0006 0C4C     		ldr	r4, .L27
 485 0008 0C4B     		ldr	r3, .L27+4
 486 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 487 000c 0C49     		ldr	r1, .L27+8
 488 000e 2046     		mov	r0, r4
 489 0010 FFF7FEFF 		bl	sprintf
 490              	.LVL29:
 151:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 491              		.loc 1 151 3 view .LVU112
 151:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 492              		.loc 1 151 53 is_stmt 0 view .LVU113
 493 0014 2046     		mov	r0, r4
 494 0016 FFF7FEFF 		bl	strlen
 495              	.LVL30:
 151:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 496              		.loc 1 151 3 discriminator 1 view .LVU114
 497 001a 0A4D     		ldr	r5, .L27+12
 498 001c 4FF0FF33 		mov	r3, #-1
 499 0020 82B2     		uxth	r2, r0
 500 0022 2146     		mov	r1, r4
 501 0024 2846     		mov	r0, r5
 502 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 503              	.LVL31:
 152:Core/Src/main.c **** }
 504              		.loc 1 152 3 is_stmt 1 view .LVU115
 505 002a 3222     		movs	r2, #50
 506 002c 0649     		ldr	r1, .L27+16
 507 002e 2846     		mov	r0, r5
 508 0030 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 509              	.LVL32:
 153:Core/Src/main.c **** 
 510              		.loc 1 153 1 is_stmt 0 view .LVU116
 511 0034 38BD     		pop	{r3, r4, r5, pc}
 512              	.L28:
 513 0036 00BF     		.align	2
 514              	.L27:
 515 0038 00000000 		.word	msg_buffer
 516 003c 00000000 		.word	currentFilterMode
 517 0040 00000000 		.word	.LC3
 518 0044 00000000 		.word	huart2
 519 0048 00000000 		.word	cli_command
 520              		.cfi_endproc
 521              	.LFE225:
 523              		.section	.text.Error_Handler,"ax",%progbits
 524              		.align	1
ARM GAS  /tmp/cctN8Zca.s 			page 19


 525              		.global	Error_Handler
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 530              	Error_Handler:
 531              	.LFB232:
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** /* USER CODE END 4 */
 446:Core/Src/main.c **** 
 447:Core/Src/main.c **** /**
 448:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 449:Core/Src/main.c ****   * @retval None
 450:Core/Src/main.c ****   */
 451:Core/Src/main.c **** void Error_Handler(void)
 452:Core/Src/main.c **** {
 532              		.loc 1 452 1 is_stmt 1 view -0
 533              		.cfi_startproc
 534              		@ Volatile: function does not return.
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 453:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 454:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 455:Core/Src/main.c ****   __disable_irq();
 538              		.loc 1 455 3 view .LVU118
 539              	.LBB9:
 540              	.LBI9:
 541              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctN8Zca.s 			page 20


  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /tmp/cctN8Zca.s 			page 21


  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
ARM GAS  /tmp/cctN8Zca.s 			page 22


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctN8Zca.s 			page 23


 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
ARM GAS  /tmp/cctN8Zca.s 			page 24


 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cctN8Zca.s 			page 25


 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
ARM GAS  /tmp/cctN8Zca.s 			page 26


 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cctN8Zca.s 			page 27


 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cctN8Zca.s 			page 28


 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
ARM GAS  /tmp/cctN8Zca.s 			page 29


 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /tmp/cctN8Zca.s 			page 30


 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/cctN8Zca.s 			page 31


 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
ARM GAS  /tmp/cctN8Zca.s 			page 32


 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/cctN8Zca.s 			page 33


 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cctN8Zca.s 			page 34


 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cctN8Zca.s 			page 35


 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
ARM GAS  /tmp/cctN8Zca.s 			page 36


 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 542              		.loc 2 960 27 view .LVU119
 543              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 544              		.loc 2 962 3 view .LVU120
 545              		.syntax unified
 546              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 547 0000 72B6     		cpsid i
 548              	@ 0 "" 2
 549              		.thumb
 550              		.syntax unified
 551              	.L30:
 552              	.LBE10:
 553              	.LBE9:
 456:Core/Src/main.c ****   while (1)
 554              		.loc 1 456 3 view .LVU121
 457:Core/Src/main.c ****   {
 458:Core/Src/main.c ****   }
 555              		.loc 1 458 3 view .LVU122
 456:Core/Src/main.c ****   while (1)
 556              		.loc 1 456 9 view .LVU123
 557 0002 FEE7     		b	.L30
 558              		.cfi_endproc
 559              	.LFE232:
 561              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 562              		.align	1
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 567              	MX_USART2_UART_Init:
 568              	.LFB229:
 350:Core/Src/main.c **** 
 569              		.loc 1 350 1 view -0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cctN8Zca.s 			page 37


 573 0000 08B5     		push	{r3, lr}
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 3, -8
 576              		.cfi_offset 14, -4
 359:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 577              		.loc 1 359 3 view .LVU125
 359:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 578              		.loc 1 359 19 is_stmt 0 view .LVU126
 579 0002 0A48     		ldr	r0, .L35
 580 0004 0A4B     		ldr	r3, .L35+4
 581 0006 0360     		str	r3, [r0]
 360:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 582              		.loc 1 360 3 is_stmt 1 view .LVU127
 360:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 583              		.loc 1 360 24 is_stmt 0 view .LVU128
 584 0008 4FF4E133 		mov	r3, #115200
 585 000c 4360     		str	r3, [r0, #4]
 361:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 586              		.loc 1 361 3 is_stmt 1 view .LVU129
 361:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 587              		.loc 1 361 26 is_stmt 0 view .LVU130
 588 000e 0023     		movs	r3, #0
 589 0010 8360     		str	r3, [r0, #8]
 362:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 590              		.loc 1 362 3 is_stmt 1 view .LVU131
 362:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 591              		.loc 1 362 24 is_stmt 0 view .LVU132
 592 0012 C360     		str	r3, [r0, #12]
 363:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 593              		.loc 1 363 3 is_stmt 1 view .LVU133
 363:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 594              		.loc 1 363 22 is_stmt 0 view .LVU134
 595 0014 0361     		str	r3, [r0, #16]
 364:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 596              		.loc 1 364 3 is_stmt 1 view .LVU135
 364:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 597              		.loc 1 364 20 is_stmt 0 view .LVU136
 598 0016 0C22     		movs	r2, #12
 599 0018 4261     		str	r2, [r0, #20]
 365:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 600              		.loc 1 365 3 is_stmt 1 view .LVU137
 365:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 601              		.loc 1 365 25 is_stmt 0 view .LVU138
 602 001a 8361     		str	r3, [r0, #24]
 366:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 603              		.loc 1 366 3 is_stmt 1 view .LVU139
 366:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 604              		.loc 1 366 28 is_stmt 0 view .LVU140
 605 001c C361     		str	r3, [r0, #28]
 367:Core/Src/main.c ****   {
 606              		.loc 1 367 3 is_stmt 1 view .LVU141
 367:Core/Src/main.c ****   {
 607              		.loc 1 367 7 is_stmt 0 view .LVU142
 608 001e FFF7FEFF 		bl	HAL_UART_Init
 609              	.LVL33:
 367:Core/Src/main.c ****   {
 610              		.loc 1 367 6 discriminator 1 view .LVU143
ARM GAS  /tmp/cctN8Zca.s 			page 38


 611 0022 00B9     		cbnz	r0, .L34
 375:Core/Src/main.c **** 
 612              		.loc 1 375 1 view .LVU144
 613 0024 08BD     		pop	{r3, pc}
 614              	.L34:
 369:Core/Src/main.c ****   }
 615              		.loc 1 369 5 is_stmt 1 view .LVU145
 616 0026 FFF7FEFF 		bl	Error_Handler
 617              	.LVL34:
 618              	.L36:
 619 002a 00BF     		.align	2
 620              	.L35:
 621 002c 00000000 		.word	huart2
 622 0030 00440040 		.word	1073759232
 623              		.cfi_endproc
 624              	.LFE229:
 626              		.section	.text.MX_ADC1_Init,"ax",%progbits
 627              		.align	1
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	MX_ADC1_Init:
 633              	.LFB228:
 298:Core/Src/main.c **** 
 634              		.loc 1 298 1 view -0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638 0000 00B5     		push	{lr}
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 14, -4
 641 0002 85B0     		sub	sp, sp, #20
 642              		.cfi_def_cfa_offset 24
 304:Core/Src/main.c **** 
 643              		.loc 1 304 3 view .LVU147
 304:Core/Src/main.c **** 
 644              		.loc 1 304 26 is_stmt 0 view .LVU148
 645 0004 0023     		movs	r3, #0
 646 0006 0093     		str	r3, [sp]
 647 0008 0193     		str	r3, [sp, #4]
 648 000a 0293     		str	r3, [sp, #8]
 649 000c 0393     		str	r3, [sp, #12]
 312:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 650              		.loc 1 312 3 is_stmt 1 view .LVU149
 312:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 651              		.loc 1 312 18 is_stmt 0 view .LVU150
 652 000e 1448     		ldr	r0, .L43
 653 0010 144A     		ldr	r2, .L43+4
 654 0012 0260     		str	r2, [r0]
 313:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 655              		.loc 1 313 3 is_stmt 1 view .LVU151
 313:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 656              		.loc 1 313 29 is_stmt 0 view .LVU152
 657 0014 4FF48032 		mov	r2, #65536
 658 0018 4260     		str	r2, [r0, #4]
 314:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 659              		.loc 1 314 3 is_stmt 1 view .LVU153
ARM GAS  /tmp/cctN8Zca.s 			page 39


 314:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 660              		.loc 1 314 25 is_stmt 0 view .LVU154
 661 001a 8360     		str	r3, [r0, #8]
 315:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 662              		.loc 1 315 3 is_stmt 1 view .LVU155
 315:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 663              		.loc 1 315 27 is_stmt 0 view .LVU156
 664 001c 0361     		str	r3, [r0, #16]
 316:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 665              		.loc 1 316 3 is_stmt 1 view .LVU157
 316:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 666              		.loc 1 316 33 is_stmt 0 view .LVU158
 667 001e 0122     		movs	r2, #1
 668 0020 0276     		strb	r2, [r0, #24]
 317:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 669              		.loc 1 317 3 is_stmt 1 view .LVU159
 317:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 670              		.loc 1 317 36 is_stmt 0 view .LVU160
 671 0022 80F82030 		strb	r3, [r0, #32]
 318:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 672              		.loc 1 318 3 is_stmt 1 view .LVU161
 318:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 673              		.loc 1 318 35 is_stmt 0 view .LVU162
 674 0026 C362     		str	r3, [r0, #44]
 319:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 675              		.loc 1 319 3 is_stmt 1 view .LVU163
 319:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 676              		.loc 1 319 31 is_stmt 0 view .LVU164
 677 0028 0F49     		ldr	r1, .L43+8
 678 002a 8162     		str	r1, [r0, #40]
 320:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 679              		.loc 1 320 3 is_stmt 1 view .LVU165
 320:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 680              		.loc 1 320 24 is_stmt 0 view .LVU166
 681 002c C360     		str	r3, [r0, #12]
 321:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 682              		.loc 1 321 3 is_stmt 1 view .LVU167
 321:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 683              		.loc 1 321 30 is_stmt 0 view .LVU168
 684 002e C261     		str	r2, [r0, #28]
 322:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 685              		.loc 1 322 3 is_stmt 1 view .LVU169
 322:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 686              		.loc 1 322 36 is_stmt 0 view .LVU170
 687 0030 80F83020 		strb	r2, [r0, #48]
 323:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 688              		.loc 1 323 3 is_stmt 1 view .LVU171
 323:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 689              		.loc 1 323 27 is_stmt 0 view .LVU172
 690 0034 4261     		str	r2, [r0, #20]
 324:Core/Src/main.c ****   {
 691              		.loc 1 324 3 is_stmt 1 view .LVU173
 324:Core/Src/main.c ****   {
 692              		.loc 1 324 7 is_stmt 0 view .LVU174
 693 0036 FFF7FEFF 		bl	HAL_ADC_Init
 694              	.LVL35:
 324:Core/Src/main.c ****   {
ARM GAS  /tmp/cctN8Zca.s 			page 40


 695              		.loc 1 324 6 discriminator 1 view .LVU175
 696 003a 60B9     		cbnz	r0, .L41
 331:Core/Src/main.c ****   sConfig.Rank = 1;
 697              		.loc 1 331 3 is_stmt 1 view .LVU176
 331:Core/Src/main.c ****   sConfig.Rank = 1;
 698              		.loc 1 331 19 is_stmt 0 view .LVU177
 699 003c 0023     		movs	r3, #0
 700 003e 0093     		str	r3, [sp]
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 701              		.loc 1 332 3 is_stmt 1 view .LVU178
 332:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 702              		.loc 1 332 16 is_stmt 0 view .LVU179
 703 0040 0122     		movs	r2, #1
 704 0042 0192     		str	r2, [sp, #4]
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 705              		.loc 1 333 3 is_stmt 1 view .LVU180
 333:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 706              		.loc 1 333 24 is_stmt 0 view .LVU181
 707 0044 0293     		str	r3, [sp, #8]
 334:Core/Src/main.c ****   {
 708              		.loc 1 334 3 is_stmt 1 view .LVU182
 334:Core/Src/main.c ****   {
 709              		.loc 1 334 7 is_stmt 0 view .LVU183
 710 0046 6946     		mov	r1, sp
 711 0048 0548     		ldr	r0, .L43
 712 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 713              	.LVL36:
 334:Core/Src/main.c ****   {
 714              		.loc 1 334 6 discriminator 1 view .LVU184
 715 004e 20B9     		cbnz	r0, .L42
 342:Core/Src/main.c **** 
 716              		.loc 1 342 1 view .LVU185
 717 0050 05B0     		add	sp, sp, #20
 718              		.cfi_remember_state
 719              		.cfi_def_cfa_offset 4
 720              		@ sp needed
 721 0052 5DF804FB 		ldr	pc, [sp], #4
 722              	.L41:
 723              		.cfi_restore_state
 326:Core/Src/main.c ****   }
 724              		.loc 1 326 5 is_stmt 1 view .LVU186
 725 0056 FFF7FEFF 		bl	Error_Handler
 726              	.LVL37:
 727              	.L42:
 336:Core/Src/main.c ****   }
 728              		.loc 1 336 5 view .LVU187
 729 005a FFF7FEFF 		bl	Error_Handler
 730              	.LVL38:
 731              	.L44:
 732 005e 00BF     		.align	2
 733              	.L43:
 734 0060 00000000 		.word	hadc1
 735 0064 00200140 		.word	1073815552
 736 0068 0100000F 		.word	251658241
 737              		.cfi_endproc
 738              	.LFE228:
 740              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/cctN8Zca.s 			page 41


 741              		.align	1
 742              		.global	SystemClock_Config
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 747              	SystemClock_Config:
 748              	.LFB227:
 251:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 749              		.loc 1 251 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 80
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753 0000 00B5     		push	{lr}
 754              		.cfi_def_cfa_offset 4
 755              		.cfi_offset 14, -4
 756 0002 95B0     		sub	sp, sp, #84
 757              		.cfi_def_cfa_offset 88
 252:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 758              		.loc 1 252 3 view .LVU189
 252:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 759              		.loc 1 252 22 is_stmt 0 view .LVU190
 760 0004 3022     		movs	r2, #48
 761 0006 0021     		movs	r1, #0
 762 0008 08A8     		add	r0, sp, #32
 763 000a FFF7FEFF 		bl	memset
 764              	.LVL39:
 253:Core/Src/main.c **** 
 765              		.loc 1 253 3 is_stmt 1 view .LVU191
 253:Core/Src/main.c **** 
 766              		.loc 1 253 22 is_stmt 0 view .LVU192
 767 000e 0023     		movs	r3, #0
 768 0010 0393     		str	r3, [sp, #12]
 769 0012 0493     		str	r3, [sp, #16]
 770 0014 0593     		str	r3, [sp, #20]
 771 0016 0693     		str	r3, [sp, #24]
 772 0018 0793     		str	r3, [sp, #28]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 773              		.loc 1 257 3 is_stmt 1 view .LVU193
 774              	.LBB11:
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 775              		.loc 1 257 3 view .LVU194
 776 001a 0193     		str	r3, [sp, #4]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 777              		.loc 1 257 3 view .LVU195
 778 001c 1E4A     		ldr	r2, .L51
 779 001e 116C     		ldr	r1, [r2, #64]
 780 0020 41F08051 		orr	r1, r1, #268435456
 781 0024 1164     		str	r1, [r2, #64]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 782              		.loc 1 257 3 view .LVU196
 783 0026 126C     		ldr	r2, [r2, #64]
 784 0028 02F08052 		and	r2, r2, #268435456
 785 002c 0192     		str	r2, [sp, #4]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 786              		.loc 1 257 3 view .LVU197
 787 002e 019A     		ldr	r2, [sp, #4]
 788              	.LBE11:
ARM GAS  /tmp/cctN8Zca.s 			page 42


 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 789              		.loc 1 257 3 view .LVU198
 258:Core/Src/main.c **** 
 790              		.loc 1 258 3 view .LVU199
 791              	.LBB12:
 258:Core/Src/main.c **** 
 792              		.loc 1 258 3 view .LVU200
 793 0030 0293     		str	r3, [sp, #8]
 258:Core/Src/main.c **** 
 794              		.loc 1 258 3 view .LVU201
 795 0032 1A4A     		ldr	r2, .L51+4
 796 0034 1168     		ldr	r1, [r2]
 797 0036 41F44041 		orr	r1, r1, #49152
 798 003a 1160     		str	r1, [r2]
 258:Core/Src/main.c **** 
 799              		.loc 1 258 3 view .LVU202
 800 003c 1268     		ldr	r2, [r2]
 801 003e 02F44042 		and	r2, r2, #49152
 802 0042 0292     		str	r2, [sp, #8]
 258:Core/Src/main.c **** 
 803              		.loc 1 258 3 view .LVU203
 804 0044 029A     		ldr	r2, [sp, #8]
 805              	.LBE12:
 258:Core/Src/main.c **** 
 806              		.loc 1 258 3 view .LVU204
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 807              		.loc 1 263 3 view .LVU205
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 808              		.loc 1 263 36 is_stmt 0 view .LVU206
 809 0046 0221     		movs	r1, #2
 810 0048 0891     		str	r1, [sp, #32]
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 811              		.loc 1 264 3 is_stmt 1 view .LVU207
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 812              		.loc 1 264 30 is_stmt 0 view .LVU208
 813 004a 0122     		movs	r2, #1
 814 004c 0B92     		str	r2, [sp, #44]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 815              		.loc 1 265 3 is_stmt 1 view .LVU209
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 816              		.loc 1 265 41 is_stmt 0 view .LVU210
 817 004e 1022     		movs	r2, #16
 818 0050 0C92     		str	r2, [sp, #48]
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 819              		.loc 1 266 3 is_stmt 1 view .LVU211
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 820              		.loc 1 266 34 is_stmt 0 view .LVU212
 821 0052 0E91     		str	r1, [sp, #56]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 822              		.loc 1 267 3 is_stmt 1 view .LVU213
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 823              		.loc 1 267 35 is_stmt 0 view .LVU214
 824 0054 0F93     		str	r3, [sp, #60]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 825              		.loc 1 268 3 is_stmt 1 view .LVU215
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 826              		.loc 1 268 30 is_stmt 0 view .LVU216
ARM GAS  /tmp/cctN8Zca.s 			page 43


 827 0056 1092     		str	r2, [sp, #64]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 828              		.loc 1 269 3 is_stmt 1 view .LVU217
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 829              		.loc 1 269 30 is_stmt 0 view .LVU218
 830 0058 4FF4A873 		mov	r3, #336
 831 005c 1193     		str	r3, [sp, #68]
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 832              		.loc 1 270 3 is_stmt 1 view .LVU219
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 833              		.loc 1 270 30 is_stmt 0 view .LVU220
 834 005e 0423     		movs	r3, #4
 835 0060 1293     		str	r3, [sp, #72]
 271:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 836              		.loc 1 271 3 is_stmt 1 view .LVU221
 271:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 837              		.loc 1 271 30 is_stmt 0 view .LVU222
 838 0062 1393     		str	r3, [sp, #76]
 272:Core/Src/main.c ****   {
 839              		.loc 1 272 3 is_stmt 1 view .LVU223
 272:Core/Src/main.c ****   {
 840              		.loc 1 272 7 is_stmt 0 view .LVU224
 841 0064 08A8     		add	r0, sp, #32
 842 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 843              	.LVL40:
 272:Core/Src/main.c ****   {
 844              		.loc 1 272 6 discriminator 1 view .LVU225
 845 006a 80B9     		cbnz	r0, .L49
 279:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 846              		.loc 1 279 3 is_stmt 1 view .LVU226
 279:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 847              		.loc 1 279 31 is_stmt 0 view .LVU227
 848 006c 0F23     		movs	r3, #15
 849 006e 0393     		str	r3, [sp, #12]
 281:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 850              		.loc 1 281 3 is_stmt 1 view .LVU228
 281:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 851              		.loc 1 281 34 is_stmt 0 view .LVU229
 852 0070 0221     		movs	r1, #2
 853 0072 0491     		str	r1, [sp, #16]
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 854              		.loc 1 282 3 is_stmt 1 view .LVU230
 282:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 855              		.loc 1 282 35 is_stmt 0 view .LVU231
 856 0074 0023     		movs	r3, #0
 857 0076 0593     		str	r3, [sp, #20]
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 858              		.loc 1 283 3 is_stmt 1 view .LVU232
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 859              		.loc 1 283 36 is_stmt 0 view .LVU233
 860 0078 4FF48052 		mov	r2, #4096
 861 007c 0692     		str	r2, [sp, #24]
 284:Core/Src/main.c **** 
 862              		.loc 1 284 3 is_stmt 1 view .LVU234
 284:Core/Src/main.c **** 
 863              		.loc 1 284 36 is_stmt 0 view .LVU235
 864 007e 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/cctN8Zca.s 			page 44


 286:Core/Src/main.c ****   {
 865              		.loc 1 286 3 is_stmt 1 view .LVU236
 286:Core/Src/main.c ****   {
 866              		.loc 1 286 7 is_stmt 0 view .LVU237
 867 0080 03A8     		add	r0, sp, #12
 868 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 869              	.LVL41:
 286:Core/Src/main.c ****   {
 870              		.loc 1 286 6 discriminator 1 view .LVU238
 871 0086 20B9     		cbnz	r0, .L50
 290:Core/Src/main.c **** 
 872              		.loc 1 290 1 view .LVU239
 873 0088 15B0     		add	sp, sp, #84
 874              		.cfi_remember_state
 875              		.cfi_def_cfa_offset 4
 876              		@ sp needed
 877 008a 5DF804FB 		ldr	pc, [sp], #4
 878              	.L49:
 879              		.cfi_restore_state
 274:Core/Src/main.c ****   }
 880              		.loc 1 274 5 is_stmt 1 view .LVU240
 881 008e FFF7FEFF 		bl	Error_Handler
 882              	.LVL42:
 883              	.L50:
 288:Core/Src/main.c ****   }
 884              		.loc 1 288 5 view .LVU241
 885 0092 FFF7FEFF 		bl	Error_Handler
 886              	.LVL43:
 887              	.L52:
 888 0096 00BF     		.align	2
 889              	.L51:
 890 0098 00380240 		.word	1073887232
 891 009c 00700040 		.word	1073770496
 892              		.cfi_endproc
 893              	.LFE227:
 895              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 896              		.align	2
 897              	.LC4:
 898 0000 413A2568 		.ascii	"A:%hu\015\012\000"
 898      750D0A00 
 899              		.global	__aeabi_f2d
 900              		.align	2
 901              	.LC5:
 902 0008 413A2025 		.ascii	"A: %.3f\015\012\000"
 902      2E33660D 
 902      0A00
 903 0012 0000     		.align	2
 904              	.LC6:
 905 0014 413A2025 		.ascii	"A: %hu\015\012\000"
 905      68750D0A 
 905      00
 906 001d 000000   		.align	2
 907              	.LC7:
 908 0020 443A2025 		.ascii	"D: %hu\015\012\000"
 908      68750D0A 
 908      00
 909              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/cctN8Zca.s 			page 45


 910              		.align	1
 911              		.global	main
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
 916              	main:
 917              	.LFB226:
 162:Core/Src/main.c **** 
 918              		.loc 1 162 1 view -0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 0
 921              		@ frame_needed = 0, uses_anonymous_args = 0
 922 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 923              		.cfi_def_cfa_offset 24
 924              		.cfi_offset 3, -24
 925              		.cfi_offset 4, -20
 926              		.cfi_offset 5, -16
 927              		.cfi_offset 6, -12
 928              		.cfi_offset 7, -8
 929              		.cfi_offset 14, -4
 165:Core/Src/main.c ****   /* USER CODE END 1 */
 930              		.loc 1 165 3 view .LVU243
 165:Core/Src/main.c ****   /* USER CODE END 1 */
 931              		.loc 1 165 9 is_stmt 0 view .LVU244
 932 0002 0020     		movs	r0, #0
 933 0004 FFF7FEFF 		bl	time
 934              	.LVL44:
 165:Core/Src/main.c ****   /* USER CODE END 1 */
 935              		.loc 1 165 3 discriminator 1 view .LVU245
 936 0008 FFF7FEFF 		bl	srand
 937              	.LVL45:
 171:Core/Src/main.c **** 
 938              		.loc 1 171 3 is_stmt 1 view .LVU246
 939 000c FFF7FEFF 		bl	HAL_Init
 940              	.LVL46:
 178:Core/Src/main.c **** 
 941              		.loc 1 178 3 view .LVU247
 942 0010 FFF7FEFF 		bl	SystemClock_Config
 943              	.LVL47:
 185:Core/Src/main.c ****   MX_DMA_Init();
 944              		.loc 1 185 3 view .LVU248
 945 0014 FFF7FEFF 		bl	MX_GPIO_Init
 946              	.LVL48:
 186:Core/Src/main.c ****   MX_USART2_UART_Init();
 947              		.loc 1 186 3 view .LVU249
 948 0018 FFF7FEFF 		bl	MX_DMA_Init
 949              	.LVL49:
 187:Core/Src/main.c ****   MX_ADC1_Init();
 950              		.loc 1 187 3 view .LVU250
 951 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 952              	.LVL50:
 188:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 953              		.loc 1 188 3 view .LVU251
 954 0020 FFF7FEFF 		bl	MX_ADC1_Init
 955              	.LVL51:
 192:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 956              		.loc 1 192 3 view .LVU252
ARM GAS  /tmp/cctN8Zca.s 			page 46


 957 0024 4FF49672 		mov	r2, #300
 958 0028 3E49     		ldr	r1, .L62
 959 002a 3F48     		ldr	r0, .L62+4
 960 002c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 961              	.LVL52:
 193:Core/Src/main.c **** 
 962              		.loc 1 193 3 view .LVU253
 963 0030 3222     		movs	r2, #50
 964 0032 3E49     		ldr	r1, .L62+8
 965 0034 3E48     		ldr	r0, .L62+12
 966 0036 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 967              	.LVL53:
 968 003a 47E0     		b	.L54
 969              	.L61:
 209:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 970              		.loc 1 209 9 view .LVU254
 209:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 971              		.loc 1 209 34 is_stmt 0 view .LVU255
 972 003c 3D4E     		ldr	r6, .L62+16
 973 003e 3188     		ldrh	r1, [r6]
 974 0040 3D4F     		ldr	r7, .L62+20
 975 0042 37F811C0 		ldrh	ip, [r7, r1, lsl #1]
 209:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 976              		.loc 1 209 13 view .LVU256
 977 0046 3D4D     		ldr	r5, .L62+24
 978 0048 2868     		ldr	r0, [r5]
 979 004a A0EB0C00 		sub	r0, r0, ip
 980 004e 2860     		str	r0, [r5]
 210:Core/Src/main.c ****         sum += lastAnalogValue;
 981              		.loc 1 210 9 is_stmt 1 view .LVU257
 210:Core/Src/main.c ****         sum += lastAnalogValue;
 982              		.loc 1 210 42 is_stmt 0 view .LVU258
 983 0050 27F81140 		strh	r4, [r7, r1, lsl #1]	@ movhi
 211:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 984              		.loc 1 211 9 is_stmt 1 view .LVU259
 211:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 985              		.loc 1 211 13 is_stmt 0 view .LVU260
 986 0054 10FA82F0 		uxtah	r0, r0, r2
 987 0058 2860     		str	r0, [r5]
 212:Core/Src/main.c ****       }
 988              		.loc 1 212 9 is_stmt 1 view .LVU261
 212:Core/Src/main.c ****       }
 989              		.loc 1 212 38 is_stmt 0 view .LVU262
 990 005a 481C     		adds	r0, r1, #1
 212:Core/Src/main.c ****       }
 991              		.loc 1 212 43 view .LVU263
 992 005c 3849     		ldr	r1, .L62+28
 993 005e 81FB0051 		smull	r5, r1, r1, r0
 994 0062 0911     		asrs	r1, r1, #4
 995 0064 9625     		movs	r5, #150
 996 0066 05FB1101 		mls	r1, r5, r1, r0
 212:Core/Src/main.c ****       }
 997              		.loc 1 212 22 view .LVU264
 998 006a 3180     		strh	r1, [r6]	@ movhi
 999 006c 3BE0     		b	.L55
 1000              	.L56:
 1001              	.LBB13:
ARM GAS  /tmp/cctN8Zca.s 			page 47


 223:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1002              		.loc 1 223 9 is_stmt 1 view .LVU265
 223:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1003              		.loc 1 223 28 is_stmt 0 view .LVU266
 1004 006e 334B     		ldr	r3, .L62+24
 1005 0070 D3ED007A 		vldr.32	s15, [r3]	@ int
 1006 0074 F8EE677A 		vcvt.f32.u32	s15, s15
 1007              	.LVL54:
 224:Core/Src/main.c ****         break;
 1008              		.loc 1 224 9 is_stmt 1 view .LVU267
 1009 0078 9FED327A 		vldr.32	s14, .L62+32
 1010 007c C7EE877A 		vdiv.f32	s15, s15, s14
 1011              	.LVL55:
 224:Core/Src/main.c ****         break;
 1012              		.loc 1 224 9 is_stmt 0 view .LVU268
 1013 0080 17EE900A 		vmov	r0, s15
 1014 0084 FFF7FEFF 		bl	__aeabi_f2d
 1015              	.LVL56:
 224:Core/Src/main.c ****         break;
 1016              		.loc 1 224 9 view .LVU269
 1017 0088 0246     		mov	r2, r0
 1018 008a 0B46     		mov	r3, r1
 1019 008c 2E49     		ldr	r1, .L62+36
 1020 008e 2F48     		ldr	r0, .L62+40
 1021 0090 FFF7FEFF 		bl	sprintf
 1022              	.LVL57:
 225:Core/Src/main.c **** 
 1023              		.loc 1 225 9 is_stmt 1 view .LVU270
 1024              	.L58:
 225:Core/Src/main.c **** 
 1025              		.loc 1 225 9 is_stmt 0 view .LVU271
 1026              	.LBE13:
 234:Core/Src/main.c **** 
 1027              		.loc 1 234 7 is_stmt 1 view .LVU272
 234:Core/Src/main.c **** 
 1028              		.loc 1 234 57 is_stmt 0 view .LVU273
 1029 0094 2D4C     		ldr	r4, .L62+40
 1030 0096 2046     		mov	r0, r4
 1031 0098 FFF7FEFF 		bl	strlen
 1032              	.LVL58:
 234:Core/Src/main.c **** 
 1033              		.loc 1 234 7 discriminator 1 view .LVU274
 1034 009c 244D     		ldr	r5, .L62+12
 1035 009e 4FF0FF33 		mov	r3, #-1
 1036 00a2 82B2     		uxth	r2, r0
 1037 00a4 2146     		mov	r1, r4
 1038 00a6 2846     		mov	r0, r5
 1039 00a8 FFF7FEFF 		bl	HAL_UART_Transmit
 1040              	.LVL59:
 237:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 1041              		.loc 1 237 7 is_stmt 1 view .LVU275
 1042 00ac 284B     		ldr	r3, .L62+44
 1043 00ae 1A88     		ldrh	r2, [r3]
 1044 00b0 2849     		ldr	r1, .L62+48
 1045 00b2 2046     		mov	r0, r4
 1046 00b4 FFF7FEFF 		bl	sprintf
 1047              	.LVL60:
ARM GAS  /tmp/cctN8Zca.s 			page 48


 238:Core/Src/main.c ****     }
 1048              		.loc 1 238 7 view .LVU276
 238:Core/Src/main.c ****     }
 1049              		.loc 1 238 57 is_stmt 0 view .LVU277
 1050 00b8 2046     		mov	r0, r4
 1051 00ba FFF7FEFF 		bl	strlen
 1052              	.LVL61:
 238:Core/Src/main.c ****     }
 1053              		.loc 1 238 7 discriminator 1 view .LVU278
 1054 00be 4FF0FF33 		mov	r3, #-1
 1055 00c2 82B2     		uxth	r2, r0
 1056 00c4 2146     		mov	r1, r4
 1057 00c6 2846     		mov	r0, r5
 1058 00c8 FFF7FEFF 		bl	HAL_UART_Transmit
 1059              	.LVL62:
 1060              	.L54:
 200:Core/Src/main.c ****   {
 1061              		.loc 1 200 3 is_stmt 1 view .LVU279
 205:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1062              		.loc 1 205 5 view .LVU280
 205:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1063              		.loc 1 205 8 is_stmt 0 view .LVU281
 1064 00cc 224B     		ldr	r3, .L62+52
 1065 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 205:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1066              		.loc 1 205 7 view .LVU282
 1067 00d0 002B     		cmp	r3, #0
 1068 00d2 FBD1     		bne	.L54
 206:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1069              		.loc 1 206 7 is_stmt 1 view .LVU283
 206:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1070              		.loc 1 206 34 is_stmt 0 view .LVU284
 1071 00d4 134B     		ldr	r3, .L62
 1072 00d6 1A68     		ldr	r2, [r3]
 206:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1073              		.loc 1 206 23 view .LVU285
 1074 00d8 94B2     		uxth	r4, r2
 1075 00da 204B     		ldr	r3, .L62+56
 1076 00dc 1C80     		strh	r4, [r3]	@ movhi
 208:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1077              		.loc 1 208 7 is_stmt 1 view .LVU286
 208:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1078              		.loc 1 208 29 is_stmt 0 view .LVU287
 1079 00de 204B     		ldr	r3, .L62+60
 1080 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 208:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1081              		.loc 1 208 10 view .LVU288
 1082 00e2 012B     		cmp	r3, #1
 1083 00e4 AAD0     		beq	.L61
 1084              	.L55:
 216:Core/Src/main.c ****       {
 1085              		.loc 1 216 7 is_stmt 1 view .LVU289
 1086 00e6 012B     		cmp	r3, #1
 1087 00e8 C1D0     		beq	.L56
 1088 00ea 022B     		cmp	r3, #2
 1089 00ec 07D0     		beq	.L57
 1090 00ee 002B     		cmp	r3, #0
ARM GAS  /tmp/cctN8Zca.s 			page 49


 1091 00f0 D0D1     		bne	.L58
 1092              	.LBB14:
 219:Core/Src/main.c ****         break;
 1093              		.loc 1 219 9 view .LVU290
 1094 00f2 92B2     		uxth	r2, r2
 1095 00f4 1B49     		ldr	r1, .L62+64
 1096 00f6 1548     		ldr	r0, .L62+40
 1097 00f8 FFF7FEFF 		bl	sprintf
 1098              	.LVL63:
 220:Core/Src/main.c ****       
 1099              		.loc 1 220 9 view .LVU291
 1100 00fc CAE7     		b	.L58
 1101              	.L57:
 228:Core/Src/main.c ****         break;
 1102              		.loc 1 228 9 view .LVU292
 228:Core/Src/main.c ****         break;
 1103              		.loc 1 228 70 is_stmt 0 view .LVU293
 1104 00fe FFF7FEFF 		bl	rand
 1105              	.LVL64:
 228:Core/Src/main.c ****         break;
 1106              		.loc 1 228 77 discriminator 1 view .LVU294
 1107 0102 0F4A     		ldr	r2, .L62+28
 1108 0104 82FB0032 		smull	r3, r2, r2, r0
 1109 0108 C317     		asrs	r3, r0, #31
 1110 010a C3EB6213 		rsb	r3, r3, r2, asr #5
 1111 010e 4FF49672 		mov	r2, #300
 1112 0112 02FB1303 		mls	r3, r2, r3, r0
 228:Core/Src/main.c ****         break;
 1113              		.loc 1 228 43 discriminator 1 view .LVU295
 1114 0116 E218     		adds	r2, r4, r3
 228:Core/Src/main.c ****         break;
 1115              		.loc 1 228 9 discriminator 1 view .LVU296
 1116 0118 92B2     		uxth	r2, r2
 1117 011a 1349     		ldr	r1, .L62+68
 1118 011c 0B48     		ldr	r0, .L62+40
 1119 011e FFF7FEFF 		bl	sprintf
 1120              	.LVL65:
 229:Core/Src/main.c **** 
 1121              		.loc 1 229 9 is_stmt 1 view .LVU297
 1122 0122 B7E7     		b	.L58
 1123              	.L63:
 1124              		.align	2
 1125              	.L62:
 1126 0124 00000000 		.word	adcBuffer
 1127 0128 00000000 		.word	hadc1
 1128 012c 00000000 		.word	cli_command
 1129 0130 00000000 		.word	huart2
 1130 0134 00000000 		.word	buffer_index
 1131 0138 00000000 		.word	adc_moving_average
 1132 013c 00000000 		.word	sum
 1133 0140 B5814E1B 		.word	458129845
 1134 0144 00001643 		.word	1125515264
 1135 0148 08000000 		.word	.LC5
 1136 014c 00000000 		.word	msg_buffer
 1137 0150 00000000 		.word	lastDigitalValue
 1138 0154 20000000 		.word	.LC7
 1139 0158 00000000 		.word	disableInterrupt
ARM GAS  /tmp/cctN8Zca.s 			page 50


 1140 015c 00000000 		.word	lastAnalogValue
 1141 0160 00000000 		.word	currentFilterMode
 1142 0164 00000000 		.word	.LC4
 1143 0168 14000000 		.word	.LC6
 1144              	.LBE14:
 1145              		.cfi_endproc
 1146              	.LFE226:
 1148              		.global	msg_buffer
 1149              		.section	.bss.msg_buffer,"aw",%nobits
 1150              		.align	2
 1153              	msg_buffer:
 1154 0000 00000000 		.space	50
 1154      00000000 
 1154      00000000 
 1154      00000000 
 1154      00000000 
 1155              		.global	cli_command
 1156              		.section	.bss.cli_command,"aw",%nobits
 1157              		.align	2
 1160              	cli_command:
 1161 0000 00000000 		.space	50
 1161      00000000 
 1161      00000000 
 1161      00000000 
 1161      00000000 
 1162              		.global	currentFilterMode
 1163              		.section	.bss.currentFilterMode,"aw",%nobits
 1166              	currentFilterMode:
 1167 0000 00       		.space	1
 1168              		.global	sum
 1169              		.section	.bss.sum,"aw",%nobits
 1170              		.align	2
 1173              	sum:
 1174 0000 00000000 		.space	4
 1175              		.global	buffer_index
 1176              		.section	.bss.buffer_index,"aw",%nobits
 1177              		.align	1
 1180              	buffer_index:
 1181 0000 0000     		.space	2
 1182              		.global	adc_moving_average
 1183              		.section	.bss.adc_moving_average,"aw",%nobits
 1184              		.align	2
 1187              	adc_moving_average:
 1188 0000 00000000 		.space	300
 1188      00000000 
 1188      00000000 
 1188      00000000 
 1188      00000000 
 1189              		.global	disableInterrupt
 1190              		.section	.bss.disableInterrupt,"aw",%nobits
 1193              	disableInterrupt:
 1194 0000 00       		.space	1
 1195              		.global	adcBuffer
 1196              		.section	.bss.adcBuffer,"aw",%nobits
 1197              		.align	2
 1200              	adcBuffer:
 1201 0000 00000000 		.space	1200
ARM GAS  /tmp/cctN8Zca.s 			page 51


 1201      00000000 
 1201      00000000 
 1201      00000000 
 1201      00000000 
 1202              		.global	lastDigitalValue
 1203              		.section	.bss.lastDigitalValue,"aw",%nobits
 1204              		.align	1
 1207              	lastDigitalValue:
 1208 0000 0000     		.space	2
 1209              		.global	lastAnalogValue
 1210              		.section	.bss.lastAnalogValue,"aw",%nobits
 1211              		.align	1
 1214              	lastAnalogValue:
 1215 0000 0000     		.space	2
 1216              		.global	huart2
 1217              		.section	.bss.huart2,"aw",%nobits
 1218              		.align	2
 1221              	huart2:
 1222 0000 00000000 		.space	72
 1222      00000000 
 1222      00000000 
 1222      00000000 
 1222      00000000 
 1223              		.global	hdma_adc1
 1224              		.section	.bss.hdma_adc1,"aw",%nobits
 1225              		.align	2
 1228              	hdma_adc1:
 1229 0000 00000000 		.space	96
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1230              		.global	hadc1
 1231              		.section	.bss.hadc1,"aw",%nobits
 1232              		.align	2
 1235              	hadc1:
 1236 0000 00000000 		.space	72
 1236      00000000 
 1236      00000000 
 1236      00000000 
 1236      00000000 
 1237              		.text
 1238              	.Letext0:
 1239              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1240              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1241              		.file 5 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1242              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1243              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1244              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1245              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1246              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1247              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1248              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1249              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1250              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1251              		.file 15 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1252              		.file 16 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
ARM GAS  /tmp/cctN8Zca.s 			page 52


 1253              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1254              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1255              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1256              		.file 20 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1257              		.file 21 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1258              		.file 22 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1259              		.file 23 "<built-in>"
ARM GAS  /tmp/cctN8Zca.s 			page 53


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cctN8Zca.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/cctN8Zca.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cctN8Zca.s:200    .text.MX_GPIO_Init:000000d4 $d
     /tmp/cctN8Zca.s:207    .text.MX_DMA_Init:00000000 $t
     /tmp/cctN8Zca.s:212    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/cctN8Zca.s:258    .text.MX_DMA_Init:00000030 $d
     /tmp/cctN8Zca.s:263    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/cctN8Zca.s:269    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/cctN8Zca.s:354    .text.HAL_GPIO_EXTI_Callback:00000054 $d
     /tmp/cctN8Zca.s:1207   .bss.lastDigitalValue:00000000 lastDigitalValue
     /tmp/cctN8Zca.s:1193   .bss.disableInterrupt:00000000 disableInterrupt
     /tmp/cctN8Zca.s:1235   .bss.hadc1:00000000 hadc1
     /tmp/cctN8Zca.s:1200   .bss.adcBuffer:00000000 adcBuffer
     /tmp/cctN8Zca.s:364    .rodata.handle_cli_command.str1.4:00000000 $d
     /tmp/cctN8Zca.s:374    .text.handle_cli_command:00000000 $t
     /tmp/cctN8Zca.s:380    .text.handle_cli_command:00000000 handle_cli_command
     /tmp/cctN8Zca.s:447    .text.handle_cli_command:00000044 $d
     /tmp/cctN8Zca.s:1160   .bss.cli_command:00000000 cli_command
     /tmp/cctN8Zca.s:1166   .bss.currentFilterMode:00000000 currentFilterMode
     /tmp/cctN8Zca.s:456    .rodata.HAL_UARTEx_RxEventCallback.str1.4:00000000 $d
     /tmp/cctN8Zca.s:460    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/cctN8Zca.s:466    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/cctN8Zca.s:515    .text.HAL_UARTEx_RxEventCallback:00000038 $d
     /tmp/cctN8Zca.s:1153   .bss.msg_buffer:00000000 msg_buffer
     /tmp/cctN8Zca.s:1221   .bss.huart2:00000000 huart2
     /tmp/cctN8Zca.s:524    .text.Error_Handler:00000000 $t
     /tmp/cctN8Zca.s:530    .text.Error_Handler:00000000 Error_Handler
     /tmp/cctN8Zca.s:562    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/cctN8Zca.s:567    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/cctN8Zca.s:621    .text.MX_USART2_UART_Init:0000002c $d
     /tmp/cctN8Zca.s:627    .text.MX_ADC1_Init:00000000 $t
     /tmp/cctN8Zca.s:632    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/cctN8Zca.s:734    .text.MX_ADC1_Init:00000060 $d
     /tmp/cctN8Zca.s:741    .text.SystemClock_Config:00000000 $t
     /tmp/cctN8Zca.s:747    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cctN8Zca.s:890    .text.SystemClock_Config:00000098 $d
     /tmp/cctN8Zca.s:896    .rodata.main.str1.4:00000000 $d
     /tmp/cctN8Zca.s:910    .text.main:00000000 $t
     /tmp/cctN8Zca.s:916    .text.main:00000000 main
     /tmp/cctN8Zca.s:1126   .text.main:00000124 $d
     /tmp/cctN8Zca.s:1180   .bss.buffer_index:00000000 buffer_index
     /tmp/cctN8Zca.s:1187   .bss.adc_moving_average:00000000 adc_moving_average
     /tmp/cctN8Zca.s:1173   .bss.sum:00000000 sum
     /tmp/cctN8Zca.s:1214   .bss.lastAnalogValue:00000000 lastAnalogValue
     /tmp/cctN8Zca.s:1150   .bss.msg_buffer:00000000 $d
     /tmp/cctN8Zca.s:1157   .bss.cli_command:00000000 $d
     /tmp/cctN8Zca.s:1167   .bss.currentFilterMode:00000000 $d
     /tmp/cctN8Zca.s:1170   .bss.sum:00000000 $d
     /tmp/cctN8Zca.s:1177   .bss.buffer_index:00000000 $d
     /tmp/cctN8Zca.s:1184   .bss.adc_moving_average:00000000 $d
     /tmp/cctN8Zca.s:1194   .bss.disableInterrupt:00000000 $d
     /tmp/cctN8Zca.s:1197   .bss.adcBuffer:00000000 $d
     /tmp/cctN8Zca.s:1204   .bss.lastDigitalValue:00000000 $d
     /tmp/cctN8Zca.s:1211   .bss.lastAnalogValue:00000000 $d
     /tmp/cctN8Zca.s:1218   .bss.huart2:00000000 $d
ARM GAS  /tmp/cctN8Zca.s 			page 54


     /tmp/cctN8Zca.s:1228   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/cctN8Zca.s:1225   .bss.hdma_adc1:00000000 $d
     /tmp/cctN8Zca.s:1232   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_ADC_Stop_DMA
HAL_ADC_Start_DMA
strcmp
memset
sprintf
strlen
HAL_UART_Transmit
HAL_UARTEx_ReceiveToIdle_IT
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
time
srand
HAL_Init
rand
