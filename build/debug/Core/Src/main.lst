ARM GAS  /tmp/ccddJ872.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB232:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** typedef enum {
  31:Core/Src/main.c ****     RAW,
ARM GAS  /tmp/ccddJ872.s 			page 2


  32:Core/Src/main.c ****     MOVING_AVERAGE,
  33:Core/Src/main.c ****     RANDOM_NOISE
  34:Core/Src/main.c **** } FilterMode;
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** #define ADC_BUFFER_SIZE 1
  41:Core/Src/main.c **** #define MOVING_AVG_SIZE 150
  42:Core/Src/main.c **** #define BUFFER_SIZE 50
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  52:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** UART_HandleTypeDef huart2;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** uint16_t lastAnalogValue = 0, 
  58:Core/Src/main.c ****          lastDigitalValue = 0;
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** uint32_t adcBuffer[ADC_BUFFER_SIZE];//dma data structure
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** //var for moving average 
  63:Core/Src/main.c **** uint16_t adc_moving_average[MOVING_AVG_SIZE];
  64:Core/Src/main.c **** uint16_t buffer_index = 0;
  65:Core/Src/main.c **** uint32_t sum = 0;
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** FilterMode currentFilterMode = RAW;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** volatile uint8_t cli_index = 0;
  70:Core/Src/main.c **** char cli_command[BUFFER_SIZE];
  71:Core/Src/main.c **** char msg_buffer[BUFFER_SIZE];//buffer for serial msg
  72:Core/Src/main.c **** /* USER CODE END PV */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  75:Core/Src/main.c **** void SystemClock_Config(void);
  76:Core/Src/main.c **** static void MX_GPIO_Init(void);
  77:Core/Src/main.c **** static void MX_DMA_Init(void);
  78:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  79:Core/Src/main.c **** static void MX_ADC1_Init(void);
  80:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  81:Core/Src/main.c **** 
  82:Core/Src/main.c **** /* USER CODE END PFP */
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  85:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /*
  88:Core/Src/main.c **** this function will handle the interrupt whenever a new digital value is read
ARM GAS  /tmp/ccddJ872.s 			page 3


  89:Core/Src/main.c **** */
  90:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
  91:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
  92:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
  93:Core/Src/main.c ****     //sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
  94:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
  95:Core/Src/main.c ****   }
  96:Core/Src/main.c ****   else if(GPIO_Pin == GPIO_PIN_13){
  97:Core/Src/main.c ****     //testing user button
  98:Core/Src/main.c ****     HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
  99:Core/Src/main.c ****   }
 100:Core/Src/main.c **** }
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /*
 103:Core/Src/main.c **** this function will handle the interrupt whenever a new analog value is read
 104:Core/Src/main.c **** */
 105:Core/Src/main.c **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 106:Core/Src/main.c ****     if (hadc->Instance == ADC1) {
 107:Core/Src/main.c ****         lastAnalogValue = adcBuffer[0];
 108:Core/Src/main.c ****         //sprintf(msg_buffer, "A: %hu\r\n", lastAnalogValue);
 109:Core/Src/main.c ****         //HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 110:Core/Src/main.c ****         // Update moving average if in that mode
 111:Core/Src/main.c ****         if (currentFilterMode == MOVING_AVERAGE) {
 112:Core/Src/main.c ****             sum -= adc_moving_average[buffer_index];
 113:Core/Src/main.c ****             adc_moving_average[buffer_index] = lastAnalogValue;
 114:Core/Src/main.c ****             sum += lastAnalogValue;
 115:Core/Src/main.c ****             buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 116:Core/Src/main.c ****         }
 117:Core/Src/main.c ****     }
 118:Core/Src/main.c **** }
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** 
 121:Core/Src/main.c **** /*
 122:Core/Src/main.c **** based on the input, change the filter mode
 123:Core/Src/main.c **** */
 124:Core/Src/main.c **** void handle_cli_command() {
 125:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 126:Core/Src/main.c ****         currentFilterMode = RAW;
 127:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 128:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 129:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 130:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 131:Core/Src/main.c ****     } else {
 132:Core/Src/main.c ****         sprintf(cli_command, "Unknown command\r\n");
 133:Core/Src/main.c ****     }
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)cli_command, strlen(cli_command), HAL_MAX_DELAY);
 136:Core/Src/main.c **** }
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 139:Core/Src/main.c **** {
 140:Core/Src/main.c ****   /*
 141:Core/Src/main.c ****   TODO: at the moment, when we receive a byte the led changes status
 142:Core/Src/main.c ****   */
 143:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 144:Core/Src/main.c ****   
 145:Core/Src/main.c ****   
ARM GAS  /tmp/ccddJ872.s 			page 4


 146:Core/Src/main.c ****   /*
 147:Core/Src/main.c ****   // Controlla se il buffer è pieno
 148:Core/Src/main.c ****   if (cli_index < BUFFER_SIZE - 1) { // Lascia spazio per il terminatore
 149:Core/Src/main.c ****       // Se il carattere ricevuto è un terminatore di riga
 150:Core/Src/main.c ****       if (cli_command[cli_index] == '\n' || cli_command[cli_index] == '\r') {
 151:Core/Src/main.c ****           cli_command[cli_index] = '\0'; // Termina la stringa
 152:Core/Src/main.c ****           handle_cli_command(); // Elabora il comando
 153:Core/Src/main.c ****           cli_index = 0; // Resetta l'indice per il prossimo comando
 154:Core/Src/main.c ****       } else {
 155:Core/Src/main.c ****           cli_command[cli_index+1] = '\0'; // Null-terminate the string
 156:Core/Src/main.c ****           cli_index++; // Incrementa l'indice
 157:Core/Src/main.c ****       }
 158:Core/Src/main.c ****   } else {
 159:Core/Src/main.c ****       // Se il buffer è pieno, resetta l'indice
 160:Core/Src/main.c ****       cli_index = 0; // Resetta per evitare overflow
 161:Core/Src/main.c ****   }
 162:Core/Src/main.c ****   */
 163:Core/Src/main.c ****   
 164:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, &cli_command[cli_index], 1);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c **** }
 167:Core/Src/main.c **** 
 168:Core/Src/main.c **** /* USER CODE END 0 */
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief  The application entry point.
 172:Core/Src/main.c ****   * @retval int
 173:Core/Src/main.c ****   */
 174:Core/Src/main.c **** int main(void)
 175:Core/Src/main.c **** {
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE END 1 */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 184:Core/Src/main.c ****   HAL_Init();
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE END Init */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* Configure the system clock */
 191:Core/Src/main.c ****   SystemClock_Config();
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 194:Core/Src/main.c **** 
 195:Core/Src/main.c ****   /* USER CODE END SysInit */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****   /* Initialize all configured peripherals */
 198:Core/Src/main.c ****   MX_GPIO_Init();
 199:Core/Src/main.c ****   MX_DMA_Init();
 200:Core/Src/main.c ****   MX_USART2_UART_Init();
 201:Core/Src/main.c ****   MX_ADC1_Init();
 202:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccddJ872.s 			page 5


 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   //blink before entering while loop
 205:Core/Src/main.c ****   //just to verify if the init has been executed
 206:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 207:Core/Src/main.c ****   HAL_Delay(500);
 208:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 209:Core/Src/main.c ****   HAL_Delay(500);
 210:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 211:Core/Src/main.c ****   HAL_Delay(500);
 212:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 213:Core/Src/main.c ****   HAL_Delay(500);
 214:Core/Src/main.c ****   
 215:Core/Src/main.c ****   // Initialize the DMA conversion
 216:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 217:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, (uint8_t *)cli_command, 1);
 218:Core/Src/main.c ****   /* USER CODE END 2 */
 219:Core/Src/main.c **** 
 220:Core/Src/main.c ****   /* Infinite loop */
 221:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   while (1)
 224:Core/Src/main.c ****   {
 225:Core/Src/main.c ****     /* USER CODE END WHILE */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 228:Core/Src/main.c ****     //print the latest values fetched
 229:Core/Src/main.c ****     //sprintf(msg_buffer, "A: %hu\t\tD: %hu\t\tMA: %f\r\n", lastAnalogValue, lastDigitalValue, sum/
 230:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer));
 231:Core/Src/main.c ****     //sprintf(msg_buffer, "A: %hu\t\tr\n", lastAnalogValue);
 232:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer));
 233:Core/Src/main.c **** 
 234:Core/Src/main.c ****     // Check if a command has been received
 235:Core/Src/main.c ****     /*
 236:Core/Src/main.c ****     // Prepare the output based on the current filter mode
 237:Core/Src/main.c ****     switch (currentFilterMode) {
 238:Core/Src/main.c ****         case RAW:
 239:Core/Src/main.c ****             sprintf(msg_buffer, "A: %hu\t\tD: %hu\r\n", lastAnalogValue, lastDigitalValue);
 240:Core/Src/main.c ****             break;
 241:Core/Src/main.c ****         case MOVING_AVERAGE:
 242:Core/Src/main.c ****             sprintf(msg_buffer, "MA: %f\t\tD: %hu\r\n", (float)sum / MOVING_AVG_SIZE, lastDigitalVa
 243:Core/Src/main.c ****             break;
 244:Core/Src/main.c ****         case RANDOM_NOISE:
 245:Core/Src/main.c ****             uint16_t noisyValue = lastAnalogValue + (rand() % 10); // Example: add random noise
 246:Core/Src/main.c ****             sprintf(msg_buffer, "A: %hu (noisy)\t\tD: %hu\r\n", noisyValue, lastDigitalValue);
 247:Core/Src/main.c ****             break;
 248:Core/Src/main.c ****     }
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 251:Core/Src/main.c ****     HAL_Delay(1000); // Adjust delay as needed
 252:Core/Src/main.c ****     */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   }
 255:Core/Src/main.c ****   /* USER CODE END 3 */
 256:Core/Src/main.c **** }
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** /**
 259:Core/Src/main.c ****   * @brief System Clock Configuration
ARM GAS  /tmp/ccddJ872.s 			page 6


 260:Core/Src/main.c ****   * @retval None
 261:Core/Src/main.c ****   */
 262:Core/Src/main.c **** void SystemClock_Config(void)
 263:Core/Src/main.c **** {
 264:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 265:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 266:Core/Src/main.c **** 
 267:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 268:Core/Src/main.c ****   */
 269:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 270:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 273:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 274:Core/Src/main.c ****   */
 275:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 276:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 277:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 283:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 284:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 285:Core/Src/main.c ****   {
 286:Core/Src/main.c ****     Error_Handler();
 287:Core/Src/main.c ****   }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 290:Core/Src/main.c ****   */
 291:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 292:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 293:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 294:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 296:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 297:Core/Src/main.c **** 
 298:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 299:Core/Src/main.c ****   {
 300:Core/Src/main.c ****     Error_Handler();
 301:Core/Src/main.c ****   }
 302:Core/Src/main.c **** }
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** /**
 305:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 306:Core/Src/main.c ****   * @param None
 307:Core/Src/main.c ****   * @retval None
 308:Core/Src/main.c ****   */
 309:Core/Src/main.c **** static void MX_ADC1_Init(void)
 310:Core/Src/main.c **** {
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 313:Core/Src/main.c **** 
 314:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccddJ872.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 323:Core/Src/main.c ****   */
 324:Core/Src/main.c ****   hadc1.Instance = ADC1;
 325:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 326:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 327:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 328:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 329:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 330:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 331:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 332:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 333:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 334:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 335:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 336:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 342:Core/Src/main.c ****   */
 343:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 344:Core/Src/main.c ****   sConfig.Rank = 1;
 345:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 346:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 347:Core/Src/main.c ****   {
 348:Core/Src/main.c ****     Error_Handler();
 349:Core/Src/main.c ****   }
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** }
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** /**
 357:Core/Src/main.c ****   * @brief USART2 Initialization Function
 358:Core/Src/main.c ****   * @param None
 359:Core/Src/main.c ****   * @retval None
 360:Core/Src/main.c ****   */
 361:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 362:Core/Src/main.c **** {
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 371:Core/Src/main.c ****   huart2.Instance = USART2;
 372:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 373:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
ARM GAS  /tmp/ccddJ872.s 			page 8


 374:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 375:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 376:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 377:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 378:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 379:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 380:Core/Src/main.c ****   {
 381:Core/Src/main.c ****     Error_Handler();
 382:Core/Src/main.c ****   }
 383:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 386:Core/Src/main.c **** 
 387:Core/Src/main.c **** }
 388:Core/Src/main.c **** 
 389:Core/Src/main.c **** /**
 390:Core/Src/main.c ****   * Enable DMA controller clock
 391:Core/Src/main.c ****   */
 392:Core/Src/main.c **** static void MX_DMA_Init(void)
 393:Core/Src/main.c **** {
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /* DMA controller clock enable */
 396:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* DMA interrupt init */
 399:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 400:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 401:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 402:Core/Src/main.c **** 
 403:Core/Src/main.c **** }
 404:Core/Src/main.c **** 
 405:Core/Src/main.c **** /**
 406:Core/Src/main.c ****   * @brief GPIO Initialization Function
 407:Core/Src/main.c ****   * @param None
 408:Core/Src/main.c ****   * @retval None
 409:Core/Src/main.c ****   */
 410:Core/Src/main.c **** static void MX_GPIO_Init(void)
 411:Core/Src/main.c **** {
  28              		.loc 1 411 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 412:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 412 3 view .LVU1
  41              		.loc 1 412 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/ccddJ872.s 			page 9


  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 413:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 414:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 417:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 417 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 417 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 417 3 view .LVU5
  53 0012 304B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 417 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 417 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 417 3 view .LVU8
 418:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 418 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 418 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 418 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 418 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 418 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 418 3 view .LVU14
 419:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 419 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 419 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 419 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 419 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 419 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
ARM GAS  /tmp/ccddJ872.s 			page 10


  96              		.loc 1 419 3 view .LVU20
 420:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 420 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 420 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 420 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 420 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 420 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 420 3 view .LVU26
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 423:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 423 3 view .LVU27
 114 0062 1D4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 426:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 426 3 view .LVU28
 121              		.loc 1 426 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 427:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 427 3 is_stmt 1 view .LVU30
 125              		.loc 1 427 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 428:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 428 3 is_stmt 1 view .LVU32
 129              		.loc 1 428 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 429:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 429 3 is_stmt 1 view .LVU34
 132 007c 174E     		ldr	r6, .L3+8
 133 007e 05A9     		add	r1, sp, #20
 134 0080 3046     		mov	r0, r6
 135 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 430:Core/Src/main.c **** 
 431:Core/Src/main.c ****   /*Configure GPIO pin : PC2 */
 432:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 137              		.loc 1 432 3 view .LVU35
 138              		.loc 1 432 23 is_stmt 0 view .LVU36
 139 0086 0423     		movs	r3, #4
ARM GAS  /tmp/ccddJ872.s 			page 11


 140 0088 0593     		str	r3, [sp, #20]
 433:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 141              		.loc 1 433 3 is_stmt 1 view .LVU37
 142              		.loc 1 433 24 is_stmt 0 view .LVU38
 143 008a 4FF44413 		mov	r3, #3211264
 144 008e 0693     		str	r3, [sp, #24]
 434:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 434 3 is_stmt 1 view .LVU39
 146              		.loc 1 434 24 is_stmt 0 view .LVU40
 147 0090 0794     		str	r4, [sp, #28]
 435:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 148              		.loc 1 435 3 is_stmt 1 view .LVU41
 149 0092 05A9     		add	r1, sp, #20
 150 0094 3046     		mov	r0, r6
 151 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL2:
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 438:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 153              		.loc 1 438 3 view .LVU42
 154              		.loc 1 438 23 is_stmt 0 view .LVU43
 155 009a 2023     		movs	r3, #32
 156 009c 0593     		str	r3, [sp, #20]
 439:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 157              		.loc 1 439 3 is_stmt 1 view .LVU44
 158              		.loc 1 439 24 is_stmt 0 view .LVU45
 159 009e 0123     		movs	r3, #1
 160 00a0 0693     		str	r3, [sp, #24]
 440:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 440 3 is_stmt 1 view .LVU46
 162              		.loc 1 440 24 is_stmt 0 view .LVU47
 163 00a2 0794     		str	r4, [sp, #28]
 441:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 164              		.loc 1 441 3 is_stmt 1 view .LVU48
 165              		.loc 1 441 25 is_stmt 0 view .LVU49
 166 00a4 0894     		str	r4, [sp, #32]
 442:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 442 3 is_stmt 1 view .LVU50
 168 00a6 05A9     		add	r1, sp, #20
 169 00a8 2846     		mov	r0, r5
 170 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL3:
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* EXTI interrupt init*/
 445:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 172              		.loc 1 445 3 view .LVU51
 173 00ae 2246     		mov	r2, r4
 174 00b0 2146     		mov	r1, r4
 175 00b2 0820     		movs	r0, #8
 176 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 446:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 178              		.loc 1 446 3 view .LVU52
 179 00b8 0820     		movs	r0, #8
 180 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL5:
 447:Core/Src/main.c **** 
ARM GAS  /tmp/ccddJ872.s 			page 12


 448:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 182              		.loc 1 448 3 view .LVU53
 183 00be 2246     		mov	r2, r4
 184 00c0 2146     		mov	r1, r4
 185 00c2 2820     		movs	r0, #40
 186 00c4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL6:
 449:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 188              		.loc 1 449 3 view .LVU54
 189 00c8 2820     		movs	r0, #40
 190 00ca FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL7:
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 452:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 453:Core/Src/main.c **** }
 192              		.loc 1 453 1 is_stmt 0 view .LVU55
 193 00ce 0AB0     		add	sp, sp, #40
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 00d0 70BD     		pop	{r4, r5, r6, pc}
 197              	.L4:
 198 00d2 00BF     		.align	2
 199              	.L3:
 200 00d4 00380240 		.word	1073887232
 201 00d8 00000240 		.word	1073872896
 202 00dc 00080240 		.word	1073874944
 203              		.cfi_endproc
 204              	.LFE232:
 206              		.section	.text.MX_DMA_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_DMA_Init:
 213              	.LFB231:
 393:Core/Src/main.c **** 
 214              		.loc 1 393 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 8
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 00B5     		push	{lr}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              		.cfi_def_cfa_offset 16
 396:Core/Src/main.c **** 
 223              		.loc 1 396 3 view .LVU57
 224              	.LBB8:
 396:Core/Src/main.c **** 
 225              		.loc 1 396 3 view .LVU58
 226 0004 0021     		movs	r1, #0
 227 0006 0191     		str	r1, [sp, #4]
 396:Core/Src/main.c **** 
 228              		.loc 1 396 3 view .LVU59
 229 0008 094B     		ldr	r3, .L7
 230 000a 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccddJ872.s 			page 13


 231 000c 42F48002 		orr	r2, r2, #4194304
 232 0010 1A63     		str	r2, [r3, #48]
 396:Core/Src/main.c **** 
 233              		.loc 1 396 3 view .LVU60
 234 0012 1B6B     		ldr	r3, [r3, #48]
 235 0014 03F48003 		and	r3, r3, #4194304
 236 0018 0193     		str	r3, [sp, #4]
 396:Core/Src/main.c **** 
 237              		.loc 1 396 3 view .LVU61
 238 001a 019B     		ldr	r3, [sp, #4]
 239              	.LBE8:
 396:Core/Src/main.c **** 
 240              		.loc 1 396 3 view .LVU62
 400:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 241              		.loc 1 400 3 view .LVU63
 242 001c 0A46     		mov	r2, r1
 243 001e 3820     		movs	r0, #56
 244 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
 401:Core/Src/main.c **** 
 246              		.loc 1 401 3 view .LVU64
 247 0024 3820     		movs	r0, #56
 248 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 403:Core/Src/main.c **** 
 250              		.loc 1 403 1 is_stmt 0 view .LVU65
 251 002a 03B0     		add	sp, sp, #12
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 002c 5DF804FB 		ldr	pc, [sp], #4
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0030 00380240 		.word	1073887232
 259              		.cfi_endproc
 260              	.LFE231:
 262              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_GPIO_EXTI_Callback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 269              	HAL_GPIO_EXTI_Callback:
 270              	.LVL10:
 271              	.LFB223:
  90:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 272              		.loc 1 90 47 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
  90:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 276              		.loc 1 90 47 is_stmt 0 view .LVU67
 277 0000 08B5     		push	{r3, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
  91:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
ARM GAS  /tmp/ccddJ872.s 			page 14


 281              		.loc 1 91 3 is_stmt 1 view .LVU68
  91:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 282              		.loc 1 91 5 is_stmt 0 view .LVU69
 283 0002 0428     		cmp	r0, #4
 284 0004 03D0     		beq	.L13
  96:Core/Src/main.c ****     //testing user button
 285              		.loc 1 96 8 is_stmt 1 view .LVU70
  96:Core/Src/main.c ****     //testing user button
 286              		.loc 1 96 10 is_stmt 0 view .LVU71
 287 0006 B0F5005F 		cmp	r0, #8192
 288 000a 07D0     		beq	.L14
 289              	.LVL11:
 290              	.L9:
 100:Core/Src/main.c **** 
 291              		.loc 1 100 1 view .LVU72
 292 000c 08BD     		pop	{r3, pc}
 293              	.LVL12:
 294              	.L13:
  92:Core/Src/main.c ****     //sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 295              		.loc 1 92 5 is_stmt 1 view .LVU73
  92:Core/Src/main.c ****     //sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 296              		.loc 1 92 24 is_stmt 0 view .LVU74
 297 000e 0421     		movs	r1, #4
 298 0010 0548     		ldr	r0, .L15
 299              	.LVL13:
  92:Core/Src/main.c ****     //sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 300              		.loc 1 92 24 view .LVU75
 301 0012 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 302              	.LVL14:
  92:Core/Src/main.c ****     //sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 303              		.loc 1 92 22 discriminator 1 view .LVU76
 304 0016 054B     		ldr	r3, .L15+4
 305 0018 1880     		strh	r0, [r3]	@ movhi
 306 001a F7E7     		b	.L9
 307              	.LVL15:
 308              	.L14:
  98:Core/Src/main.c ****   }
 309              		.loc 1 98 5 is_stmt 1 view .LVU77
 310 001c 2021     		movs	r1, #32
 311 001e 0448     		ldr	r0, .L15+8
 312              	.LVL16:
  98:Core/Src/main.c ****   }
 313              		.loc 1 98 5 is_stmt 0 view .LVU78
 314 0020 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 315              	.LVL17:
 100:Core/Src/main.c **** 
 316              		.loc 1 100 1 view .LVU79
 317 0024 F2E7     		b	.L9
 318              	.L16:
 319 0026 00BF     		.align	2
 320              	.L15:
 321 0028 00080240 		.word	1073874944
 322 002c 00000000 		.word	lastDigitalValue
 323 0030 00000240 		.word	1073872896
 324              		.cfi_endproc
 325              	.LFE223:
 327              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccddJ872.s 			page 15


 328              		.align	1
 329              		.global	HAL_ADC_ConvCpltCallback
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	HAL_ADC_ConvCpltCallback:
 335              	.LVL18:
 336              	.LFB224:
 105:Core/Src/main.c ****     if (hadc->Instance == ADC1) {
 337              		.loc 1 105 56 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 106:Core/Src/main.c ****         lastAnalogValue = adcBuffer[0];
 342              		.loc 1 106 5 view .LVU81
 106:Core/Src/main.c ****         lastAnalogValue = adcBuffer[0];
 343              		.loc 1 106 13 is_stmt 0 view .LVU82
 344 0000 0268     		ldr	r2, [r0]
 106:Core/Src/main.c ****         lastAnalogValue = adcBuffer[0];
 345              		.loc 1 106 8 view .LVU83
 346 0002 144B     		ldr	r3, .L24
 347 0004 9A42     		cmp	r2, r3
 348 0006 00D0     		beq	.L23
 349              	.L20:
 350 0008 7047     		bx	lr
 351              	.L23:
 107:Core/Src/main.c ****         //sprintf(msg_buffer, "A: %hu\r\n", lastAnalogValue);
 352              		.loc 1 107 9 is_stmt 1 view .LVU84
 107:Core/Src/main.c ****         //sprintf(msg_buffer, "A: %hu\r\n", lastAnalogValue);
 353              		.loc 1 107 36 is_stmt 0 view .LVU85
 354 000a 134B     		ldr	r3, .L24+4
 355 000c 1B68     		ldr	r3, [r3]
 107:Core/Src/main.c ****         //sprintf(msg_buffer, "A: %hu\r\n", lastAnalogValue);
 356              		.loc 1 107 25 view .LVU86
 357 000e 99B2     		uxth	r1, r3
 358 0010 124A     		ldr	r2, .L24+8
 359 0012 1180     		strh	r1, [r2]	@ movhi
 111:Core/Src/main.c ****             sum -= adc_moving_average[buffer_index];
 360              		.loc 1 111 9 is_stmt 1 view .LVU87
 111:Core/Src/main.c ****             sum -= adc_moving_average[buffer_index];
 361              		.loc 1 111 31 is_stmt 0 view .LVU88
 362 0014 124A     		ldr	r2, .L24+12
 363 0016 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 111:Core/Src/main.c ****             sum -= adc_moving_average[buffer_index];
 364              		.loc 1 111 12 view .LVU89
 365 0018 012A     		cmp	r2, #1
 366 001a F5D1     		bne	.L20
 105:Core/Src/main.c ****     if (hadc->Instance == ADC1) {
 367              		.loc 1 105 56 view .LVU90
 368 001c 70B4     		push	{r4, r5, r6}
 369              		.cfi_def_cfa_offset 12
 370              		.cfi_offset 4, -12
 371              		.cfi_offset 5, -8
 372              		.cfi_offset 6, -4
 112:Core/Src/main.c ****             adc_moving_average[buffer_index] = lastAnalogValue;
 373              		.loc 1 112 13 is_stmt 1 view .LVU91
ARM GAS  /tmp/ccddJ872.s 			page 16


 112:Core/Src/main.c ****             adc_moving_average[buffer_index] = lastAnalogValue;
 374              		.loc 1 112 38 is_stmt 0 view .LVU92
 375 001e 114D     		ldr	r5, .L24+16
 376 0020 2A88     		ldrh	r2, [r5]
 377 0022 114E     		ldr	r6, .L24+20
 378 0024 36F812C0 		ldrh	ip, [r6, r2, lsl #1]
 112:Core/Src/main.c ****             adc_moving_average[buffer_index] = lastAnalogValue;
 379              		.loc 1 112 17 view .LVU93
 380 0028 104C     		ldr	r4, .L24+24
 381 002a 2068     		ldr	r0, [r4]
 382              	.LVL19:
 112:Core/Src/main.c ****             adc_moving_average[buffer_index] = lastAnalogValue;
 383              		.loc 1 112 17 view .LVU94
 384 002c A0EB0C00 		sub	r0, r0, ip
 385 0030 2060     		str	r0, [r4]
 113:Core/Src/main.c ****             sum += lastAnalogValue;
 386              		.loc 1 113 13 is_stmt 1 view .LVU95
 113:Core/Src/main.c ****             sum += lastAnalogValue;
 387              		.loc 1 113 46 is_stmt 0 view .LVU96
 388 0032 26F81210 		strh	r1, [r6, r2, lsl #1]	@ movhi
 114:Core/Src/main.c ****             buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 389              		.loc 1 114 13 is_stmt 1 view .LVU97
 114:Core/Src/main.c ****             buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 390              		.loc 1 114 17 is_stmt 0 view .LVU98
 391 0036 10FA83F3 		uxtah	r3, r0, r3
 392 003a 2360     		str	r3, [r4]
 115:Core/Src/main.c ****         }
 393              		.loc 1 115 13 is_stmt 1 view .LVU99
 115:Core/Src/main.c ****         }
 394              		.loc 1 115 42 is_stmt 0 view .LVU100
 395 003c 0132     		adds	r2, r2, #1
 115:Core/Src/main.c ****         }
 396              		.loc 1 115 47 view .LVU101
 397 003e 0C4B     		ldr	r3, .L24+28
 398 0040 83FB0213 		smull	r1, r3, r3, r2
 399 0044 1B11     		asrs	r3, r3, #4
 400 0046 9621     		movs	r1, #150
 401 0048 01FB1323 		mls	r3, r1, r3, r2
 115:Core/Src/main.c ****         }
 402              		.loc 1 115 26 view .LVU102
 403 004c 2B80     		strh	r3, [r5]	@ movhi
 118:Core/Src/main.c **** 
 404              		.loc 1 118 1 view .LVU103
 405 004e 70BC     		pop	{r4, r5, r6}
 406              		.cfi_restore 6
 407              		.cfi_restore 5
 408              		.cfi_restore 4
 409              		.cfi_def_cfa_offset 0
 410 0050 7047     		bx	lr
 411              	.L25:
 412 0052 00BF     		.align	2
 413              	.L24:
 414 0054 00200140 		.word	1073815552
 415 0058 00000000 		.word	adcBuffer
 416 005c 00000000 		.word	lastAnalogValue
 417 0060 00000000 		.word	currentFilterMode
 418 0064 00000000 		.word	buffer_index
ARM GAS  /tmp/ccddJ872.s 			page 17


 419 0068 00000000 		.word	adc_moving_average
 420 006c 00000000 		.word	sum
 421 0070 B5814E1B 		.word	458129845
 422              		.cfi_endproc
 423              	.LFE224:
 425              		.section	.rodata.handle_cli_command.str1.4,"aMS",%progbits,1
 426              		.align	2
 427              	.LC0:
 428 0000 72617700 		.ascii	"raw\000"
 429              		.align	2
 430              	.LC1:
 431 0004 6D6F7669 		.ascii	"moving average\000"
 431      6E672061 
 431      76657261 
 431      676500
 432 0013 00       		.align	2
 433              	.LC2:
 434 0014 72616E64 		.ascii	"random noise\000"
 434      6F6D206E 
 434      6F697365 
 434      00
 435 0021 000000   		.align	2
 436              	.LC3:
 437 0024 556E6B6E 		.ascii	"Unknown command\015\012\000"
 437      6F776E20 
 437      636F6D6D 
 437      616E640D 
 437      0A00
 438              		.section	.text.handle_cli_command,"ax",%progbits
 439              		.align	1
 440              		.global	handle_cli_command
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 445              	handle_cli_command:
 446              	.LFB225:
 124:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 447              		.loc 1 124 27 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451 0000 38B5     		push	{r3, r4, r5, lr}
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 3, -16
 454              		.cfi_offset 4, -12
 455              		.cfi_offset 5, -8
 456              		.cfi_offset 14, -4
 125:Core/Src/main.c ****         currentFilterMode = RAW;
 457              		.loc 1 125 5 view .LVU105
 125:Core/Src/main.c ****         currentFilterMode = RAW;
 458              		.loc 1 125 9 is_stmt 0 view .LVU106
 459 0002 1649     		ldr	r1, .L32
 460 0004 1648     		ldr	r0, .L32+4
 461 0006 FFF7FEFF 		bl	strcmp
 462              	.LVL20:
 125:Core/Src/main.c ****         currentFilterMode = RAW;
 463              		.loc 1 125 8 discriminator 1 view .LVU107
ARM GAS  /tmp/ccddJ872.s 			page 18


 464 000a 70B9     		cbnz	r0, .L27
 126:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 465              		.loc 1 126 9 is_stmt 1 view .LVU108
 126:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 466              		.loc 1 126 27 is_stmt 0 view .LVU109
 467 000c 154B     		ldr	r3, .L32+8
 468 000e 0022     		movs	r2, #0
 469 0010 1A70     		strb	r2, [r3]
 470              	.L28:
 135:Core/Src/main.c **** }
 471              		.loc 1 135 5 is_stmt 1 view .LVU110
 135:Core/Src/main.c **** }
 472              		.loc 1 135 56 is_stmt 0 view .LVU111
 473 0012 134C     		ldr	r4, .L32+4
 474 0014 2046     		mov	r0, r4
 475 0016 FFF7FEFF 		bl	strlen
 476              	.LVL21:
 135:Core/Src/main.c **** }
 477              		.loc 1 135 5 discriminator 1 view .LVU112
 478 001a 4FF0FF33 		mov	r3, #-1
 479 001e 82B2     		uxth	r2, r0
 480 0020 2146     		mov	r1, r4
 481 0022 1148     		ldr	r0, .L32+12
 482 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 483              	.LVL22:
 136:Core/Src/main.c **** 
 484              		.loc 1 136 1 view .LVU113
 485 0028 38BD     		pop	{r3, r4, r5, pc}
 486              	.L27:
 127:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 487              		.loc 1 127 12 is_stmt 1 view .LVU114
 127:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 488              		.loc 1 127 16 is_stmt 0 view .LVU115
 489 002a 1049     		ldr	r1, .L32+16
 490 002c 0C48     		ldr	r0, .L32+4
 491 002e FFF7FEFF 		bl	strcmp
 492              	.LVL23:
 127:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 493              		.loc 1 127 15 discriminator 1 view .LVU116
 494 0032 18B9     		cbnz	r0, .L29
 128:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 495              		.loc 1 128 9 is_stmt 1 view .LVU117
 128:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 496              		.loc 1 128 27 is_stmt 0 view .LVU118
 497 0034 0B4B     		ldr	r3, .L32+8
 498 0036 0122     		movs	r2, #1
 499 0038 1A70     		strb	r2, [r3]
 500 003a EAE7     		b	.L28
 501              	.L29:
 129:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 502              		.loc 1 129 12 is_stmt 1 view .LVU119
 129:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 503              		.loc 1 129 16 is_stmt 0 view .LVU120
 504 003c 0C49     		ldr	r1, .L32+20
 505 003e 0848     		ldr	r0, .L32+4
 506 0040 FFF7FEFF 		bl	strcmp
 507              	.LVL24:
ARM GAS  /tmp/ccddJ872.s 			page 19


 129:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 508              		.loc 1 129 15 discriminator 1 view .LVU121
 509 0044 18B9     		cbnz	r0, .L30
 130:Core/Src/main.c ****     } else {
 510              		.loc 1 130 9 is_stmt 1 view .LVU122
 130:Core/Src/main.c ****     } else {
 511              		.loc 1 130 27 is_stmt 0 view .LVU123
 512 0046 074B     		ldr	r3, .L32+8
 513 0048 0222     		movs	r2, #2
 514 004a 1A70     		strb	r2, [r3]
 515 004c E1E7     		b	.L28
 516              	.L30:
 132:Core/Src/main.c ****     }
 517              		.loc 1 132 9 is_stmt 1 view .LVU124
 518 004e 044C     		ldr	r4, .L32+4
 519 0050 084D     		ldr	r5, .L32+24
 520 0052 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 521 0054 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 522 0056 2B68     		ldr	r3, [r5]
 523 0058 2380     		strh	r3, [r4]	@ movhi
 524 005a DAE7     		b	.L28
 525              	.L33:
 526              		.align	2
 527              	.L32:
 528 005c 00000000 		.word	.LC0
 529 0060 00000000 		.word	cli_command
 530 0064 00000000 		.word	currentFilterMode
 531 0068 00000000 		.word	huart2
 532 006c 04000000 		.word	.LC1
 533 0070 14000000 		.word	.LC2
 534 0074 24000000 		.word	.LC3
 535              		.cfi_endproc
 536              	.LFE225:
 538              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 539              		.align	1
 540              		.global	HAL_UART_RxCpltCallback
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 545              	HAL_UART_RxCpltCallback:
 546              	.LVL25:
 547              	.LFB226:
 139:Core/Src/main.c ****   /*
 548              		.loc 1 139 1 view -0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 139:Core/Src/main.c ****   /*
 552              		.loc 1 139 1 is_stmt 0 view .LVU126
 553 0000 08B5     		push	{r3, lr}
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 3, -8
 556              		.cfi_offset 14, -4
 143:Core/Src/main.c ****   
 557              		.loc 1 143 3 is_stmt 1 view .LVU127
 558 0002 2021     		movs	r1, #32
 559 0004 0548     		ldr	r0, .L36
ARM GAS  /tmp/ccddJ872.s 			page 20


 560              	.LVL26:
 143:Core/Src/main.c ****   
 561              		.loc 1 143 3 is_stmt 0 view .LVU128
 562 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 563              	.LVL27:
 164:Core/Src/main.c **** 
 564              		.loc 1 164 3 is_stmt 1 view .LVU129
 164:Core/Src/main.c **** 
 565              		.loc 1 164 44 is_stmt 0 view .LVU130
 566 000a 054B     		ldr	r3, .L36+4
 567 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 164:Core/Src/main.c **** 
 568              		.loc 1 164 3 view .LVU131
 569 000e 0122     		movs	r2, #1
 570 0010 0449     		ldr	r1, .L36+8
 571 0012 1944     		add	r1, r1, r3
 572 0014 0448     		ldr	r0, .L36+12
 573 0016 FFF7FEFF 		bl	HAL_UART_Receive_IT
 574              	.LVL28:
 166:Core/Src/main.c **** 
 575              		.loc 1 166 1 view .LVU132
 576 001a 08BD     		pop	{r3, pc}
 577              	.L37:
 578              		.align	2
 579              	.L36:
 580 001c 00000240 		.word	1073872896
 581 0020 00000000 		.word	cli_index
 582 0024 00000000 		.word	cli_command
 583 0028 00000000 		.word	huart2
 584              		.cfi_endproc
 585              	.LFE226:
 587              		.section	.text.Error_Handler,"ax",%progbits
 588              		.align	1
 589              		.global	Error_Handler
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 594              	Error_Handler:
 595              	.LFB233:
 454:Core/Src/main.c **** 
 455:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 456:Core/Src/main.c **** 
 457:Core/Src/main.c **** /* USER CODE END 4 */
 458:Core/Src/main.c **** 
 459:Core/Src/main.c **** /**
 460:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */
 463:Core/Src/main.c **** void Error_Handler(void)
 464:Core/Src/main.c **** {
 596              		.loc 1 464 1 is_stmt 1 view -0
 597              		.cfi_startproc
 598              		@ Volatile: function does not return.
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601              		@ link register save eliminated.
 465:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
ARM GAS  /tmp/ccddJ872.s 			page 21


 466:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 467:Core/Src/main.c ****   __disable_irq();
 602              		.loc 1 467 3 view .LVU134
 603              	.LBB9:
 604              	.LBI9:
 605              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccddJ872.s 			page 22


  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
ARM GAS  /tmp/ccddJ872.s 			page 23


 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccddJ872.s 			page 24


 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccddJ872.s 			page 25


 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccddJ872.s 			page 26


 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccddJ872.s 			page 27


 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccddJ872.s 			page 28


 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
ARM GAS  /tmp/ccddJ872.s 			page 29


 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
ARM GAS  /tmp/ccddJ872.s 			page 30


 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
ARM GAS  /tmp/ccddJ872.s 			page 31


 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccddJ872.s 			page 32


 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccddJ872.s 			page 33


 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/ccddJ872.s 			page 34


 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
ARM GAS  /tmp/ccddJ872.s 			page 35


 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccddJ872.s 			page 36


 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccddJ872.s 			page 37


 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 606              		.loc 2 960 27 view .LVU135
 607              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccddJ872.s 			page 38


 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 608              		.loc 2 962 3 view .LVU136
 609              		.syntax unified
 610              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 611 0000 72B6     		cpsid i
 612              	@ 0 "" 2
 613              		.thumb
 614              		.syntax unified
 615              	.L39:
 616              	.LBE10:
 617              	.LBE9:
 468:Core/Src/main.c ****   while (1)
 618              		.loc 1 468 3 view .LVU137
 469:Core/Src/main.c ****   {
 470:Core/Src/main.c ****   }
 619              		.loc 1 470 3 view .LVU138
 468:Core/Src/main.c ****   while (1)
 620              		.loc 1 468 9 view .LVU139
 621 0002 FEE7     		b	.L39
 622              		.cfi_endproc
 623              	.LFE233:
 625              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 626              		.align	1
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 631              	MX_USART2_UART_Init:
 632              	.LFB230:
 362:Core/Src/main.c **** 
 633              		.loc 1 362 1 view -0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 0
 636              		@ frame_needed = 0, uses_anonymous_args = 0
 637 0000 08B5     		push	{r3, lr}
 638              		.cfi_def_cfa_offset 8
 639              		.cfi_offset 3, -8
 640              		.cfi_offset 14, -4
 371:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 641              		.loc 1 371 3 view .LVU141
 371:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 642              		.loc 1 371 19 is_stmt 0 view .LVU142
 643 0002 0A48     		ldr	r0, .L44
 644 0004 0A4B     		ldr	r3, .L44+4
 645 0006 0360     		str	r3, [r0]
 372:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 646              		.loc 1 372 3 is_stmt 1 view .LVU143
 372:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 647              		.loc 1 372 24 is_stmt 0 view .LVU144
 648 0008 4FF4E133 		mov	r3, #115200
 649 000c 4360     		str	r3, [r0, #4]
 373:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 650              		.loc 1 373 3 is_stmt 1 view .LVU145
 373:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 651              		.loc 1 373 26 is_stmt 0 view .LVU146
 652 000e 0023     		movs	r3, #0
 653 0010 8360     		str	r3, [r0, #8]
 374:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccddJ872.s 			page 39


 654              		.loc 1 374 3 is_stmt 1 view .LVU147
 374:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 655              		.loc 1 374 24 is_stmt 0 view .LVU148
 656 0012 C360     		str	r3, [r0, #12]
 375:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 657              		.loc 1 375 3 is_stmt 1 view .LVU149
 375:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 658              		.loc 1 375 22 is_stmt 0 view .LVU150
 659 0014 0361     		str	r3, [r0, #16]
 376:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 660              		.loc 1 376 3 is_stmt 1 view .LVU151
 376:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 661              		.loc 1 376 20 is_stmt 0 view .LVU152
 662 0016 0C22     		movs	r2, #12
 663 0018 4261     		str	r2, [r0, #20]
 377:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 664              		.loc 1 377 3 is_stmt 1 view .LVU153
 377:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 665              		.loc 1 377 25 is_stmt 0 view .LVU154
 666 001a 8361     		str	r3, [r0, #24]
 378:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 667              		.loc 1 378 3 is_stmt 1 view .LVU155
 378:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 668              		.loc 1 378 28 is_stmt 0 view .LVU156
 669 001c C361     		str	r3, [r0, #28]
 379:Core/Src/main.c ****   {
 670              		.loc 1 379 3 is_stmt 1 view .LVU157
 379:Core/Src/main.c ****   {
 671              		.loc 1 379 7 is_stmt 0 view .LVU158
 672 001e FFF7FEFF 		bl	HAL_UART_Init
 673              	.LVL29:
 379:Core/Src/main.c ****   {
 674              		.loc 1 379 6 discriminator 1 view .LVU159
 675 0022 00B9     		cbnz	r0, .L43
 387:Core/Src/main.c **** 
 676              		.loc 1 387 1 view .LVU160
 677 0024 08BD     		pop	{r3, pc}
 678              	.L43:
 381:Core/Src/main.c ****   }
 679              		.loc 1 381 5 is_stmt 1 view .LVU161
 680 0026 FFF7FEFF 		bl	Error_Handler
 681              	.LVL30:
 682              	.L45:
 683 002a 00BF     		.align	2
 684              	.L44:
 685 002c 00000000 		.word	huart2
 686 0030 00440040 		.word	1073759232
 687              		.cfi_endproc
 688              	.LFE230:
 690              		.section	.text.MX_ADC1_Init,"ax",%progbits
 691              		.align	1
 692              		.syntax unified
 693              		.thumb
 694              		.thumb_func
 696              	MX_ADC1_Init:
 697              	.LFB229:
 310:Core/Src/main.c **** 
ARM GAS  /tmp/ccddJ872.s 			page 40


 698              		.loc 1 310 1 view -0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702 0000 00B5     		push	{lr}
 703              		.cfi_def_cfa_offset 4
 704              		.cfi_offset 14, -4
 705 0002 85B0     		sub	sp, sp, #20
 706              		.cfi_def_cfa_offset 24
 316:Core/Src/main.c **** 
 707              		.loc 1 316 3 view .LVU163
 316:Core/Src/main.c **** 
 708              		.loc 1 316 26 is_stmt 0 view .LVU164
 709 0004 0023     		movs	r3, #0
 710 0006 0093     		str	r3, [sp]
 711 0008 0193     		str	r3, [sp, #4]
 712 000a 0293     		str	r3, [sp, #8]
 713 000c 0393     		str	r3, [sp, #12]
 324:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 714              		.loc 1 324 3 is_stmt 1 view .LVU165
 324:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 715              		.loc 1 324 18 is_stmt 0 view .LVU166
 716 000e 1448     		ldr	r0, .L52
 717 0010 144A     		ldr	r2, .L52+4
 718 0012 0260     		str	r2, [r0]
 325:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 719              		.loc 1 325 3 is_stmt 1 view .LVU167
 325:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 720              		.loc 1 325 29 is_stmt 0 view .LVU168
 721 0014 4FF48032 		mov	r2, #65536
 722 0018 4260     		str	r2, [r0, #4]
 326:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 723              		.loc 1 326 3 is_stmt 1 view .LVU169
 326:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 724              		.loc 1 326 25 is_stmt 0 view .LVU170
 725 001a 8360     		str	r3, [r0, #8]
 327:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 726              		.loc 1 327 3 is_stmt 1 view .LVU171
 327:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 727              		.loc 1 327 27 is_stmt 0 view .LVU172
 728 001c 0361     		str	r3, [r0, #16]
 328:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 729              		.loc 1 328 3 is_stmt 1 view .LVU173
 328:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 730              		.loc 1 328 33 is_stmt 0 view .LVU174
 731 001e 0122     		movs	r2, #1
 732 0020 0276     		strb	r2, [r0, #24]
 329:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 733              		.loc 1 329 3 is_stmt 1 view .LVU175
 329:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 734              		.loc 1 329 36 is_stmt 0 view .LVU176
 735 0022 80F82030 		strb	r3, [r0, #32]
 330:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 736              		.loc 1 330 3 is_stmt 1 view .LVU177
 330:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 737              		.loc 1 330 35 is_stmt 0 view .LVU178
 738 0026 C362     		str	r3, [r0, #44]
ARM GAS  /tmp/ccddJ872.s 			page 41


 331:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 739              		.loc 1 331 3 is_stmt 1 view .LVU179
 331:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 740              		.loc 1 331 31 is_stmt 0 view .LVU180
 741 0028 0F49     		ldr	r1, .L52+8
 742 002a 8162     		str	r1, [r0, #40]
 332:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 743              		.loc 1 332 3 is_stmt 1 view .LVU181
 332:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 744              		.loc 1 332 24 is_stmt 0 view .LVU182
 745 002c C360     		str	r3, [r0, #12]
 333:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 746              		.loc 1 333 3 is_stmt 1 view .LVU183
 333:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 747              		.loc 1 333 30 is_stmt 0 view .LVU184
 748 002e C261     		str	r2, [r0, #28]
 334:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 749              		.loc 1 334 3 is_stmt 1 view .LVU185
 334:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 750              		.loc 1 334 36 is_stmt 0 view .LVU186
 751 0030 80F83020 		strb	r2, [r0, #48]
 335:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 752              		.loc 1 335 3 is_stmt 1 view .LVU187
 335:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 753              		.loc 1 335 27 is_stmt 0 view .LVU188
 754 0034 4261     		str	r2, [r0, #20]
 336:Core/Src/main.c ****   {
 755              		.loc 1 336 3 is_stmt 1 view .LVU189
 336:Core/Src/main.c ****   {
 756              		.loc 1 336 7 is_stmt 0 view .LVU190
 757 0036 FFF7FEFF 		bl	HAL_ADC_Init
 758              	.LVL31:
 336:Core/Src/main.c ****   {
 759              		.loc 1 336 6 discriminator 1 view .LVU191
 760 003a 60B9     		cbnz	r0, .L50
 343:Core/Src/main.c ****   sConfig.Rank = 1;
 761              		.loc 1 343 3 is_stmt 1 view .LVU192
 343:Core/Src/main.c ****   sConfig.Rank = 1;
 762              		.loc 1 343 19 is_stmt 0 view .LVU193
 763 003c 0023     		movs	r3, #0
 764 003e 0093     		str	r3, [sp]
 344:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 765              		.loc 1 344 3 is_stmt 1 view .LVU194
 344:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 766              		.loc 1 344 16 is_stmt 0 view .LVU195
 767 0040 0122     		movs	r2, #1
 768 0042 0192     		str	r2, [sp, #4]
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 769              		.loc 1 345 3 is_stmt 1 view .LVU196
 345:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 770              		.loc 1 345 24 is_stmt 0 view .LVU197
 771 0044 0293     		str	r3, [sp, #8]
 346:Core/Src/main.c ****   {
 772              		.loc 1 346 3 is_stmt 1 view .LVU198
 346:Core/Src/main.c ****   {
 773              		.loc 1 346 7 is_stmt 0 view .LVU199
 774 0046 6946     		mov	r1, sp
ARM GAS  /tmp/ccddJ872.s 			page 42


 775 0048 0548     		ldr	r0, .L52
 776 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 777              	.LVL32:
 346:Core/Src/main.c ****   {
 778              		.loc 1 346 6 discriminator 1 view .LVU200
 779 004e 20B9     		cbnz	r0, .L51
 354:Core/Src/main.c **** 
 780              		.loc 1 354 1 view .LVU201
 781 0050 05B0     		add	sp, sp, #20
 782              		.cfi_remember_state
 783              		.cfi_def_cfa_offset 4
 784              		@ sp needed
 785 0052 5DF804FB 		ldr	pc, [sp], #4
 786              	.L50:
 787              		.cfi_restore_state
 338:Core/Src/main.c ****   }
 788              		.loc 1 338 5 is_stmt 1 view .LVU202
 789 0056 FFF7FEFF 		bl	Error_Handler
 790              	.LVL33:
 791              	.L51:
 348:Core/Src/main.c ****   }
 792              		.loc 1 348 5 view .LVU203
 793 005a FFF7FEFF 		bl	Error_Handler
 794              	.LVL34:
 795              	.L53:
 796 005e 00BF     		.align	2
 797              	.L52:
 798 0060 00000000 		.word	hadc1
 799 0064 00200140 		.word	1073815552
 800 0068 0100000F 		.word	251658241
 801              		.cfi_endproc
 802              	.LFE229:
 804              		.section	.text.SystemClock_Config,"ax",%progbits
 805              		.align	1
 806              		.global	SystemClock_Config
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 811              	SystemClock_Config:
 812              	.LFB228:
 263:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 813              		.loc 1 263 1 view -0
 814              		.cfi_startproc
 815              		@ args = 0, pretend = 0, frame = 80
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817 0000 00B5     		push	{lr}
 818              		.cfi_def_cfa_offset 4
 819              		.cfi_offset 14, -4
 820 0002 95B0     		sub	sp, sp, #84
 821              		.cfi_def_cfa_offset 88
 264:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 822              		.loc 1 264 3 view .LVU205
 264:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 823              		.loc 1 264 22 is_stmt 0 view .LVU206
 824 0004 3022     		movs	r2, #48
 825 0006 0021     		movs	r1, #0
 826 0008 08A8     		add	r0, sp, #32
ARM GAS  /tmp/ccddJ872.s 			page 43


 827 000a FFF7FEFF 		bl	memset
 828              	.LVL35:
 265:Core/Src/main.c **** 
 829              		.loc 1 265 3 is_stmt 1 view .LVU207
 265:Core/Src/main.c **** 
 830              		.loc 1 265 22 is_stmt 0 view .LVU208
 831 000e 0023     		movs	r3, #0
 832 0010 0393     		str	r3, [sp, #12]
 833 0012 0493     		str	r3, [sp, #16]
 834 0014 0593     		str	r3, [sp, #20]
 835 0016 0693     		str	r3, [sp, #24]
 836 0018 0793     		str	r3, [sp, #28]
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 837              		.loc 1 269 3 is_stmt 1 view .LVU209
 838              	.LBB11:
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 839              		.loc 1 269 3 view .LVU210
 840 001a 0193     		str	r3, [sp, #4]
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 841              		.loc 1 269 3 view .LVU211
 842 001c 1E4A     		ldr	r2, .L60
 843 001e 116C     		ldr	r1, [r2, #64]
 844 0020 41F08051 		orr	r1, r1, #268435456
 845 0024 1164     		str	r1, [r2, #64]
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 846              		.loc 1 269 3 view .LVU212
 847 0026 126C     		ldr	r2, [r2, #64]
 848 0028 02F08052 		and	r2, r2, #268435456
 849 002c 0192     		str	r2, [sp, #4]
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 850              		.loc 1 269 3 view .LVU213
 851 002e 019A     		ldr	r2, [sp, #4]
 852              	.LBE11:
 269:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 853              		.loc 1 269 3 view .LVU214
 270:Core/Src/main.c **** 
 854              		.loc 1 270 3 view .LVU215
 855              	.LBB12:
 270:Core/Src/main.c **** 
 856              		.loc 1 270 3 view .LVU216
 857 0030 0293     		str	r3, [sp, #8]
 270:Core/Src/main.c **** 
 858              		.loc 1 270 3 view .LVU217
 859 0032 1A4A     		ldr	r2, .L60+4
 860 0034 1168     		ldr	r1, [r2]
 861 0036 41F44041 		orr	r1, r1, #49152
 862 003a 1160     		str	r1, [r2]
 270:Core/Src/main.c **** 
 863              		.loc 1 270 3 view .LVU218
 864 003c 1268     		ldr	r2, [r2]
 865 003e 02F44042 		and	r2, r2, #49152
 866 0042 0292     		str	r2, [sp, #8]
 270:Core/Src/main.c **** 
 867              		.loc 1 270 3 view .LVU219
 868 0044 029A     		ldr	r2, [sp, #8]
 869              	.LBE12:
 270:Core/Src/main.c **** 
ARM GAS  /tmp/ccddJ872.s 			page 44


 870              		.loc 1 270 3 view .LVU220
 275:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 871              		.loc 1 275 3 view .LVU221
 275:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 872              		.loc 1 275 36 is_stmt 0 view .LVU222
 873 0046 0221     		movs	r1, #2
 874 0048 0891     		str	r1, [sp, #32]
 276:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 875              		.loc 1 276 3 is_stmt 1 view .LVU223
 276:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 876              		.loc 1 276 30 is_stmt 0 view .LVU224
 877 004a 0122     		movs	r2, #1
 878 004c 0B92     		str	r2, [sp, #44]
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 879              		.loc 1 277 3 is_stmt 1 view .LVU225
 277:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 880              		.loc 1 277 41 is_stmt 0 view .LVU226
 881 004e 1022     		movs	r2, #16
 882 0050 0C92     		str	r2, [sp, #48]
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 883              		.loc 1 278 3 is_stmt 1 view .LVU227
 278:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 884              		.loc 1 278 34 is_stmt 0 view .LVU228
 885 0052 0E91     		str	r1, [sp, #56]
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 886              		.loc 1 279 3 is_stmt 1 view .LVU229
 279:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 887              		.loc 1 279 35 is_stmt 0 view .LVU230
 888 0054 0F93     		str	r3, [sp, #60]
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 889              		.loc 1 280 3 is_stmt 1 view .LVU231
 280:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 890              		.loc 1 280 30 is_stmt 0 view .LVU232
 891 0056 1092     		str	r2, [sp, #64]
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 892              		.loc 1 281 3 is_stmt 1 view .LVU233
 281:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 893              		.loc 1 281 30 is_stmt 0 view .LVU234
 894 0058 4FF4A873 		mov	r3, #336
 895 005c 1193     		str	r3, [sp, #68]
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 896              		.loc 1 282 3 is_stmt 1 view .LVU235
 282:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 897              		.loc 1 282 30 is_stmt 0 view .LVU236
 898 005e 0423     		movs	r3, #4
 899 0060 1293     		str	r3, [sp, #72]
 283:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 900              		.loc 1 283 3 is_stmt 1 view .LVU237
 283:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 901              		.loc 1 283 30 is_stmt 0 view .LVU238
 902 0062 1393     		str	r3, [sp, #76]
 284:Core/Src/main.c ****   {
 903              		.loc 1 284 3 is_stmt 1 view .LVU239
 284:Core/Src/main.c ****   {
 904              		.loc 1 284 7 is_stmt 0 view .LVU240
 905 0064 08A8     		add	r0, sp, #32
 906 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/ccddJ872.s 			page 45


 907              	.LVL36:
 284:Core/Src/main.c ****   {
 908              		.loc 1 284 6 discriminator 1 view .LVU241
 909 006a 80B9     		cbnz	r0, .L58
 291:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 910              		.loc 1 291 3 is_stmt 1 view .LVU242
 291:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 911              		.loc 1 291 31 is_stmt 0 view .LVU243
 912 006c 0F23     		movs	r3, #15
 913 006e 0393     		str	r3, [sp, #12]
 293:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 914              		.loc 1 293 3 is_stmt 1 view .LVU244
 293:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 915              		.loc 1 293 34 is_stmt 0 view .LVU245
 916 0070 0221     		movs	r1, #2
 917 0072 0491     		str	r1, [sp, #16]
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 918              		.loc 1 294 3 is_stmt 1 view .LVU246
 294:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 919              		.loc 1 294 35 is_stmt 0 view .LVU247
 920 0074 0023     		movs	r3, #0
 921 0076 0593     		str	r3, [sp, #20]
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 922              		.loc 1 295 3 is_stmt 1 view .LVU248
 295:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 923              		.loc 1 295 36 is_stmt 0 view .LVU249
 924 0078 4FF48052 		mov	r2, #4096
 925 007c 0692     		str	r2, [sp, #24]
 296:Core/Src/main.c **** 
 926              		.loc 1 296 3 is_stmt 1 view .LVU250
 296:Core/Src/main.c **** 
 927              		.loc 1 296 36 is_stmt 0 view .LVU251
 928 007e 0793     		str	r3, [sp, #28]
 298:Core/Src/main.c ****   {
 929              		.loc 1 298 3 is_stmt 1 view .LVU252
 298:Core/Src/main.c ****   {
 930              		.loc 1 298 7 is_stmt 0 view .LVU253
 931 0080 03A8     		add	r0, sp, #12
 932 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 933              	.LVL37:
 298:Core/Src/main.c ****   {
 934              		.loc 1 298 6 discriminator 1 view .LVU254
 935 0086 20B9     		cbnz	r0, .L59
 302:Core/Src/main.c **** 
 936              		.loc 1 302 1 view .LVU255
 937 0088 15B0     		add	sp, sp, #84
 938              		.cfi_remember_state
 939              		.cfi_def_cfa_offset 4
 940              		@ sp needed
 941 008a 5DF804FB 		ldr	pc, [sp], #4
 942              	.L58:
 943              		.cfi_restore_state
 286:Core/Src/main.c ****   }
 944              		.loc 1 286 5 is_stmt 1 view .LVU256
 945 008e FFF7FEFF 		bl	Error_Handler
 946              	.LVL38:
 947              	.L59:
ARM GAS  /tmp/ccddJ872.s 			page 46


 300:Core/Src/main.c ****   }
 948              		.loc 1 300 5 view .LVU257
 949 0092 FFF7FEFF 		bl	Error_Handler
 950              	.LVL39:
 951              	.L61:
 952 0096 00BF     		.align	2
 953              	.L60:
 954 0098 00380240 		.word	1073887232
 955 009c 00700040 		.word	1073770496
 956              		.cfi_endproc
 957              	.LFE228:
 959              		.section	.text.main,"ax",%progbits
 960              		.align	1
 961              		.global	main
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 966              	main:
 967              	.LFB227:
 175:Core/Src/main.c **** 
 968              		.loc 1 175 1 view -0
 969              		.cfi_startproc
 970              		@ Volatile: function does not return.
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973 0000 08B5     		push	{r3, lr}
 974              		.cfi_def_cfa_offset 8
 975              		.cfi_offset 3, -8
 976              		.cfi_offset 14, -4
 184:Core/Src/main.c **** 
 977              		.loc 1 184 3 view .LVU259
 978 0002 FFF7FEFF 		bl	HAL_Init
 979              	.LVL40:
 191:Core/Src/main.c **** 
 980              		.loc 1 191 3 view .LVU260
 981 0006 FFF7FEFF 		bl	SystemClock_Config
 982              	.LVL41:
 198:Core/Src/main.c ****   MX_DMA_Init();
 983              		.loc 1 198 3 view .LVU261
 984 000a FFF7FEFF 		bl	MX_GPIO_Init
 985              	.LVL42:
 199:Core/Src/main.c ****   MX_USART2_UART_Init();
 986              		.loc 1 199 3 view .LVU262
 987 000e FFF7FEFF 		bl	MX_DMA_Init
 988              	.LVL43:
 200:Core/Src/main.c ****   MX_ADC1_Init();
 989              		.loc 1 200 3 view .LVU263
 990 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 991              	.LVL44:
 201:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 992              		.loc 1 201 3 view .LVU264
 993 0016 FFF7FEFF 		bl	MX_ADC1_Init
 994              	.LVL45:
 206:Core/Src/main.c ****   HAL_Delay(500);
 995              		.loc 1 206 3 view .LVU265
 996 001a 164C     		ldr	r4, .L65
 997 001c 2021     		movs	r1, #32
ARM GAS  /tmp/ccddJ872.s 			page 47


 998 001e 2046     		mov	r0, r4
 999 0020 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1000              	.LVL46:
 207:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 1001              		.loc 1 207 3 view .LVU266
 1002 0024 4FF4FA70 		mov	r0, #500
 1003 0028 FFF7FEFF 		bl	HAL_Delay
 1004              	.LVL47:
 208:Core/Src/main.c ****   HAL_Delay(500);
 1005              		.loc 1 208 3 view .LVU267
 1006 002c 2021     		movs	r1, #32
 1007 002e 2046     		mov	r0, r4
 1008 0030 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1009              	.LVL48:
 209:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 1010              		.loc 1 209 3 view .LVU268
 1011 0034 4FF4FA70 		mov	r0, #500
 1012 0038 FFF7FEFF 		bl	HAL_Delay
 1013              	.LVL49:
 210:Core/Src/main.c ****   HAL_Delay(500);
 1014              		.loc 1 210 3 view .LVU269
 1015 003c 2021     		movs	r1, #32
 1016 003e 2046     		mov	r0, r4
 1017 0040 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1018              	.LVL50:
 211:Core/Src/main.c ****   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 1019              		.loc 1 211 3 view .LVU270
 1020 0044 4FF4FA70 		mov	r0, #500
 1021 0048 FFF7FEFF 		bl	HAL_Delay
 1022              	.LVL51:
 212:Core/Src/main.c ****   HAL_Delay(500);
 1023              		.loc 1 212 3 view .LVU271
 1024 004c 2021     		movs	r1, #32
 1025 004e 2046     		mov	r0, r4
 1026 0050 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1027              	.LVL52:
 213:Core/Src/main.c ****   
 1028              		.loc 1 213 3 view .LVU272
 1029 0054 4FF4FA70 		mov	r0, #500
 1030 0058 FFF7FEFF 		bl	HAL_Delay
 1031              	.LVL53:
 216:Core/Src/main.c ****   HAL_UART_Receive_IT(&huart2, (uint8_t *)cli_command, 1);
 1032              		.loc 1 216 3 view .LVU273
 1033 005c 0122     		movs	r2, #1
 1034 005e 0649     		ldr	r1, .L65+4
 1035 0060 0648     		ldr	r0, .L65+8
 1036 0062 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1037              	.LVL54:
 217:Core/Src/main.c ****   /* USER CODE END 2 */
 1038              		.loc 1 217 3 view .LVU274
 1039 0066 0122     		movs	r2, #1
 1040 0068 0549     		ldr	r1, .L65+12
 1041 006a 0648     		ldr	r0, .L65+16
 1042 006c FFF7FEFF 		bl	HAL_UART_Receive_IT
 1043              	.LVL55:
 1044              	.L63:
 223:Core/Src/main.c ****   {
ARM GAS  /tmp/ccddJ872.s 			page 48


 1045              		.loc 1 223 3 view .LVU275
 254:Core/Src/main.c ****   /* USER CODE END 3 */
 1046              		.loc 1 254 3 view .LVU276
 223:Core/Src/main.c ****   {
 1047              		.loc 1 223 9 view .LVU277
 1048 0070 FEE7     		b	.L63
 1049              	.L66:
 1050 0072 00BF     		.align	2
 1051              	.L65:
 1052 0074 00000240 		.word	1073872896
 1053 0078 00000000 		.word	adcBuffer
 1054 007c 00000000 		.word	hadc1
 1055 0080 00000000 		.word	cli_command
 1056 0084 00000000 		.word	huart2
 1057              		.cfi_endproc
 1058              	.LFE227:
 1060              		.global	msg_buffer
 1061              		.section	.bss.msg_buffer,"aw",%nobits
 1062              		.align	2
 1065              	msg_buffer:
 1066 0000 00000000 		.space	50
 1066      00000000 
 1066      00000000 
 1066      00000000 
 1066      00000000 
 1067              		.global	cli_command
 1068              		.section	.bss.cli_command,"aw",%nobits
 1069              		.align	2
 1072              	cli_command:
 1073 0000 00000000 		.space	50
 1073      00000000 
 1073      00000000 
 1073      00000000 
 1073      00000000 
 1074              		.global	cli_index
 1075              		.section	.bss.cli_index,"aw",%nobits
 1078              	cli_index:
 1079 0000 00       		.space	1
 1080              		.global	currentFilterMode
 1081              		.section	.bss.currentFilterMode,"aw",%nobits
 1084              	currentFilterMode:
 1085 0000 00       		.space	1
 1086              		.global	sum
 1087              		.section	.bss.sum,"aw",%nobits
 1088              		.align	2
 1091              	sum:
 1092 0000 00000000 		.space	4
 1093              		.global	buffer_index
 1094              		.section	.bss.buffer_index,"aw",%nobits
 1095              		.align	1
 1098              	buffer_index:
 1099 0000 0000     		.space	2
 1100              		.global	adc_moving_average
 1101              		.section	.bss.adc_moving_average,"aw",%nobits
 1102              		.align	2
 1105              	adc_moving_average:
 1106 0000 00000000 		.space	300
ARM GAS  /tmp/ccddJ872.s 			page 49


 1106      00000000 
 1106      00000000 
 1106      00000000 
 1106      00000000 
 1107              		.global	adcBuffer
 1108              		.section	.bss.adcBuffer,"aw",%nobits
 1109              		.align	2
 1112              	adcBuffer:
 1113 0000 00000000 		.space	4
 1114              		.global	lastDigitalValue
 1115              		.section	.bss.lastDigitalValue,"aw",%nobits
 1116              		.align	1
 1119              	lastDigitalValue:
 1120 0000 0000     		.space	2
 1121              		.global	lastAnalogValue
 1122              		.section	.bss.lastAnalogValue,"aw",%nobits
 1123              		.align	1
 1126              	lastAnalogValue:
 1127 0000 0000     		.space	2
 1128              		.global	huart2
 1129              		.section	.bss.huart2,"aw",%nobits
 1130              		.align	2
 1133              	huart2:
 1134 0000 00000000 		.space	72
 1134      00000000 
 1134      00000000 
 1134      00000000 
 1134      00000000 
 1135              		.global	hdma_adc1
 1136              		.section	.bss.hdma_adc1,"aw",%nobits
 1137              		.align	2
 1140              	hdma_adc1:
 1141 0000 00000000 		.space	96
 1141      00000000 
 1141      00000000 
 1141      00000000 
 1141      00000000 
 1142              		.global	hadc1
 1143              		.section	.bss.hadc1,"aw",%nobits
 1144              		.align	2
 1147              	hadc1:
 1148 0000 00000000 		.space	72
 1148      00000000 
 1148      00000000 
 1148      00000000 
 1148      00000000 
 1149              		.text
 1150              	.Letext0:
 1151              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1152              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1153              		.file 5 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1154              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1155              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1156              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1157              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1158              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1159              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccddJ872.s 			page 50


 1160              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1161              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1162              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1163              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1164              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1165              		.file 17 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1166              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1167              		.file 19 "<built-in>"
ARM GAS  /tmp/ccddJ872.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccddJ872.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccddJ872.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccddJ872.s:200    .text.MX_GPIO_Init:000000d4 $d
     /tmp/ccddJ872.s:207    .text.MX_DMA_Init:00000000 $t
     /tmp/ccddJ872.s:212    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccddJ872.s:258    .text.MX_DMA_Init:00000030 $d
     /tmp/ccddJ872.s:263    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccddJ872.s:269    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccddJ872.s:321    .text.HAL_GPIO_EXTI_Callback:00000028 $d
     /tmp/ccddJ872.s:1119   .bss.lastDigitalValue:00000000 lastDigitalValue
     /tmp/ccddJ872.s:328    .text.HAL_ADC_ConvCpltCallback:00000000 $t
     /tmp/ccddJ872.s:334    .text.HAL_ADC_ConvCpltCallback:00000000 HAL_ADC_ConvCpltCallback
     /tmp/ccddJ872.s:414    .text.HAL_ADC_ConvCpltCallback:00000054 $d
     /tmp/ccddJ872.s:1112   .bss.adcBuffer:00000000 adcBuffer
     /tmp/ccddJ872.s:1126   .bss.lastAnalogValue:00000000 lastAnalogValue
     /tmp/ccddJ872.s:1084   .bss.currentFilterMode:00000000 currentFilterMode
     /tmp/ccddJ872.s:1098   .bss.buffer_index:00000000 buffer_index
     /tmp/ccddJ872.s:1105   .bss.adc_moving_average:00000000 adc_moving_average
     /tmp/ccddJ872.s:1091   .bss.sum:00000000 sum
     /tmp/ccddJ872.s:426    .rodata.handle_cli_command.str1.4:00000000 $d
     /tmp/ccddJ872.s:439    .text.handle_cli_command:00000000 $t
     /tmp/ccddJ872.s:445    .text.handle_cli_command:00000000 handle_cli_command
     /tmp/ccddJ872.s:528    .text.handle_cli_command:0000005c $d
     /tmp/ccddJ872.s:1072   .bss.cli_command:00000000 cli_command
     /tmp/ccddJ872.s:1133   .bss.huart2:00000000 huart2
     /tmp/ccddJ872.s:539    .text.HAL_UART_RxCpltCallback:00000000 $t
     /tmp/ccddJ872.s:545    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
     /tmp/ccddJ872.s:580    .text.HAL_UART_RxCpltCallback:0000001c $d
     /tmp/ccddJ872.s:1078   .bss.cli_index:00000000 cli_index
     /tmp/ccddJ872.s:588    .text.Error_Handler:00000000 $t
     /tmp/ccddJ872.s:594    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccddJ872.s:626    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccddJ872.s:631    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccddJ872.s:685    .text.MX_USART2_UART_Init:0000002c $d
     /tmp/ccddJ872.s:691    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccddJ872.s:696    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccddJ872.s:798    .text.MX_ADC1_Init:00000060 $d
     /tmp/ccddJ872.s:1147   .bss.hadc1:00000000 hadc1
     /tmp/ccddJ872.s:805    .text.SystemClock_Config:00000000 $t
     /tmp/ccddJ872.s:811    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccddJ872.s:954    .text.SystemClock_Config:00000098 $d
     /tmp/ccddJ872.s:960    .text.main:00000000 $t
     /tmp/ccddJ872.s:966    .text.main:00000000 main
     /tmp/ccddJ872.s:1052   .text.main:00000074 $d
     /tmp/ccddJ872.s:1065   .bss.msg_buffer:00000000 msg_buffer
     /tmp/ccddJ872.s:1062   .bss.msg_buffer:00000000 $d
     /tmp/ccddJ872.s:1069   .bss.cli_command:00000000 $d
     /tmp/ccddJ872.s:1079   .bss.cli_index:00000000 $d
     /tmp/ccddJ872.s:1085   .bss.currentFilterMode:00000000 $d
     /tmp/ccddJ872.s:1088   .bss.sum:00000000 $d
     /tmp/ccddJ872.s:1095   .bss.buffer_index:00000000 $d
     /tmp/ccddJ872.s:1102   .bss.adc_moving_average:00000000 $d
     /tmp/ccddJ872.s:1109   .bss.adcBuffer:00000000 $d
     /tmp/ccddJ872.s:1116   .bss.lastDigitalValue:00000000 $d
     /tmp/ccddJ872.s:1123   .bss.lastAnalogValue:00000000 $d
ARM GAS  /tmp/ccddJ872.s 			page 52


     /tmp/ccddJ872.s:1130   .bss.huart2:00000000 $d
     /tmp/ccddJ872.s:1140   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccddJ872.s:1137   .bss.hdma_adc1:00000000 $d
     /tmp/ccddJ872.s:1144   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_GPIO_TogglePin
strcmp
strlen
HAL_UART_Transmit
HAL_UART_Receive_IT
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_Delay
HAL_ADC_Start_DMA
