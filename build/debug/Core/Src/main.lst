ARM GAS  /tmp/ccmvE0UG.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB231:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <time.h> //for random values
  27:Core/Src/main.c **** #include <stdlib.h>
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccmvE0UG.s 			page 2


  32:Core/Src/main.c **** typedef enum {
  33:Core/Src/main.c ****     RAW,
  34:Core/Src/main.c ****     MOVING_AVERAGE,
  35:Core/Src/main.c ****     RANDOM_NOISE
  36:Core/Src/main.c **** } FilterMode;
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** #define ADC_BUFFER_SIZE 300
  43:Core/Src/main.c **** #define MOVING_AVG_SIZE 150
  44:Core/Src/main.c **** #define BUFFER_SIZE 50
  45:Core/Src/main.c **** #define RANDOM_RANGE 300
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  55:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** UART_HandleTypeDef huart2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** //digital and analog variables
  62:Core/Src/main.c **** uint16_t lastAnalogValue = 0; 
  63:Core/Src/main.c **** uint16_t lastDigitalValue = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** uint16_t last_index = 0;//position of last written element on buffer
  66:Core/Src/main.c **** uint32_t adcBuffer[ADC_BUFFER_SIZE];//dma data structure
  67:Core/Src/main.c **** uint8_t disableInterrupt = 0;
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** //moving average variables
  71:Core/Src/main.c **** uint16_t adc_moving_average[MOVING_AVG_SIZE];
  72:Core/Src/main.c **** uint16_t buffer_index = 0;
  73:Core/Src/main.c **** uint32_t sum = 0;
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** //millis for warning state
  77:Core/Src/main.c **** uint32_t lastTimer = 0;
  78:Core/Src/main.c **** uint8_t isWarningState = 0;
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** //filter mode for data variables
  81:Core/Src/main.c **** FilterMode currentFilterMode = RAW;
  82:Core/Src/main.c **** char cli_command[BUFFER_SIZE];
  83:Core/Src/main.c **** u_int8_t sendRequest = 0;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** //debug/info variables
  86:Core/Src/main.c **** char msg_buffer[BUFFER_SIZE];//buffer for serial msg
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* USER CODE END PV */
ARM GAS  /tmp/ccmvE0UG.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  91:Core/Src/main.c **** void SystemClock_Config(void);
  92:Core/Src/main.c **** static void MX_GPIO_Init(void);
  93:Core/Src/main.c **** static void MX_DMA_Init(void);
  94:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  95:Core/Src/main.c **** static void MX_ADC1_Init(void);
  96:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* USER CODE END PFP */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 101:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** /**
 104:Core/Src/main.c ****  * Callback function for gpio digital input
 105:Core/Src/main.c ****  */
 106:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 107:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 108:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 109:Core/Src/main.c ****   }
 110:Core/Src/main.c ****   else if(GPIO_Pin == GPIO_PIN_13){
 111:Core/Src/main.c ****     disableInterrupt = !disableInterrupt;
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****     //activate/deactivate interrupt for dma and set led pin
 114:Core/Src/main.c ****     if(disableInterrupt){
 115:Core/Src/main.c ****       //deactivate
 116:Core/Src/main.c ****       sendRequest = 0;
 117:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****     }else{
 120:Core/Src/main.c ****       //activate
 121:Core/Src/main.c ****       sendRequest = 1;
 122:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 123:Core/Src/main.c ****     }
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   }
 126:Core/Src/main.c **** }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /*
 129:Core/Src/main.c **** void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 130:Core/Src/main.c **** }
 131:Core/Src/main.c **** */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** /**
 134:Core/Src/main.c **** Based on the user input, change the filter mode.
 135:Core/Src/main.c **** If the comand is unknown, the current filter is not changed but
 136:Core/Src/main.c **** a falsse value is returned
 137:Core/Src/main.c **** */
 138:Core/Src/main.c **** u_int8_t handle_cli_command() {
 139:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 140:Core/Src/main.c ****         currentFilterMode = RAW;
 141:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 142:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 143:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 144:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 145:Core/Src/main.c ****     } else {
ARM GAS  /tmp/ccmvE0UG.s 			page 4


 146:Core/Src/main.c ****         //comand not recognized
 147:Core/Src/main.c ****         memset(cli_command, '\0', sizeof(cli_command)); 
 148:Core/Src/main.c ****         return 1;
 149:Core/Src/main.c ****     }
 150:Core/Src/main.c ****     //clear buffer
 151:Core/Src/main.c ****     memset(cli_command, '\0', sizeof(cli_command)); 
 152:Core/Src/main.c ****     return 0;
 153:Core/Src/main.c **** }
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /**
 156:Core/Src/main.c ****  * Callback function to handle the receiving of a comand from the user
 157:Core/Src/main.c ****  * if the command is unknown, restart sending data anyway
 158:Core/Src/main.c ****  */
 159:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 160:Core/Src/main.c **** {
 161:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   if(unknownComand){
 164:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 165:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 166:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 167:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);  
 168:Core/Src/main.c ****   }
 169:Core/Src/main.c ****   else{
 170:Core/Src/main.c ****     sprintf(msg_buffer, "New filter mode: %d\r\n", currentFilterMode);
 171:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 172:Core/Src/main.c ****     sendRequest = 1;
 173:Core/Src/main.c ****     disableInterrupt = 0;
 174:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   //wait for next input
 178:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 179:Core/Src/main.c **** }
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** /* USER CODE END 0 */
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /**
 184:Core/Src/main.c ****   * @brief  The application entry point.
 185:Core/Src/main.c ****   * @retval int
 186:Core/Src/main.c ****   */
 187:Core/Src/main.c **** int main(void)
 188:Core/Src/main.c **** {
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 191:Core/Src/main.c ****   srand(time(NULL)); //set seed for random number generator
 192:Core/Src/main.c ****   /* USER CODE END 1 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 197:Core/Src/main.c ****   HAL_Init();
 198:Core/Src/main.c **** 
 199:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE END Init */
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 5


 203:Core/Src/main.c ****   /* Configure the system clock */
 204:Core/Src/main.c ****   SystemClock_Config();
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE END SysInit */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* Initialize all configured peripherals */
 211:Core/Src/main.c ****   MX_GPIO_Init();
 212:Core/Src/main.c ****   MX_DMA_Init();
 213:Core/Src/main.c ****   MX_USART2_UART_Init();
 214:Core/Src/main.c ****   MX_ADC1_Init();
 215:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   // Initialize the DMA conversion
 218:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 219:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 220:Core/Src/main.c ****   lastTimer = HAL_GetTick();//start time of MCU
 221:Core/Src/main.c ****   /* USER CODE END 2 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* Infinite loop */
 224:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   while (1)
 227:Core/Src/main.c ****   {
 228:Core/Src/main.c ****     /* USER CODE END WHILE */
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 231:Core/Src/main.c ****     if(!disableInterrupt){
 232:Core/Src/main.c ****       last_index = (BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % BUFFER_SIZE;
 233:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
 234:Core/Src/main.c ****       //update moving average if in MOVING_AVERAGE mode
 235:Core/Src/main.c ****       if (currentFilterMode == MOVING_AVERAGE) {
 236:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 237:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 238:Core/Src/main.c ****         sum += lastAnalogValue;
 239:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 240:Core/Src/main.c ****       }
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****       //print analog data
 243:Core/Src/main.c ****       switch (currentFilterMode)
 244:Core/Src/main.c ****       {
 245:Core/Src/main.c ****       case RAW:
 246:Core/Src/main.c ****         sprintf(msg_buffer, "A:%hu\r\n", (u_int16_t)lastAnalogValue);
 247:Core/Src/main.c ****         break;
 248:Core/Src/main.c ****       
 249:Core/Src/main.c ****       case MOVING_AVERAGE:
 250:Core/Src/main.c ****         float moving_avg = (float)sum / MOVING_AVG_SIZE;
 251:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 252:Core/Src/main.c ****         break;
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****       case RANDOM_NOISE:
 255:Core/Src/main.c ****         sprintf(msg_buffer, "A: %hu\r\n", (u_int16_t)(adcBuffer[0] + rand() % RANDOM_RANGE));
 256:Core/Src/main.c ****         break;
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****       default:
 259:Core/Src/main.c ****         break;
ARM GAS  /tmp/ccmvE0UG.s 			page 6


 260:Core/Src/main.c ****       }
 261:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****       //print digital data
 264:Core/Src/main.c ****       sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 265:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 266:Core/Src/main.c ****       
 267:Core/Src/main.c ****       if(lastDigitalValue){
 268:Core/Src/main.c ****         //check if is high for 5 seconds
 269:Core/Src/main.c ****         if(HAL_GetTick() - lastTimer >= 5000){
 270:Core/Src/main.c ****           //warning state
 271:Core/Src/main.c ****           isWarningState = 1;
 272:Core/Src/main.c ****         }
 273:Core/Src/main.c ****       }else{
 274:Core/Src/main.c ****         //reset timer
 275:Core/Src/main.c ****         lastTimer = HAL_GetTick();
 276:Core/Src/main.c ****         isWarningState = 0;
 277:Core/Src/main.c ****       }
 278:Core/Src/main.c ****       
 279:Core/Src/main.c ****       if(isWarningState){
 280:Core/Src/main.c ****         sprintf(msg_buffer, "WARNING STATE!\r\n");
 281:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); 
 282:Core/Src/main.c ****       }
 283:Core/Src/main.c ****     } else {
 284:Core/Src/main.c ****       if(!sendRequest){
 285:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 286:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 287:Core/Src/main.c ****         sendRequest = 1;
 288:Core/Src/main.c ****       }
 289:Core/Src/main.c ****     }
 290:Core/Src/main.c **** 
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   }
 293:Core/Src/main.c ****   /* USER CODE END 3 */
 294:Core/Src/main.c **** }
 295:Core/Src/main.c **** 
 296:Core/Src/main.c **** /**
 297:Core/Src/main.c ****   * @brief System Clock Configuration
 298:Core/Src/main.c ****   * @retval None
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c **** void SystemClock_Config(void)
 301:Core/Src/main.c **** {
 302:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 303:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 306:Core/Src/main.c ****   */
 307:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 308:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 311:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 312:Core/Src/main.c ****   */
 313:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 314:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 315:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccmvE0UG.s 			page 7


 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 322:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 323:Core/Src/main.c ****   {
 324:Core/Src/main.c ****     Error_Handler();
 325:Core/Src/main.c ****   }
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 328:Core/Src/main.c ****   */
 329:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 330:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 331:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 332:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 334:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c **** }
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 344:Core/Src/main.c ****   * @param None
 345:Core/Src/main.c ****   * @retval None
 346:Core/Src/main.c ****   */
 347:Core/Src/main.c **** static void MX_ADC1_Init(void)
 348:Core/Src/main.c **** {
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 361:Core/Src/main.c ****   */
 362:Core/Src/main.c ****   hadc1.Instance = ADC1;
 363:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 364:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 365:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 366:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 367:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 370:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 371:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 372:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 373:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  /tmp/ccmvE0UG.s 			page 8


 374:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 375:Core/Src/main.c ****   {
 376:Core/Src/main.c ****     Error_Handler();
 377:Core/Src/main.c ****   }
 378:Core/Src/main.c **** 
 379:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 380:Core/Src/main.c ****   */
 381:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 382:Core/Src/main.c ****   sConfig.Rank = 1;
 383:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 384:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 385:Core/Src/main.c ****   {
 386:Core/Src/main.c ****     Error_Handler();
 387:Core/Src/main.c ****   }
 388:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 389:Core/Src/main.c **** 
 390:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c **** }
 393:Core/Src/main.c **** 
 394:Core/Src/main.c **** /**
 395:Core/Src/main.c ****   * @brief USART2 Initialization Function
 396:Core/Src/main.c ****   * @param None
 397:Core/Src/main.c ****   * @retval None
 398:Core/Src/main.c ****   */
 399:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 400:Core/Src/main.c **** {
 401:Core/Src/main.c **** 
 402:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 409:Core/Src/main.c ****   huart2.Instance = USART2;
 410:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 411:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 412:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 413:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 414:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 415:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 416:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 417:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 418:Core/Src/main.c ****   {
 419:Core/Src/main.c ****     Error_Handler();
 420:Core/Src/main.c ****   }
 421:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 424:Core/Src/main.c **** 
 425:Core/Src/main.c **** }
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** /**
 428:Core/Src/main.c ****   * Enable DMA controller clock
 429:Core/Src/main.c ****   */
 430:Core/Src/main.c **** static void MX_DMA_Init(void)
ARM GAS  /tmp/ccmvE0UG.s 			page 9


 431:Core/Src/main.c **** {
 432:Core/Src/main.c **** 
 433:Core/Src/main.c ****   /* DMA controller clock enable */
 434:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   /* DMA interrupt init */
 437:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 438:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 439:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 440:Core/Src/main.c **** 
 441:Core/Src/main.c **** }
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** /**
 444:Core/Src/main.c ****   * @brief GPIO Initialization Function
 445:Core/Src/main.c ****   * @param None
 446:Core/Src/main.c ****   * @retval None
 447:Core/Src/main.c ****   */
 448:Core/Src/main.c **** static void MX_GPIO_Init(void)
 449:Core/Src/main.c **** {
  28              		.loc 1 449 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 450:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 450 3 view .LVU1
  41              		.loc 1 450 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 451:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 452:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 453:Core/Src/main.c **** 
 454:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 455:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 455 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 455 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 455 3 view .LVU5
  53 0012 304B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 455 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
ARM GAS  /tmp/ccmvE0UG.s 			page 10


  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 455 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 455 3 view .LVU8
 456:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 456 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 456 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 456 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 456 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 456 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 456 3 view .LVU14
 457:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 457 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 457 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 457 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 457 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 457 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 457 3 view .LVU20
 458:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 458 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 458 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 458 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 458 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 458 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 458 3 view .LVU26
 459:Core/Src/main.c **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 11


 460:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 461:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 461 3 view .LVU27
 114 0062 1D4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 462:Core/Src/main.c **** 
 463:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 464:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 464 3 view .LVU28
 121              		.loc 1 464 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 465:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 465 3 is_stmt 1 view .LVU30
 125              		.loc 1 465 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 466:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 466 3 is_stmt 1 view .LVU32
 129              		.loc 1 466 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 467:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 467 3 is_stmt 1 view .LVU34
 132 007c 174E     		ldr	r6, .L3+8
 133 007e 05A9     		add	r1, sp, #20
 134 0080 3046     		mov	r0, r6
 135 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /*Configure GPIO pin : PC2 */
 470:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 137              		.loc 1 470 3 view .LVU35
 138              		.loc 1 470 23 is_stmt 0 view .LVU36
 139 0086 0423     		movs	r3, #4
 140 0088 0593     		str	r3, [sp, #20]
 471:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 141              		.loc 1 471 3 is_stmt 1 view .LVU37
 142              		.loc 1 471 24 is_stmt 0 view .LVU38
 143 008a 4FF44413 		mov	r3, #3211264
 144 008e 0693     		str	r3, [sp, #24]
 472:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 472 3 is_stmt 1 view .LVU39
 146              		.loc 1 472 24 is_stmt 0 view .LVU40
 147 0090 0794     		str	r4, [sp, #28]
 473:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 148              		.loc 1 473 3 is_stmt 1 view .LVU41
 149 0092 05A9     		add	r1, sp, #20
 150 0094 3046     		mov	r0, r6
 151 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL2:
 474:Core/Src/main.c **** 
 475:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 476:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
ARM GAS  /tmp/ccmvE0UG.s 			page 12


 153              		.loc 1 476 3 view .LVU42
 154              		.loc 1 476 23 is_stmt 0 view .LVU43
 155 009a 2023     		movs	r3, #32
 156 009c 0593     		str	r3, [sp, #20]
 477:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 157              		.loc 1 477 3 is_stmt 1 view .LVU44
 158              		.loc 1 477 24 is_stmt 0 view .LVU45
 159 009e 0123     		movs	r3, #1
 160 00a0 0693     		str	r3, [sp, #24]
 478:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 478 3 is_stmt 1 view .LVU46
 162              		.loc 1 478 24 is_stmt 0 view .LVU47
 163 00a2 0794     		str	r4, [sp, #28]
 479:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 164              		.loc 1 479 3 is_stmt 1 view .LVU48
 165              		.loc 1 479 25 is_stmt 0 view .LVU49
 166 00a4 0894     		str	r4, [sp, #32]
 480:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 480 3 is_stmt 1 view .LVU50
 168 00a6 05A9     		add	r1, sp, #20
 169 00a8 2846     		mov	r0, r5
 170 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL3:
 481:Core/Src/main.c **** 
 482:Core/Src/main.c ****   /* EXTI interrupt init*/
 483:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 172              		.loc 1 483 3 view .LVU51
 173 00ae 2246     		mov	r2, r4
 174 00b0 2146     		mov	r1, r4
 175 00b2 0820     		movs	r0, #8
 176 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 484:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 178              		.loc 1 484 3 view .LVU52
 179 00b8 0820     		movs	r0, #8
 180 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL5:
 485:Core/Src/main.c **** 
 486:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 182              		.loc 1 486 3 view .LVU53
 183 00be 2246     		mov	r2, r4
 184 00c0 2146     		mov	r1, r4
 185 00c2 2820     		movs	r0, #40
 186 00c4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL6:
 487:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 188              		.loc 1 487 3 view .LVU54
 189 00c8 2820     		movs	r0, #40
 190 00ca FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL7:
 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 490:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 491:Core/Src/main.c **** }
 192              		.loc 1 491 1 is_stmt 0 view .LVU55
 193 00ce 0AB0     		add	sp, sp, #40
 194              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccmvE0UG.s 			page 13


 195              		@ sp needed
 196 00d0 70BD     		pop	{r4, r5, r6, pc}
 197              	.L4:
 198 00d2 00BF     		.align	2
 199              	.L3:
 200 00d4 00380240 		.word	1073887232
 201 00d8 00000240 		.word	1073872896
 202 00dc 00080240 		.word	1073874944
 203              		.cfi_endproc
 204              	.LFE231:
 206              		.section	.text.MX_DMA_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_DMA_Init:
 213              	.LFB230:
 431:Core/Src/main.c **** 
 214              		.loc 1 431 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 8
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 00B5     		push	{lr}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              		.cfi_def_cfa_offset 16
 434:Core/Src/main.c **** 
 223              		.loc 1 434 3 view .LVU57
 224              	.LBB8:
 434:Core/Src/main.c **** 
 225              		.loc 1 434 3 view .LVU58
 226 0004 0021     		movs	r1, #0
 227 0006 0191     		str	r1, [sp, #4]
 434:Core/Src/main.c **** 
 228              		.loc 1 434 3 view .LVU59
 229 0008 094B     		ldr	r3, .L7
 230 000a 1A6B     		ldr	r2, [r3, #48]
 231 000c 42F48002 		orr	r2, r2, #4194304
 232 0010 1A63     		str	r2, [r3, #48]
 434:Core/Src/main.c **** 
 233              		.loc 1 434 3 view .LVU60
 234 0012 1B6B     		ldr	r3, [r3, #48]
 235 0014 03F48003 		and	r3, r3, #4194304
 236 0018 0193     		str	r3, [sp, #4]
 434:Core/Src/main.c **** 
 237              		.loc 1 434 3 view .LVU61
 238 001a 019B     		ldr	r3, [sp, #4]
 239              	.LBE8:
 434:Core/Src/main.c **** 
 240              		.loc 1 434 3 view .LVU62
 438:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 241              		.loc 1 438 3 view .LVU63
 242 001c 0A46     		mov	r2, r1
 243 001e 3820     		movs	r0, #56
 244 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
ARM GAS  /tmp/ccmvE0UG.s 			page 14


 439:Core/Src/main.c **** 
 246              		.loc 1 439 3 view .LVU64
 247 0024 3820     		movs	r0, #56
 248 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 441:Core/Src/main.c **** 
 250              		.loc 1 441 1 is_stmt 0 view .LVU65
 251 002a 03B0     		add	sp, sp, #12
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 002c 5DF804FB 		ldr	pc, [sp], #4
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0030 00380240 		.word	1073887232
 259              		.cfi_endproc
 260              	.LFE230:
 262              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_GPIO_EXTI_Callback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 269              	HAL_GPIO_EXTI_Callback:
 270              	.LVL10:
 271              	.LFB223:
 106:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 272              		.loc 1 106 47 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 106:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 276              		.loc 1 106 47 is_stmt 0 view .LVU67
 277 0000 08B5     		push	{r3, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
 107:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 281              		.loc 1 107 3 is_stmt 1 view .LVU68
 107:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 282              		.loc 1 107 5 is_stmt 0 view .LVU69
 283 0002 0428     		cmp	r0, #4
 284 0004 03D0     		beq	.L14
 110:Core/Src/main.c ****     disableInterrupt = !disableInterrupt;
 285              		.loc 1 110 8 is_stmt 1 view .LVU70
 110:Core/Src/main.c ****     disableInterrupt = !disableInterrupt;
 286              		.loc 1 110 10 is_stmt 0 view .LVU71
 287 0006 B0F5005F 		cmp	r0, #8192
 288 000a 07D0     		beq	.L15
 289              	.LVL11:
 290              	.L9:
 126:Core/Src/main.c **** 
 291              		.loc 1 126 1 view .LVU72
 292 000c 08BD     		pop	{r3, pc}
 293              	.LVL12:
 294              	.L14:
 108:Core/Src/main.c ****   }
ARM GAS  /tmp/ccmvE0UG.s 			page 15


 295              		.loc 1 108 5 is_stmt 1 view .LVU73
 108:Core/Src/main.c ****   }
 296              		.loc 1 108 24 is_stmt 0 view .LVU74
 297 000e 0421     		movs	r1, #4
 298 0010 0E48     		ldr	r0, .L16
 299              	.LVL13:
 108:Core/Src/main.c ****   }
 300              		.loc 1 108 24 view .LVU75
 301 0012 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 302              	.LVL14:
 108:Core/Src/main.c ****   }
 303              		.loc 1 108 22 discriminator 1 view .LVU76
 304 0016 0E4B     		ldr	r3, .L16+4
 305 0018 1880     		strh	r0, [r3]	@ movhi
 306 001a F7E7     		b	.L9
 307              	.LVL15:
 308              	.L15:
 111:Core/Src/main.c **** 
 309              		.loc 1 111 5 is_stmt 1 view .LVU77
 111:Core/Src/main.c **** 
 310              		.loc 1 111 24 is_stmt 0 view .LVU78
 311 001c 0D4A     		ldr	r2, .L16+8
 312 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 313 0020 B3FA83F3 		clz	r3, r3
 314 0024 5B09     		lsrs	r3, r3, #5
 111:Core/Src/main.c **** 
 315              		.loc 1 111 22 view .LVU79
 316 0026 1370     		strb	r3, [r2]
 114:Core/Src/main.c ****       //deactivate
 317              		.loc 1 114 5 is_stmt 1 view .LVU80
 114:Core/Src/main.c ****       //deactivate
 318              		.loc 1 114 7 is_stmt 0 view .LVU81
 319 0028 33B1     		cbz	r3, .L12
 116:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 320              		.loc 1 116 7 is_stmt 1 view .LVU82
 116:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 321              		.loc 1 116 19 is_stmt 0 view .LVU83
 322 002a 0B4B     		ldr	r3, .L16+12
 323 002c 0022     		movs	r2, #0
 324 002e 1A70     		strb	r2, [r3]
 117:Core/Src/main.c **** 
 325              		.loc 1 117 7 is_stmt 1 view .LVU84
 326 0030 0A48     		ldr	r0, .L16+16
 327              	.LVL16:
 117:Core/Src/main.c **** 
 328              		.loc 1 117 7 is_stmt 0 view .LVU85
 329 0032 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 330              	.LVL17:
 331 0036 E9E7     		b	.L9
 332              	.LVL18:
 333              	.L12:
 121:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 334              		.loc 1 121 7 is_stmt 1 view .LVU86
 121:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 335              		.loc 1 121 19 is_stmt 0 view .LVU87
 336 0038 074B     		ldr	r3, .L16+12
 337 003a 0122     		movs	r2, #1
ARM GAS  /tmp/ccmvE0UG.s 			page 16


 338 003c 1A70     		strb	r2, [r3]
 122:Core/Src/main.c ****     }
 339              		.loc 1 122 7 is_stmt 1 view .LVU88
 340 003e 4FF49672 		mov	r2, #300
 341 0042 0749     		ldr	r1, .L16+20
 342 0044 0548     		ldr	r0, .L16+16
 343              	.LVL19:
 122:Core/Src/main.c ****     }
 344              		.loc 1 122 7 is_stmt 0 view .LVU89
 345 0046 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 346              	.LVL20:
 126:Core/Src/main.c **** 
 347              		.loc 1 126 1 view .LVU90
 348 004a DFE7     		b	.L9
 349              	.L17:
 350              		.align	2
 351              	.L16:
 352 004c 00080240 		.word	1073874944
 353 0050 00000000 		.word	lastDigitalValue
 354 0054 00000000 		.word	disableInterrupt
 355 0058 00000000 		.word	sendRequest
 356 005c 00000000 		.word	hadc1
 357 0060 00000000 		.word	adcBuffer
 358              		.cfi_endproc
 359              	.LFE223:
 361              		.section	.rodata.handle_cli_command.str1.4,"aMS",%progbits,1
 362              		.align	2
 363              	.LC0:
 364 0000 72617700 		.ascii	"raw\000"
 365              		.align	2
 366              	.LC1:
 367 0004 6D6F7669 		.ascii	"moving average\000"
 367      6E672061 
 367      76657261 
 367      676500
 368 0013 00       		.align	2
 369              	.LC2:
 370 0014 72616E64 		.ascii	"random noise\000"
 370      6F6D206E 
 370      6F697365 
 370      00
 371              		.section	.text.handle_cli_command,"ax",%progbits
 372              		.align	1
 373              		.global	handle_cli_command
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 378              	handle_cli_command:
 379              	.LFB224:
 138:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 380              		.loc 1 138 31 is_stmt 1 view -0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 0, uses_anonymous_args = 0
 384 0000 08B5     		push	{r3, lr}
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 3, -8
ARM GAS  /tmp/ccmvE0UG.s 			page 17


 387              		.cfi_offset 14, -4
 139:Core/Src/main.c ****         currentFilterMode = RAW;
 388              		.loc 1 139 5 view .LVU92
 139:Core/Src/main.c ****         currentFilterMode = RAW;
 389              		.loc 1 139 9 is_stmt 0 view .LVU93
 390 0002 1449     		ldr	r1, .L25
 391 0004 1448     		ldr	r0, .L25+4
 392 0006 FFF7FEFF 		bl	strcmp
 393              	.LVL21:
 139:Core/Src/main.c ****         currentFilterMode = RAW;
 394              		.loc 1 139 8 discriminator 1 view .LVU94
 395 000a 48B9     		cbnz	r0, .L19
 140:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 396              		.loc 1 140 9 is_stmt 1 view .LVU95
 140:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 397              		.loc 1 140 27 is_stmt 0 view .LVU96
 398 000c 134B     		ldr	r3, .L25+8
 399 000e 0022     		movs	r2, #0
 400 0010 1A70     		strb	r2, [r3]
 401              	.L20:
 151:Core/Src/main.c ****     return 0;
 402              		.loc 1 151 5 is_stmt 1 view .LVU97
 403 0012 3222     		movs	r2, #50
 404 0014 0021     		movs	r1, #0
 405 0016 1048     		ldr	r0, .L25+4
 406 0018 FFF7FEFF 		bl	memset
 407              	.LVL22:
 152:Core/Src/main.c **** }
 408              		.loc 1 152 5 view .LVU98
 152:Core/Src/main.c **** }
 409              		.loc 1 152 12 is_stmt 0 view .LVU99
 410 001c 0020     		movs	r0, #0
 411              	.L23:
 153:Core/Src/main.c **** 
 412              		.loc 1 153 1 view .LVU100
 413 001e 08BD     		pop	{r3, pc}
 414              	.L19:
 141:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 415              		.loc 1 141 12 is_stmt 1 view .LVU101
 141:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 416              		.loc 1 141 16 is_stmt 0 view .LVU102
 417 0020 0F49     		ldr	r1, .L25+12
 418 0022 0D48     		ldr	r0, .L25+4
 419 0024 FFF7FEFF 		bl	strcmp
 420              	.LVL23:
 141:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 421              		.loc 1 141 15 discriminator 1 view .LVU103
 422 0028 18B9     		cbnz	r0, .L21
 142:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 423              		.loc 1 142 9 is_stmt 1 view .LVU104
 142:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 424              		.loc 1 142 27 is_stmt 0 view .LVU105
 425 002a 0C4B     		ldr	r3, .L25+8
 426 002c 0122     		movs	r2, #1
 427 002e 1A70     		strb	r2, [r3]
 428 0030 EFE7     		b	.L20
 429              	.L21:
ARM GAS  /tmp/ccmvE0UG.s 			page 18


 143:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 430              		.loc 1 143 12 is_stmt 1 view .LVU106
 143:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 431              		.loc 1 143 16 is_stmt 0 view .LVU107
 432 0032 0C49     		ldr	r1, .L25+16
 433 0034 0848     		ldr	r0, .L25+4
 434 0036 FFF7FEFF 		bl	strcmp
 435              	.LVL24:
 143:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 436              		.loc 1 143 15 discriminator 1 view .LVU108
 437 003a 18B9     		cbnz	r0, .L22
 144:Core/Src/main.c ****     } else {
 438              		.loc 1 144 9 is_stmt 1 view .LVU109
 144:Core/Src/main.c ****     } else {
 439              		.loc 1 144 27 is_stmt 0 view .LVU110
 440 003c 074B     		ldr	r3, .L25+8
 441 003e 0222     		movs	r2, #2
 442 0040 1A70     		strb	r2, [r3]
 443 0042 E6E7     		b	.L20
 444              	.L22:
 147:Core/Src/main.c ****         return 1;
 445              		.loc 1 147 9 is_stmt 1 view .LVU111
 446 0044 3222     		movs	r2, #50
 447 0046 0021     		movs	r1, #0
 448 0048 0348     		ldr	r0, .L25+4
 449 004a FFF7FEFF 		bl	memset
 450              	.LVL25:
 148:Core/Src/main.c ****     }
 451              		.loc 1 148 9 view .LVU112
 148:Core/Src/main.c ****     }
 452              		.loc 1 148 16 is_stmt 0 view .LVU113
 453 004e 0120     		movs	r0, #1
 454 0050 E5E7     		b	.L23
 455              	.L26:
 456 0052 00BF     		.align	2
 457              	.L25:
 458 0054 00000000 		.word	.LC0
 459 0058 00000000 		.word	cli_command
 460 005c 00000000 		.word	currentFilterMode
 461 0060 04000000 		.word	.LC1
 462 0064 14000000 		.word	.LC2
 463              		.cfi_endproc
 464              	.LFE224:
 466              		.section	.rodata.HAL_UARTEx_RxEventCallback.str1.4,"aMS",%progbits,1
 467              		.align	2
 468              	.LC3:
 469 0000 436F6D6D 		.ascii	"Command not valid. Try again.\015\012\000"
 469      616E6420 
 469      6E6F7420 
 469      76616C69 
 469      642E2054 
 470              		.align	2
 471              	.LC4:
 472 0020 433A0D0A 		.ascii	"C:\015\012\000"
 472      00
 473 0025 000000   		.align	2
 474              	.LC5:
ARM GAS  /tmp/ccmvE0UG.s 			page 19


 475 0028 4E657720 		.ascii	"New filter mode: %d\015\012\000"
 475      66696C74 
 475      6572206D 
 475      6F64653A 
 475      2025640D 
 476              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 477              		.align	1
 478              		.global	HAL_UARTEx_RxEventCallback
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 483              	HAL_UARTEx_RxEventCallback:
 484              	.LVL26:
 485              	.LFB225:
 160:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 486              		.loc 1 160 1 is_stmt 1 view -0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 160:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 490              		.loc 1 160 1 is_stmt 0 view .LVU115
 491 0000 38B5     		push	{r3, r4, r5, lr}
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 3, -16
 494              		.cfi_offset 4, -12
 495              		.cfi_offset 5, -8
 496              		.cfi_offset 14, -4
 161:Core/Src/main.c **** 
 497              		.loc 1 161 3 is_stmt 1 view .LVU116
 161:Core/Src/main.c **** 
 498              		.loc 1 161 27 is_stmt 0 view .LVU117
 499 0002 FFF7FEFF 		bl	handle_cli_command
 500              	.LVL27:
 163:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 501              		.loc 1 163 3 is_stmt 1 view .LVU118
 163:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 502              		.loc 1 163 5 is_stmt 0 view .LVU119
 503 0006 48B3     		cbz	r0, .L28
 164:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 504              		.loc 1 164 5 is_stmt 1 view .LVU120
 505 0008 234D     		ldr	r5, .L31
 506 000a AC46     		mov	ip, r5
 507 000c 234C     		ldr	r4, .L31+4
 508 000e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 509              	.LVL28:
 164:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 510              		.loc 1 164 5 is_stmt 0 view .LVU121
 511 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 512 0014 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 513 0018 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 165:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 514              		.loc 1 165 5 is_stmt 1 view .LVU122
 165:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 515              		.loc 1 165 55 is_stmt 0 view .LVU123
 516 001c 2846     		mov	r0, r5
 517 001e FFF7FEFF 		bl	strlen
 518              	.LVL29:
ARM GAS  /tmp/ccmvE0UG.s 			page 20


 165:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 519              		.loc 1 165 5 discriminator 1 view .LVU124
 520 0022 1F4C     		ldr	r4, .L31+8
 521 0024 4FF0FF33 		mov	r3, #-1
 522 0028 82B2     		uxth	r2, r0
 523 002a 2946     		mov	r1, r5
 524 002c 2046     		mov	r0, r4
 525 002e FFF7FEFF 		bl	HAL_UART_Transmit
 526              	.LVL30:
 166:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);  
 527              		.loc 1 166 5 is_stmt 1 view .LVU125
 528 0032 1C4B     		ldr	r3, .L31+12
 529 0034 93E80300 		ldm	r3, {r0, r1}
 530 0038 2860     		str	r0, [r5]
 531 003a 2971     		strb	r1, [r5, #4]
 167:Core/Src/main.c ****   }
 532              		.loc 1 167 5 view .LVU126
 167:Core/Src/main.c ****   }
 533              		.loc 1 167 55 is_stmt 0 view .LVU127
 534 003c 2846     		mov	r0, r5
 535 003e FFF7FEFF 		bl	strlen
 536              	.LVL31:
 167:Core/Src/main.c ****   }
 537              		.loc 1 167 5 discriminator 1 view .LVU128
 538 0042 4FF0FF33 		mov	r3, #-1
 539 0046 82B2     		uxth	r2, r0
 540 0048 2946     		mov	r1, r5
 541 004a 2046     		mov	r0, r4
 542 004c FFF7FEFF 		bl	HAL_UART_Transmit
 543              	.LVL32:
 544              	.L29:
 178:Core/Src/main.c **** }
 545              		.loc 1 178 3 is_stmt 1 view .LVU129
 546 0050 3222     		movs	r2, #50
 547 0052 1549     		ldr	r1, .L31+16
 548 0054 1248     		ldr	r0, .L31+8
 549 0056 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 550              	.LVL33:
 179:Core/Src/main.c **** 
 551              		.loc 1 179 1 is_stmt 0 view .LVU130
 552 005a 38BD     		pop	{r3, r4, r5, pc}
 553              	.LVL34:
 554              	.L28:
 170:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 555              		.loc 1 170 5 is_stmt 1 view .LVU131
 556 005c 0E4C     		ldr	r4, .L31
 557 005e 134B     		ldr	r3, .L31+20
 558 0060 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 559 0062 1349     		ldr	r1, .L31+24
 560 0064 2046     		mov	r0, r4
 561              	.LVL35:
 170:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 562              		.loc 1 170 5 is_stmt 0 view .LVU132
 563 0066 FFF7FEFF 		bl	sprintf
 564              	.LVL36:
 171:Core/Src/main.c ****     sendRequest = 1;
 565              		.loc 1 171 5 is_stmt 1 view .LVU133
ARM GAS  /tmp/ccmvE0UG.s 			page 21


 171:Core/Src/main.c ****     sendRequest = 1;
 566              		.loc 1 171 55 is_stmt 0 view .LVU134
 567 006a 2046     		mov	r0, r4
 568 006c FFF7FEFF 		bl	strlen
 569              	.LVL37:
 171:Core/Src/main.c ****     sendRequest = 1;
 570              		.loc 1 171 5 discriminator 1 view .LVU135
 571 0070 4FF0FF33 		mov	r3, #-1
 572 0074 82B2     		uxth	r2, r0
 573 0076 2146     		mov	r1, r4
 574 0078 0948     		ldr	r0, .L31+8
 575 007a FFF7FEFF 		bl	HAL_UART_Transmit
 576              	.LVL38:
 172:Core/Src/main.c ****     disableInterrupt = 0;
 577              		.loc 1 172 5 is_stmt 1 view .LVU136
 172:Core/Src/main.c ****     disableInterrupt = 0;
 578              		.loc 1 172 17 is_stmt 0 view .LVU137
 579 007e 0D4B     		ldr	r3, .L31+28
 580 0080 0122     		movs	r2, #1
 581 0082 1A70     		strb	r2, [r3]
 173:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 582              		.loc 1 173 5 is_stmt 1 view .LVU138
 173:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 583              		.loc 1 173 22 is_stmt 0 view .LVU139
 584 0084 0C4B     		ldr	r3, .L31+32
 585 0086 0022     		movs	r2, #0
 586 0088 1A70     		strb	r2, [r3]
 174:Core/Src/main.c ****   }
 587              		.loc 1 174 5 is_stmt 1 view .LVU140
 588 008a 4FF49672 		mov	r2, #300
 589 008e 0B49     		ldr	r1, .L31+36
 590 0090 0B48     		ldr	r0, .L31+40
 591 0092 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 592              	.LVL39:
 593 0096 DBE7     		b	.L29
 594              	.L32:
 595              		.align	2
 596              	.L31:
 597 0098 00000000 		.word	msg_buffer
 598 009c 00000000 		.word	.LC3
 599 00a0 00000000 		.word	huart2
 600 00a4 20000000 		.word	.LC4
 601 00a8 00000000 		.word	cli_command
 602 00ac 00000000 		.word	currentFilterMode
 603 00b0 28000000 		.word	.LC5
 604 00b4 00000000 		.word	sendRequest
 605 00b8 00000000 		.word	disableInterrupt
 606 00bc 00000000 		.word	adcBuffer
 607 00c0 00000000 		.word	hadc1
 608              		.cfi_endproc
 609              	.LFE225:
 611              		.section	.text.Error_Handler,"ax",%progbits
 612              		.align	1
 613              		.global	Error_Handler
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
ARM GAS  /tmp/ccmvE0UG.s 			page 22


 618              	Error_Handler:
 619              	.LFB232:
 492:Core/Src/main.c **** 
 493:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /* USER CODE END 4 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c **** /**
 498:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 499:Core/Src/main.c ****   * @retval None
 500:Core/Src/main.c ****   */
 501:Core/Src/main.c **** void Error_Handler(void)
 502:Core/Src/main.c **** {
 620              		.loc 1 502 1 view -0
 621              		.cfi_startproc
 622              		@ Volatile: function does not return.
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 503:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 504:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 505:Core/Src/main.c ****   __disable_irq();
 626              		.loc 1 505 3 view .LVU142
 627              	.LBB9:
 628              	.LBI9:
 629              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/ccmvE0UG.s 			page 23


  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccmvE0UG.s 			page 24


  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 25


 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccmvE0UG.s 			page 26


 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccmvE0UG.s 			page 27


 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccmvE0UG.s 			page 28


 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
ARM GAS  /tmp/ccmvE0UG.s 			page 29


 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  /tmp/ccmvE0UG.s 			page 30


 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
ARM GAS  /tmp/ccmvE0UG.s 			page 31


 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 32


 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 33


 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccmvE0UG.s 			page 34


 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
ARM GAS  /tmp/ccmvE0UG.s 			page 35


 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
ARM GAS  /tmp/ccmvE0UG.s 			page 36


 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccmvE0UG.s 			page 37


 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  /tmp/ccmvE0UG.s 			page 38


 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmvE0UG.s 			page 39


 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 630              		.loc 2 960 27 view .LVU143
 631              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 632              		.loc 2 962 3 view .LVU144
 633              		.syntax unified
 634              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 635 0000 72B6     		cpsid i
 636              	@ 0 "" 2
 637              		.thumb
 638              		.syntax unified
 639              	.L34:
 640              	.LBE10:
 641              	.LBE9:
 506:Core/Src/main.c ****   while (1)
 642              		.loc 1 506 3 view .LVU145
 507:Core/Src/main.c ****   {
 508:Core/Src/main.c ****   }
 643              		.loc 1 508 3 view .LVU146
 506:Core/Src/main.c ****   while (1)
 644              		.loc 1 506 9 view .LVU147
 645 0002 FEE7     		b	.L34
 646              		.cfi_endproc
 647              	.LFE232:
 649              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 650              		.align	1
 651              		.syntax unified
 652              		.thumb
 653              		.thumb_func
 655              	MX_USART2_UART_Init:
 656              	.LFB229:
 400:Core/Src/main.c **** 
 657              		.loc 1 400 1 view -0
 658              		.cfi_startproc
 659              		@ args = 0, pretend = 0, frame = 0
 660              		@ frame_needed = 0, uses_anonymous_args = 0
 661 0000 08B5     		push	{r3, lr}
 662              		.cfi_def_cfa_offset 8
 663              		.cfi_offset 3, -8
 664              		.cfi_offset 14, -4
ARM GAS  /tmp/ccmvE0UG.s 			page 40


 409:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 665              		.loc 1 409 3 view .LVU149
 409:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 666              		.loc 1 409 19 is_stmt 0 view .LVU150
 667 0002 0A48     		ldr	r0, .L39
 668 0004 0A4B     		ldr	r3, .L39+4
 669 0006 0360     		str	r3, [r0]
 410:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 670              		.loc 1 410 3 is_stmt 1 view .LVU151
 410:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 671              		.loc 1 410 24 is_stmt 0 view .LVU152
 672 0008 4FF4E133 		mov	r3, #115200
 673 000c 4360     		str	r3, [r0, #4]
 411:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 674              		.loc 1 411 3 is_stmt 1 view .LVU153
 411:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 675              		.loc 1 411 26 is_stmt 0 view .LVU154
 676 000e 0023     		movs	r3, #0
 677 0010 8360     		str	r3, [r0, #8]
 412:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 678              		.loc 1 412 3 is_stmt 1 view .LVU155
 412:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 679              		.loc 1 412 24 is_stmt 0 view .LVU156
 680 0012 C360     		str	r3, [r0, #12]
 413:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 681              		.loc 1 413 3 is_stmt 1 view .LVU157
 413:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 682              		.loc 1 413 22 is_stmt 0 view .LVU158
 683 0014 0361     		str	r3, [r0, #16]
 414:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 684              		.loc 1 414 3 is_stmt 1 view .LVU159
 414:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 685              		.loc 1 414 20 is_stmt 0 view .LVU160
 686 0016 0C22     		movs	r2, #12
 687 0018 4261     		str	r2, [r0, #20]
 415:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 688              		.loc 1 415 3 is_stmt 1 view .LVU161
 415:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 689              		.loc 1 415 25 is_stmt 0 view .LVU162
 690 001a 8361     		str	r3, [r0, #24]
 416:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 691              		.loc 1 416 3 is_stmt 1 view .LVU163
 416:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 692              		.loc 1 416 28 is_stmt 0 view .LVU164
 693 001c C361     		str	r3, [r0, #28]
 417:Core/Src/main.c ****   {
 694              		.loc 1 417 3 is_stmt 1 view .LVU165
 417:Core/Src/main.c ****   {
 695              		.loc 1 417 7 is_stmt 0 view .LVU166
 696 001e FFF7FEFF 		bl	HAL_UART_Init
 697              	.LVL40:
 417:Core/Src/main.c ****   {
 698              		.loc 1 417 6 discriminator 1 view .LVU167
 699 0022 00B9     		cbnz	r0, .L38
 425:Core/Src/main.c **** 
 700              		.loc 1 425 1 view .LVU168
 701 0024 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccmvE0UG.s 			page 41


 702              	.L38:
 419:Core/Src/main.c ****   }
 703              		.loc 1 419 5 is_stmt 1 view .LVU169
 704 0026 FFF7FEFF 		bl	Error_Handler
 705              	.LVL41:
 706              	.L40:
 707 002a 00BF     		.align	2
 708              	.L39:
 709 002c 00000000 		.word	huart2
 710 0030 00440040 		.word	1073759232
 711              		.cfi_endproc
 712              	.LFE229:
 714              		.section	.text.MX_ADC1_Init,"ax",%progbits
 715              		.align	1
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 720              	MX_ADC1_Init:
 721              	.LFB228:
 348:Core/Src/main.c **** 
 722              		.loc 1 348 1 view -0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 16
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 726 0000 00B5     		push	{lr}
 727              		.cfi_def_cfa_offset 4
 728              		.cfi_offset 14, -4
 729 0002 85B0     		sub	sp, sp, #20
 730              		.cfi_def_cfa_offset 24
 354:Core/Src/main.c **** 
 731              		.loc 1 354 3 view .LVU171
 354:Core/Src/main.c **** 
 732              		.loc 1 354 26 is_stmt 0 view .LVU172
 733 0004 0023     		movs	r3, #0
 734 0006 0093     		str	r3, [sp]
 735 0008 0193     		str	r3, [sp, #4]
 736 000a 0293     		str	r3, [sp, #8]
 737 000c 0393     		str	r3, [sp, #12]
 362:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 738              		.loc 1 362 3 is_stmt 1 view .LVU173
 362:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 739              		.loc 1 362 18 is_stmt 0 view .LVU174
 740 000e 1448     		ldr	r0, .L47
 741 0010 144A     		ldr	r2, .L47+4
 742 0012 0260     		str	r2, [r0]
 363:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 743              		.loc 1 363 3 is_stmt 1 view .LVU175
 363:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 744              		.loc 1 363 29 is_stmt 0 view .LVU176
 745 0014 4FF48032 		mov	r2, #65536
 746 0018 4260     		str	r2, [r0, #4]
 364:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 747              		.loc 1 364 3 is_stmt 1 view .LVU177
 364:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 748              		.loc 1 364 25 is_stmt 0 view .LVU178
 749 001a 8360     		str	r3, [r0, #8]
 365:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/ccmvE0UG.s 			page 42


 750              		.loc 1 365 3 is_stmt 1 view .LVU179
 365:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 751              		.loc 1 365 27 is_stmt 0 view .LVU180
 752 001c 0361     		str	r3, [r0, #16]
 366:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 753              		.loc 1 366 3 is_stmt 1 view .LVU181
 366:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 754              		.loc 1 366 33 is_stmt 0 view .LVU182
 755 001e 0122     		movs	r2, #1
 756 0020 0276     		strb	r2, [r0, #24]
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 757              		.loc 1 367 3 is_stmt 1 view .LVU183
 367:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 758              		.loc 1 367 36 is_stmt 0 view .LVU184
 759 0022 80F82030 		strb	r3, [r0, #32]
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 760              		.loc 1 368 3 is_stmt 1 view .LVU185
 368:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 761              		.loc 1 368 35 is_stmt 0 view .LVU186
 762 0026 C362     		str	r3, [r0, #44]
 369:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 763              		.loc 1 369 3 is_stmt 1 view .LVU187
 369:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 764              		.loc 1 369 31 is_stmt 0 view .LVU188
 765 0028 0F49     		ldr	r1, .L47+8
 766 002a 8162     		str	r1, [r0, #40]
 370:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 767              		.loc 1 370 3 is_stmt 1 view .LVU189
 370:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 768              		.loc 1 370 24 is_stmt 0 view .LVU190
 769 002c C360     		str	r3, [r0, #12]
 371:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 770              		.loc 1 371 3 is_stmt 1 view .LVU191
 371:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 771              		.loc 1 371 30 is_stmt 0 view .LVU192
 772 002e C261     		str	r2, [r0, #28]
 372:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 773              		.loc 1 372 3 is_stmt 1 view .LVU193
 372:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 774              		.loc 1 372 36 is_stmt 0 view .LVU194
 775 0030 80F83020 		strb	r2, [r0, #48]
 373:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 776              		.loc 1 373 3 is_stmt 1 view .LVU195
 373:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 777              		.loc 1 373 27 is_stmt 0 view .LVU196
 778 0034 4261     		str	r2, [r0, #20]
 374:Core/Src/main.c ****   {
 779              		.loc 1 374 3 is_stmt 1 view .LVU197
 374:Core/Src/main.c ****   {
 780              		.loc 1 374 7 is_stmt 0 view .LVU198
 781 0036 FFF7FEFF 		bl	HAL_ADC_Init
 782              	.LVL42:
 374:Core/Src/main.c ****   {
 783              		.loc 1 374 6 discriminator 1 view .LVU199
 784 003a 60B9     		cbnz	r0, .L45
 381:Core/Src/main.c ****   sConfig.Rank = 1;
 785              		.loc 1 381 3 is_stmt 1 view .LVU200
ARM GAS  /tmp/ccmvE0UG.s 			page 43


 381:Core/Src/main.c ****   sConfig.Rank = 1;
 786              		.loc 1 381 19 is_stmt 0 view .LVU201
 787 003c 0023     		movs	r3, #0
 788 003e 0093     		str	r3, [sp]
 382:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 789              		.loc 1 382 3 is_stmt 1 view .LVU202
 382:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 790              		.loc 1 382 16 is_stmt 0 view .LVU203
 791 0040 0122     		movs	r2, #1
 792 0042 0192     		str	r2, [sp, #4]
 383:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 793              		.loc 1 383 3 is_stmt 1 view .LVU204
 383:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 794              		.loc 1 383 24 is_stmt 0 view .LVU205
 795 0044 0293     		str	r3, [sp, #8]
 384:Core/Src/main.c ****   {
 796              		.loc 1 384 3 is_stmt 1 view .LVU206
 384:Core/Src/main.c ****   {
 797              		.loc 1 384 7 is_stmt 0 view .LVU207
 798 0046 6946     		mov	r1, sp
 799 0048 0548     		ldr	r0, .L47
 800 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 801              	.LVL43:
 384:Core/Src/main.c ****   {
 802              		.loc 1 384 6 discriminator 1 view .LVU208
 803 004e 20B9     		cbnz	r0, .L46
 392:Core/Src/main.c **** 
 804              		.loc 1 392 1 view .LVU209
 805 0050 05B0     		add	sp, sp, #20
 806              		.cfi_remember_state
 807              		.cfi_def_cfa_offset 4
 808              		@ sp needed
 809 0052 5DF804FB 		ldr	pc, [sp], #4
 810              	.L45:
 811              		.cfi_restore_state
 376:Core/Src/main.c ****   }
 812              		.loc 1 376 5 is_stmt 1 view .LVU210
 813 0056 FFF7FEFF 		bl	Error_Handler
 814              	.LVL44:
 815              	.L46:
 386:Core/Src/main.c ****   }
 816              		.loc 1 386 5 view .LVU211
 817 005a FFF7FEFF 		bl	Error_Handler
 818              	.LVL45:
 819              	.L48:
 820 005e 00BF     		.align	2
 821              	.L47:
 822 0060 00000000 		.word	hadc1
 823 0064 00200140 		.word	1073815552
 824 0068 0100000F 		.word	251658241
 825              		.cfi_endproc
 826              	.LFE228:
 828              		.section	.text.SystemClock_Config,"ax",%progbits
 829              		.align	1
 830              		.global	SystemClock_Config
 831              		.syntax unified
 832              		.thumb
ARM GAS  /tmp/ccmvE0UG.s 			page 44


 833              		.thumb_func
 835              	SystemClock_Config:
 836              	.LFB227:
 301:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 837              		.loc 1 301 1 view -0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 80
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841 0000 00B5     		push	{lr}
 842              		.cfi_def_cfa_offset 4
 843              		.cfi_offset 14, -4
 844 0002 95B0     		sub	sp, sp, #84
 845              		.cfi_def_cfa_offset 88
 302:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 846              		.loc 1 302 3 view .LVU213
 302:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 847              		.loc 1 302 22 is_stmt 0 view .LVU214
 848 0004 3022     		movs	r2, #48
 849 0006 0021     		movs	r1, #0
 850 0008 08A8     		add	r0, sp, #32
 851 000a FFF7FEFF 		bl	memset
 852              	.LVL46:
 303:Core/Src/main.c **** 
 853              		.loc 1 303 3 is_stmt 1 view .LVU215
 303:Core/Src/main.c **** 
 854              		.loc 1 303 22 is_stmt 0 view .LVU216
 855 000e 0023     		movs	r3, #0
 856 0010 0393     		str	r3, [sp, #12]
 857 0012 0493     		str	r3, [sp, #16]
 858 0014 0593     		str	r3, [sp, #20]
 859 0016 0693     		str	r3, [sp, #24]
 860 0018 0793     		str	r3, [sp, #28]
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 861              		.loc 1 307 3 is_stmt 1 view .LVU217
 862              	.LBB11:
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 863              		.loc 1 307 3 view .LVU218
 864 001a 0193     		str	r3, [sp, #4]
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 865              		.loc 1 307 3 view .LVU219
 866 001c 1E4A     		ldr	r2, .L55
 867 001e 116C     		ldr	r1, [r2, #64]
 868 0020 41F08051 		orr	r1, r1, #268435456
 869 0024 1164     		str	r1, [r2, #64]
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 870              		.loc 1 307 3 view .LVU220
 871 0026 126C     		ldr	r2, [r2, #64]
 872 0028 02F08052 		and	r2, r2, #268435456
 873 002c 0192     		str	r2, [sp, #4]
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 874              		.loc 1 307 3 view .LVU221
 875 002e 019A     		ldr	r2, [sp, #4]
 876              	.LBE11:
 307:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 877              		.loc 1 307 3 view .LVU222
 308:Core/Src/main.c **** 
 878              		.loc 1 308 3 view .LVU223
ARM GAS  /tmp/ccmvE0UG.s 			page 45


 879              	.LBB12:
 308:Core/Src/main.c **** 
 880              		.loc 1 308 3 view .LVU224
 881 0030 0293     		str	r3, [sp, #8]
 308:Core/Src/main.c **** 
 882              		.loc 1 308 3 view .LVU225
 883 0032 1A4A     		ldr	r2, .L55+4
 884 0034 1168     		ldr	r1, [r2]
 885 0036 41F44041 		orr	r1, r1, #49152
 886 003a 1160     		str	r1, [r2]
 308:Core/Src/main.c **** 
 887              		.loc 1 308 3 view .LVU226
 888 003c 1268     		ldr	r2, [r2]
 889 003e 02F44042 		and	r2, r2, #49152
 890 0042 0292     		str	r2, [sp, #8]
 308:Core/Src/main.c **** 
 891              		.loc 1 308 3 view .LVU227
 892 0044 029A     		ldr	r2, [sp, #8]
 893              	.LBE12:
 308:Core/Src/main.c **** 
 894              		.loc 1 308 3 view .LVU228
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 895              		.loc 1 313 3 view .LVU229
 313:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 896              		.loc 1 313 36 is_stmt 0 view .LVU230
 897 0046 0221     		movs	r1, #2
 898 0048 0891     		str	r1, [sp, #32]
 314:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 899              		.loc 1 314 3 is_stmt 1 view .LVU231
 314:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 900              		.loc 1 314 30 is_stmt 0 view .LVU232
 901 004a 0122     		movs	r2, #1
 902 004c 0B92     		str	r2, [sp, #44]
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 903              		.loc 1 315 3 is_stmt 1 view .LVU233
 315:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 904              		.loc 1 315 41 is_stmt 0 view .LVU234
 905 004e 1022     		movs	r2, #16
 906 0050 0C92     		str	r2, [sp, #48]
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 907              		.loc 1 316 3 is_stmt 1 view .LVU235
 316:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 908              		.loc 1 316 34 is_stmt 0 view .LVU236
 909 0052 0E91     		str	r1, [sp, #56]
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 910              		.loc 1 317 3 is_stmt 1 view .LVU237
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 911              		.loc 1 317 35 is_stmt 0 view .LVU238
 912 0054 0F93     		str	r3, [sp, #60]
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 913              		.loc 1 318 3 is_stmt 1 view .LVU239
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 914              		.loc 1 318 30 is_stmt 0 view .LVU240
 915 0056 1092     		str	r2, [sp, #64]
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 916              		.loc 1 319 3 is_stmt 1 view .LVU241
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
ARM GAS  /tmp/ccmvE0UG.s 			page 46


 917              		.loc 1 319 30 is_stmt 0 view .LVU242
 918 0058 4FF4A873 		mov	r3, #336
 919 005c 1193     		str	r3, [sp, #68]
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 920              		.loc 1 320 3 is_stmt 1 view .LVU243
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 921              		.loc 1 320 30 is_stmt 0 view .LVU244
 922 005e 0423     		movs	r3, #4
 923 0060 1293     		str	r3, [sp, #72]
 321:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 924              		.loc 1 321 3 is_stmt 1 view .LVU245
 321:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 925              		.loc 1 321 30 is_stmt 0 view .LVU246
 926 0062 1393     		str	r3, [sp, #76]
 322:Core/Src/main.c ****   {
 927              		.loc 1 322 3 is_stmt 1 view .LVU247
 322:Core/Src/main.c ****   {
 928              		.loc 1 322 7 is_stmt 0 view .LVU248
 929 0064 08A8     		add	r0, sp, #32
 930 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 931              	.LVL47:
 322:Core/Src/main.c ****   {
 932              		.loc 1 322 6 discriminator 1 view .LVU249
 933 006a 80B9     		cbnz	r0, .L53
 329:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 934              		.loc 1 329 3 is_stmt 1 view .LVU250
 329:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 935              		.loc 1 329 31 is_stmt 0 view .LVU251
 936 006c 0F23     		movs	r3, #15
 937 006e 0393     		str	r3, [sp, #12]
 331:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 938              		.loc 1 331 3 is_stmt 1 view .LVU252
 331:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 939              		.loc 1 331 34 is_stmt 0 view .LVU253
 940 0070 0221     		movs	r1, #2
 941 0072 0491     		str	r1, [sp, #16]
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 942              		.loc 1 332 3 is_stmt 1 view .LVU254
 332:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 943              		.loc 1 332 35 is_stmt 0 view .LVU255
 944 0074 0023     		movs	r3, #0
 945 0076 0593     		str	r3, [sp, #20]
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 946              		.loc 1 333 3 is_stmt 1 view .LVU256
 333:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 947              		.loc 1 333 36 is_stmt 0 view .LVU257
 948 0078 4FF48052 		mov	r2, #4096
 949 007c 0692     		str	r2, [sp, #24]
 334:Core/Src/main.c **** 
 950              		.loc 1 334 3 is_stmt 1 view .LVU258
 334:Core/Src/main.c **** 
 951              		.loc 1 334 36 is_stmt 0 view .LVU259
 952 007e 0793     		str	r3, [sp, #28]
 336:Core/Src/main.c ****   {
 953              		.loc 1 336 3 is_stmt 1 view .LVU260
 336:Core/Src/main.c ****   {
 954              		.loc 1 336 7 is_stmt 0 view .LVU261
ARM GAS  /tmp/ccmvE0UG.s 			page 47


 955 0080 03A8     		add	r0, sp, #12
 956 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 957              	.LVL48:
 336:Core/Src/main.c ****   {
 958              		.loc 1 336 6 discriminator 1 view .LVU262
 959 0086 20B9     		cbnz	r0, .L54
 340:Core/Src/main.c **** 
 960              		.loc 1 340 1 view .LVU263
 961 0088 15B0     		add	sp, sp, #84
 962              		.cfi_remember_state
 963              		.cfi_def_cfa_offset 4
 964              		@ sp needed
 965 008a 5DF804FB 		ldr	pc, [sp], #4
 966              	.L53:
 967              		.cfi_restore_state
 324:Core/Src/main.c ****   }
 968              		.loc 1 324 5 is_stmt 1 view .LVU264
 969 008e FFF7FEFF 		bl	Error_Handler
 970              	.LVL49:
 971              	.L54:
 338:Core/Src/main.c ****   }
 972              		.loc 1 338 5 view .LVU265
 973 0092 FFF7FEFF 		bl	Error_Handler
 974              	.LVL50:
 975              	.L56:
 976 0096 00BF     		.align	2
 977              	.L55:
 978 0098 00380240 		.word	1073887232
 979 009c 00700040 		.word	1073770496
 980              		.cfi_endproc
 981              	.LFE227:
 983              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 984              		.align	2
 985              	.LC6:
 986 0000 413A2568 		.ascii	"A:%hu\015\012\000"
 986      750D0A00 
 987              		.global	__aeabi_f2d
 988              		.align	2
 989              	.LC7:
 990 0008 413A2025 		.ascii	"A: %.3f\015\012\000"
 990      2E33660D 
 990      0A00
 991 0012 0000     		.align	2
 992              	.LC8:
 993 0014 413A2025 		.ascii	"A: %hu\015\012\000"
 993      68750D0A 
 993      00
 994 001d 000000   		.align	2
 995              	.LC9:
 996 0020 443A2025 		.ascii	"D: %hu\015\012\000"
 996      68750D0A 
 996      00
 997 0029 000000   		.align	2
 998              	.LC10:
 999 002c 5741524E 		.ascii	"WARNING STATE!\015\012\000"
 999      494E4720 
 999      53544154 
ARM GAS  /tmp/ccmvE0UG.s 			page 48


 999      45210D0A 
 999      00
 1000              		.section	.text.main,"ax",%progbits
 1001              		.align	1
 1002              		.global	main
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1007              	main:
 1008              	.LFB226:
 188:Core/Src/main.c **** 
 1009              		.loc 1 188 1 view -0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 0
 1012              		@ frame_needed = 0, uses_anonymous_args = 0
 1013 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1014              		.cfi_def_cfa_offset 24
 1015              		.cfi_offset 3, -24
 1016              		.cfi_offset 4, -20
 1017              		.cfi_offset 5, -16
 1018              		.cfi_offset 6, -12
 1019              		.cfi_offset 7, -8
 1020              		.cfi_offset 14, -4
 191:Core/Src/main.c ****   /* USER CODE END 1 */
 1021              		.loc 1 191 3 view .LVU267
 191:Core/Src/main.c ****   /* USER CODE END 1 */
 1022              		.loc 1 191 9 is_stmt 0 view .LVU268
 1023 0002 0020     		movs	r0, #0
 1024 0004 FFF7FEFF 		bl	time
 1025              	.LVL51:
 191:Core/Src/main.c ****   /* USER CODE END 1 */
 1026              		.loc 1 191 3 discriminator 1 view .LVU269
 1027 0008 FFF7FEFF 		bl	srand
 1028              	.LVL52:
 197:Core/Src/main.c **** 
 1029              		.loc 1 197 3 is_stmt 1 view .LVU270
 1030 000c FFF7FEFF 		bl	HAL_Init
 1031              	.LVL53:
 204:Core/Src/main.c **** 
 1032              		.loc 1 204 3 view .LVU271
 1033 0010 FFF7FEFF 		bl	SystemClock_Config
 1034              	.LVL54:
 211:Core/Src/main.c ****   MX_DMA_Init();
 1035              		.loc 1 211 3 view .LVU272
 1036 0014 FFF7FEFF 		bl	MX_GPIO_Init
 1037              	.LVL55:
 212:Core/Src/main.c ****   MX_USART2_UART_Init();
 1038              		.loc 1 212 3 view .LVU273
 1039 0018 FFF7FEFF 		bl	MX_DMA_Init
 1040              	.LVL56:
 213:Core/Src/main.c ****   MX_ADC1_Init();
 1041              		.loc 1 213 3 view .LVU274
 1042 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1043              	.LVL57:
 214:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1044              		.loc 1 214 3 view .LVU275
 1045 0020 FFF7FEFF 		bl	MX_ADC1_Init
ARM GAS  /tmp/ccmvE0UG.s 			page 49


 1046              	.LVL58:
 218:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 1047              		.loc 1 218 3 view .LVU276
 1048 0024 4FF49672 		mov	r2, #300
 1049 0028 6B49     		ldr	r1, .L70
 1050 002a 6C48     		ldr	r0, .L70+4
 1051 002c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1052              	.LVL59:
 219:Core/Src/main.c ****   lastTimer = HAL_GetTick();//start time of MCU
 1053              		.loc 1 219 3 view .LVU277
 1054 0030 3222     		movs	r2, #50
 1055 0032 6B49     		ldr	r1, .L70+8
 1056 0034 6B48     		ldr	r0, .L70+12
 1057 0036 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 1058              	.LVL60:
 220:Core/Src/main.c ****   /* USER CODE END 2 */
 1059              		.loc 1 220 3 view .LVU278
 220:Core/Src/main.c ****   /* USER CODE END 2 */
 1060              		.loc 1 220 15 is_stmt 0 view .LVU279
 1061 003a FFF7FEFF 		bl	HAL_GetTick
 1062              	.LVL61:
 220:Core/Src/main.c ****   /* USER CODE END 2 */
 1063              		.loc 1 220 13 discriminator 1 view .LVU280
 1064 003e 6A4B     		ldr	r3, .L70+16
 1065 0040 1860     		str	r0, [r3]
 1066 0042 61E0     		b	.L58
 1067              	.L69:
 236:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1068              		.loc 1 236 9 is_stmt 1 view .LVU281
 236:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1069              		.loc 1 236 34 is_stmt 0 view .LVU282
 1070 0044 694E     		ldr	r6, .L70+20
 1071 0046 3188     		ldrh	r1, [r6]
 1072 0048 694F     		ldr	r7, .L70+24
 1073 004a 37F811C0 		ldrh	ip, [r7, r1, lsl #1]
 236:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1074              		.loc 1 236 13 view .LVU283
 1075 004e 694D     		ldr	r5, .L70+28
 1076 0050 2868     		ldr	r0, [r5]
 1077 0052 A0EB0C00 		sub	r0, r0, ip
 1078 0056 2860     		str	r0, [r5]
 237:Core/Src/main.c ****         sum += lastAnalogValue;
 1079              		.loc 1 237 9 is_stmt 1 view .LVU284
 237:Core/Src/main.c ****         sum += lastAnalogValue;
 1080              		.loc 1 237 42 is_stmt 0 view .LVU285
 1081 0058 27F81140 		strh	r4, [r7, r1, lsl #1]	@ movhi
 238:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 1082              		.loc 1 238 9 is_stmt 1 view .LVU286
 238:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 1083              		.loc 1 238 13 is_stmt 0 view .LVU287
 1084 005c 10FA82F0 		uxtah	r0, r0, r2
 1085 0060 2860     		str	r0, [r5]
 239:Core/Src/main.c ****       }
 1086              		.loc 1 239 9 is_stmt 1 view .LVU288
 239:Core/Src/main.c ****       }
 1087              		.loc 1 239 38 is_stmt 0 view .LVU289
 1088 0062 481C     		adds	r0, r1, #1
ARM GAS  /tmp/ccmvE0UG.s 			page 50


 239:Core/Src/main.c ****       }
 1089              		.loc 1 239 43 view .LVU290
 1090 0064 6449     		ldr	r1, .L70+32
 1091 0066 81FB0041 		smull	r4, r1, r1, r0
 1092 006a 0911     		asrs	r1, r1, #4
 1093 006c 9624     		movs	r4, #150
 1094 006e 04FB1101 		mls	r1, r4, r1, r0
 239:Core/Src/main.c ****       }
 1095              		.loc 1 239 22 view .LVU291
 1096 0072 3180     		strh	r1, [r6]	@ movhi
 1097 0074 65E0     		b	.L60
 1098              	.L61:
 1099              	.LBB13:
 250:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1100              		.loc 1 250 9 is_stmt 1 view .LVU292
 250:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1101              		.loc 1 250 28 is_stmt 0 view .LVU293
 1102 0076 5F4B     		ldr	r3, .L70+28
 1103 0078 D3ED007A 		vldr.32	s15, [r3]	@ int
 1104 007c F8EE677A 		vcvt.f32.u32	s15, s15
 1105              	.LVL62:
 251:Core/Src/main.c ****         break;
 1106              		.loc 1 251 9 is_stmt 1 view .LVU294
 1107 0080 9FED5E7A 		vldr.32	s14, .L70+36
 1108 0084 C7EE877A 		vdiv.f32	s15, s15, s14
 1109              	.LVL63:
 251:Core/Src/main.c ****         break;
 1110              		.loc 1 251 9 is_stmt 0 view .LVU295
 1111 0088 17EE900A 		vmov	r0, s15
 1112 008c FFF7FEFF 		bl	__aeabi_f2d
 1113              	.LVL64:
 251:Core/Src/main.c ****         break;
 1114              		.loc 1 251 9 view .LVU296
 1115 0090 0246     		mov	r2, r0
 1116 0092 0B46     		mov	r3, r1
 1117 0094 5A49     		ldr	r1, .L70+40
 1118 0096 5B48     		ldr	r0, .L70+44
 1119 0098 FFF7FEFF 		bl	sprintf
 1120              	.LVL65:
 252:Core/Src/main.c **** 
 1121              		.loc 1 252 9 is_stmt 1 view .LVU297
 1122 009c 5BE0     		b	.L63
 1123              	.LVL66:
 1124              	.L62:
 255:Core/Src/main.c ****         break;
 1125              		.loc 1 255 9 view .LVU298
 255:Core/Src/main.c ****         break;
 1126              		.loc 1 255 64 is_stmt 0 view .LVU299
 1127 009e 4E4B     		ldr	r3, .L70
 1128 00a0 1C68     		ldr	r4, [r3]
 255:Core/Src/main.c ****         break;
 1129              		.loc 1 255 70 view .LVU300
 1130 00a2 FFF7FEFF 		bl	rand
 1131              	.LVL67:
 255:Core/Src/main.c ****         break;
 1132              		.loc 1 255 77 discriminator 1 view .LVU301
 1133 00a6 544A     		ldr	r2, .L70+32
ARM GAS  /tmp/ccmvE0UG.s 			page 51


 1134 00a8 82FB0032 		smull	r3, r2, r2, r0
 1135 00ac C317     		asrs	r3, r0, #31
 1136 00ae C3EB6213 		rsb	r3, r3, r2, asr #5
 1137 00b2 4FF49672 		mov	r2, #300
 1138 00b6 02FB1303 		mls	r3, r2, r3, r0
 255:Core/Src/main.c ****         break;
 1139              		.loc 1 255 43 discriminator 1 view .LVU302
 1140 00ba E218     		adds	r2, r4, r3
 255:Core/Src/main.c ****         break;
 1141              		.loc 1 255 9 discriminator 1 view .LVU303
 1142 00bc 92B2     		uxth	r2, r2
 1143 00be 5249     		ldr	r1, .L70+48
 1144 00c0 5048     		ldr	r0, .L70+44
 1145 00c2 FFF7FEFF 		bl	sprintf
 1146              	.LVL68:
 256:Core/Src/main.c **** 
 1147              		.loc 1 256 9 is_stmt 1 view .LVU304
 1148 00c6 46E0     		b	.L63
 1149              	.L64:
 1150              	.LBE13:
 275:Core/Src/main.c ****         isWarningState = 0;
 1151              		.loc 1 275 9 view .LVU305
 275:Core/Src/main.c ****         isWarningState = 0;
 1152              		.loc 1 275 21 is_stmt 0 view .LVU306
 1153 00c8 FFF7FEFF 		bl	HAL_GetTick
 1154              	.LVL69:
 275:Core/Src/main.c ****         isWarningState = 0;
 1155              		.loc 1 275 19 discriminator 1 view .LVU307
 1156 00cc 464B     		ldr	r3, .L70+16
 1157 00ce 1860     		str	r0, [r3]
 276:Core/Src/main.c ****       }
 1158              		.loc 1 276 9 is_stmt 1 view .LVU308
 276:Core/Src/main.c ****       }
 1159              		.loc 1 276 24 is_stmt 0 view .LVU309
 1160 00d0 4E4B     		ldr	r3, .L70+52
 1161 00d2 0022     		movs	r2, #0
 1162 00d4 1A70     		strb	r2, [r3]
 1163              	.L65:
 279:Core/Src/main.c ****         sprintf(msg_buffer, "WARNING STATE!\r\n");
 1164              		.loc 1 279 7 is_stmt 1 view .LVU310
 279:Core/Src/main.c ****         sprintf(msg_buffer, "WARNING STATE!\r\n");
 1165              		.loc 1 279 10 is_stmt 0 view .LVU311
 1166 00d6 4D4B     		ldr	r3, .L70+52
 1167 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 279:Core/Src/main.c ****         sprintf(msg_buffer, "WARNING STATE!\r\n");
 1168              		.loc 1 279 9 view .LVU312
 1169 00da ABB1     		cbz	r3, .L58
 280:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); 
 1170              		.loc 1 280 9 is_stmt 1 view .LVU313
 1171 00dc 494E     		ldr	r6, .L70+44
 1172 00de 3446     		mov	r4, r6
 1173 00e0 4B4D     		ldr	r5, .L70+56
 1174 00e2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1175 00e4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1176 00e6 2B68     		ldr	r3, [r5]
 1177 00e8 2370     		strb	r3, [r4]
 281:Core/Src/main.c ****       }
ARM GAS  /tmp/ccmvE0UG.s 			page 52


 1178              		.loc 1 281 9 view .LVU314
 281:Core/Src/main.c ****       }
 1179              		.loc 1 281 59 is_stmt 0 view .LVU315
 1180 00ea 3046     		mov	r0, r6
 1181 00ec FFF7FEFF 		bl	strlen
 1182              	.LVL70:
 281:Core/Src/main.c ****       }
 1183              		.loc 1 281 9 discriminator 1 view .LVU316
 1184 00f0 4FF0FF33 		mov	r3, #-1
 1185 00f4 82B2     		uxth	r2, r0
 1186 00f6 3146     		mov	r1, r6
 1187 00f8 3A48     		ldr	r0, .L70+12
 1188 00fa FFF7FEFF 		bl	HAL_UART_Transmit
 1189              	.LVL71:
 1190 00fe 03E0     		b	.L58
 1191              	.L59:
 284:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1192              		.loc 1 284 7 is_stmt 1 view .LVU317
 284:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1193              		.loc 1 284 10 is_stmt 0 view .LVU318
 1194 0100 444B     		ldr	r3, .L70+60
 1195 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 284:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1196              		.loc 1 284 9 view .LVU319
 1197 0104 002B     		cmp	r3, #0
 1198 0106 52D0     		beq	.L68
 1199              	.L58:
 226:Core/Src/main.c ****   {
 1200              		.loc 1 226 3 is_stmt 1 view .LVU320
 231:Core/Src/main.c ****       last_index = (BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % BUFFER_SIZE;
 1201              		.loc 1 231 5 view .LVU321
 231:Core/Src/main.c ****       last_index = (BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % BUFFER_SIZE;
 1202              		.loc 1 231 8 is_stmt 0 view .LVU322
 1203 0108 434B     		ldr	r3, .L70+64
 1204 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 231:Core/Src/main.c ****       last_index = (BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_adc1)) % BUFFER_SIZE;
 1205              		.loc 1 231 7 view .LVU323
 1206 010c 002B     		cmp	r3, #0
 1207 010e F7D1     		bne	.L59
 232:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
 1208              		.loc 1 232 7 is_stmt 1 view .LVU324
 232:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
 1209              		.loc 1 232 35 is_stmt 0 view .LVU325
 1210 0110 424B     		ldr	r3, .L70+68
 1211 0112 1B68     		ldr	r3, [r3]
 1212 0114 5A68     		ldr	r2, [r3, #4]
 232:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
 1213              		.loc 1 232 33 view .LVU326
 1214 0116 C2F13202 		rsb	r2, r2, #50
 232:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
 1215              		.loc 1 232 70 view .LVU327
 1216 011a 414B     		ldr	r3, .L70+72
 1217 011c A3FB0213 		umull	r1, r3, r3, r2
 1218 0120 1B09     		lsrs	r3, r3, #4
 1219 0122 3221     		movs	r1, #50
 1220 0124 01FB1323 		mls	r3, r1, r3, r2
 232:Core/Src/main.c ****       lastAnalogValue = adcBuffer[last_index];
ARM GAS  /tmp/ccmvE0UG.s 			page 53


 1221              		.loc 1 232 18 view .LVU328
 1222 0128 3E4A     		ldr	r2, .L70+76
 1223 012a 1380     		strh	r3, [r2]	@ movhi
 233:Core/Src/main.c ****       //update moving average if in MOVING_AVERAGE mode
 1224              		.loc 1 233 7 is_stmt 1 view .LVU329
 233:Core/Src/main.c ****       //update moving average if in MOVING_AVERAGE mode
 1225              		.loc 1 233 34 is_stmt 0 view .LVU330
 1226 012c 9BB2     		uxth	r3, r3
 1227 012e 2A4A     		ldr	r2, .L70
 1228 0130 52F82320 		ldr	r2, [r2, r3, lsl #2]
 233:Core/Src/main.c ****       //update moving average if in MOVING_AVERAGE mode
 1229              		.loc 1 233 23 view .LVU331
 1230 0134 94B2     		uxth	r4, r2
 1231 0136 3C4B     		ldr	r3, .L70+80
 1232 0138 1C80     		strh	r4, [r3]	@ movhi
 235:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1233              		.loc 1 235 7 is_stmt 1 view .LVU332
 235:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1234              		.loc 1 235 29 is_stmt 0 view .LVU333
 1235 013a 3C4B     		ldr	r3, .L70+84
 1236 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 235:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1237              		.loc 1 235 10 view .LVU334
 1238 013e 012B     		cmp	r3, #1
 1239 0140 80D0     		beq	.L69
 1240              	.L60:
 243:Core/Src/main.c ****       {
 1241              		.loc 1 243 7 is_stmt 1 view .LVU335
 1242 0142 012B     		cmp	r3, #1
 1243 0144 97D0     		beq	.L61
 1244 0146 022B     		cmp	r3, #2
 1245 0148 A9D0     		beq	.L62
 1246 014a 23B9     		cbnz	r3, .L63
 1247              	.LBB14:
 246:Core/Src/main.c ****         break;
 1248              		.loc 1 246 9 view .LVU336
 1249 014c 92B2     		uxth	r2, r2
 1250 014e 3849     		ldr	r1, .L70+88
 1251 0150 2C48     		ldr	r0, .L70+44
 1252 0152 FFF7FEFF 		bl	sprintf
 1253              	.LVL72:
 247:Core/Src/main.c ****       
 1254              		.loc 1 247 9 view .LVU337
 1255              	.L63:
 1256              	.LBE14:
 261:Core/Src/main.c **** 
 1257              		.loc 1 261 7 view .LVU338
 261:Core/Src/main.c **** 
 1258              		.loc 1 261 57 is_stmt 0 view .LVU339
 1259 0156 2B4C     		ldr	r4, .L70+44
 1260 0158 2046     		mov	r0, r4
 1261 015a FFF7FEFF 		bl	strlen
 1262              	.LVL73:
 261:Core/Src/main.c **** 
 1263              		.loc 1 261 7 discriminator 1 view .LVU340
 1264 015e 214E     		ldr	r6, .L70+12
 1265 0160 4FF0FF33 		mov	r3, #-1
ARM GAS  /tmp/ccmvE0UG.s 			page 54


 1266 0164 82B2     		uxth	r2, r0
 1267 0166 2146     		mov	r1, r4
 1268 0168 3046     		mov	r0, r6
 1269 016a FFF7FEFF 		bl	HAL_UART_Transmit
 1270              	.LVL74:
 264:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 1271              		.loc 1 264 7 is_stmt 1 view .LVU341
 1272 016e 314D     		ldr	r5, .L70+92
 1273 0170 2A88     		ldrh	r2, [r5]
 1274 0172 3149     		ldr	r1, .L70+96
 1275 0174 2046     		mov	r0, r4
 1276 0176 FFF7FEFF 		bl	sprintf
 1277              	.LVL75:
 265:Core/Src/main.c ****       
 1278              		.loc 1 265 7 view .LVU342
 265:Core/Src/main.c ****       
 1279              		.loc 1 265 57 is_stmt 0 view .LVU343
 1280 017a 2046     		mov	r0, r4
 1281 017c FFF7FEFF 		bl	strlen
 1282              	.LVL76:
 265:Core/Src/main.c ****       
 1283              		.loc 1 265 7 discriminator 1 view .LVU344
 1284 0180 4FF0FF33 		mov	r3, #-1
 1285 0184 82B2     		uxth	r2, r0
 1286 0186 2146     		mov	r1, r4
 1287 0188 3046     		mov	r0, r6
 1288 018a FFF7FEFF 		bl	HAL_UART_Transmit
 1289              	.LVL77:
 267:Core/Src/main.c ****         //check if is high for 5 seconds
 1290              		.loc 1 267 7 is_stmt 1 view .LVU345
 267:Core/Src/main.c ****         //check if is high for 5 seconds
 1291              		.loc 1 267 10 is_stmt 0 view .LVU346
 1292 018e 2B88     		ldrh	r3, [r5]
 267:Core/Src/main.c ****         //check if is high for 5 seconds
 1293              		.loc 1 267 9 view .LVU347
 1294 0190 002B     		cmp	r3, #0
 1295 0192 99D0     		beq	.L64
 269:Core/Src/main.c ****           //warning state
 1296              		.loc 1 269 9 is_stmt 1 view .LVU348
 269:Core/Src/main.c ****           //warning state
 1297              		.loc 1 269 12 is_stmt 0 view .LVU349
 1298 0194 FFF7FEFF 		bl	HAL_GetTick
 1299              	.LVL78:
 269:Core/Src/main.c ****           //warning state
 1300              		.loc 1 269 26 discriminator 1 view .LVU350
 1301 0198 134B     		ldr	r3, .L70+16
 1302 019a 1B68     		ldr	r3, [r3]
 1303 019c C01A     		subs	r0, r0, r3
 269:Core/Src/main.c ****           //warning state
 1304              		.loc 1 269 11 discriminator 1 view .LVU351
 1305 019e 41F28733 		movw	r3, #4999
 1306 01a2 9842     		cmp	r0, r3
 1307 01a4 97D9     		bls	.L65
 271:Core/Src/main.c ****         }
 1308              		.loc 1 271 11 is_stmt 1 view .LVU352
 271:Core/Src/main.c ****         }
 1309              		.loc 1 271 26 is_stmt 0 view .LVU353
ARM GAS  /tmp/ccmvE0UG.s 			page 55


 1310 01a6 194B     		ldr	r3, .L70+52
 1311 01a8 0122     		movs	r2, #1
 1312 01aa 1A70     		strb	r2, [r3]
 1313 01ac 93E7     		b	.L65
 1314              	.L68:
 285:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 1315              		.loc 1 285 9 is_stmt 1 view .LVU354
 1316 01ae 154C     		ldr	r4, .L70+44
 1317 01b0 224B     		ldr	r3, .L70+100
 1318 01b2 93E80300 		ldm	r3, {r0, r1}
 1319 01b6 2060     		str	r0, [r4]
 1320 01b8 2171     		strb	r1, [r4, #4]
 286:Core/Src/main.c ****         sendRequest = 1;
 1321              		.loc 1 286 9 view .LVU355
 286:Core/Src/main.c ****         sendRequest = 1;
 1322              		.loc 1 286 59 is_stmt 0 view .LVU356
 1323 01ba 2046     		mov	r0, r4
 1324 01bc FFF7FEFF 		bl	strlen
 1325              	.LVL79:
 286:Core/Src/main.c ****         sendRequest = 1;
 1326              		.loc 1 286 9 discriminator 1 view .LVU357
 1327 01c0 4FF0FF33 		mov	r3, #-1
 1328 01c4 82B2     		uxth	r2, r0
 1329 01c6 2146     		mov	r1, r4
 1330 01c8 0648     		ldr	r0, .L70+12
 1331 01ca FFF7FEFF 		bl	HAL_UART_Transmit
 1332              	.LVL80:
 287:Core/Src/main.c ****       }
 1333              		.loc 1 287 9 is_stmt 1 view .LVU358
 287:Core/Src/main.c ****       }
 1334              		.loc 1 287 21 is_stmt 0 view .LVU359
 1335 01ce 114B     		ldr	r3, .L70+60
 1336 01d0 0122     		movs	r2, #1
 1337 01d2 1A70     		strb	r2, [r3]
 1338 01d4 98E7     		b	.L58
 1339              	.L71:
 1340 01d6 00BF     		.align	2
 1341              	.L70:
 1342 01d8 00000000 		.word	adcBuffer
 1343 01dc 00000000 		.word	hadc1
 1344 01e0 00000000 		.word	cli_command
 1345 01e4 00000000 		.word	huart2
 1346 01e8 00000000 		.word	lastTimer
 1347 01ec 00000000 		.word	buffer_index
 1348 01f0 00000000 		.word	adc_moving_average
 1349 01f4 00000000 		.word	sum
 1350 01f8 B5814E1B 		.word	458129845
 1351 01fc 00001643 		.word	1125515264
 1352 0200 08000000 		.word	.LC7
 1353 0204 00000000 		.word	msg_buffer
 1354 0208 14000000 		.word	.LC8
 1355 020c 00000000 		.word	isWarningState
 1356 0210 2C000000 		.word	.LC10
 1357 0214 00000000 		.word	sendRequest
 1358 0218 00000000 		.word	disableInterrupt
 1359 021c 00000000 		.word	hdma_adc1
 1360 0220 1F85EB51 		.word	1374389535
ARM GAS  /tmp/ccmvE0UG.s 			page 56


 1361 0224 00000000 		.word	last_index
 1362 0228 00000000 		.word	lastAnalogValue
 1363 022c 00000000 		.word	currentFilterMode
 1364 0230 00000000 		.word	.LC6
 1365 0234 00000000 		.word	lastDigitalValue
 1366 0238 20000000 		.word	.LC9
 1367 023c 20000000 		.word	.LC4
 1368              		.cfi_endproc
 1369              	.LFE226:
 1371              		.global	msg_buffer
 1372              		.section	.bss.msg_buffer,"aw",%nobits
 1373              		.align	2
 1376              	msg_buffer:
 1377 0000 00000000 		.space	50
 1377      00000000 
 1377      00000000 
 1377      00000000 
 1377      00000000 
 1378              		.global	sendRequest
 1379              		.section	.bss.sendRequest,"aw",%nobits
 1382              	sendRequest:
 1383 0000 00       		.space	1
 1384              		.global	cli_command
 1385              		.section	.bss.cli_command,"aw",%nobits
 1386              		.align	2
 1389              	cli_command:
 1390 0000 00000000 		.space	50
 1390      00000000 
 1390      00000000 
 1390      00000000 
 1390      00000000 
 1391              		.global	currentFilterMode
 1392              		.section	.bss.currentFilterMode,"aw",%nobits
 1395              	currentFilterMode:
 1396 0000 00       		.space	1
 1397              		.global	isWarningState
 1398              		.section	.bss.isWarningState,"aw",%nobits
 1401              	isWarningState:
 1402 0000 00       		.space	1
 1403              		.global	lastTimer
 1404              		.section	.bss.lastTimer,"aw",%nobits
 1405              		.align	2
 1408              	lastTimer:
 1409 0000 00000000 		.space	4
 1410              		.global	sum
 1411              		.section	.bss.sum,"aw",%nobits
 1412              		.align	2
 1415              	sum:
 1416 0000 00000000 		.space	4
 1417              		.global	buffer_index
 1418              		.section	.bss.buffer_index,"aw",%nobits
 1419              		.align	1
 1422              	buffer_index:
 1423 0000 0000     		.space	2
 1424              		.global	adc_moving_average
 1425              		.section	.bss.adc_moving_average,"aw",%nobits
 1426              		.align	2
ARM GAS  /tmp/ccmvE0UG.s 			page 57


 1429              	adc_moving_average:
 1430 0000 00000000 		.space	300
 1430      00000000 
 1430      00000000 
 1430      00000000 
 1430      00000000 
 1431              		.global	disableInterrupt
 1432              		.section	.bss.disableInterrupt,"aw",%nobits
 1435              	disableInterrupt:
 1436 0000 00       		.space	1
 1437              		.global	adcBuffer
 1438              		.section	.bss.adcBuffer,"aw",%nobits
 1439              		.align	2
 1442              	adcBuffer:
 1443 0000 00000000 		.space	1200
 1443      00000000 
 1443      00000000 
 1443      00000000 
 1443      00000000 
 1444              		.global	last_index
 1445              		.section	.bss.last_index,"aw",%nobits
 1446              		.align	1
 1449              	last_index:
 1450 0000 0000     		.space	2
 1451              		.global	lastDigitalValue
 1452              		.section	.bss.lastDigitalValue,"aw",%nobits
 1453              		.align	1
 1456              	lastDigitalValue:
 1457 0000 0000     		.space	2
 1458              		.global	lastAnalogValue
 1459              		.section	.bss.lastAnalogValue,"aw",%nobits
 1460              		.align	1
 1463              	lastAnalogValue:
 1464 0000 0000     		.space	2
 1465              		.global	huart2
 1466              		.section	.bss.huart2,"aw",%nobits
 1467              		.align	2
 1470              	huart2:
 1471 0000 00000000 		.space	72
 1471      00000000 
 1471      00000000 
 1471      00000000 
 1471      00000000 
 1472              		.global	hdma_adc1
 1473              		.section	.bss.hdma_adc1,"aw",%nobits
 1474              		.align	2
 1477              	hdma_adc1:
 1478 0000 00000000 		.space	96
 1478      00000000 
 1478      00000000 
 1478      00000000 
 1478      00000000 
 1479              		.global	hadc1
 1480              		.section	.bss.hadc1,"aw",%nobits
 1481              		.align	2
 1484              	hadc1:
 1485 0000 00000000 		.space	72
ARM GAS  /tmp/ccmvE0UG.s 			page 58


 1485      00000000 
 1485      00000000 
 1485      00000000 
 1485      00000000 
 1486              		.text
 1487              	.Letext0:
 1488              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1489              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1490              		.file 5 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1491              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1492              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1493              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1494              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1495              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1496              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1497              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1498              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1499              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1500              		.file 15 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1501              		.file 16 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1502              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1503              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1504              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1505              		.file 20 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1506              		.file 21 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1507              		.file 22 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1508              		.file 23 "<built-in>"
ARM GAS  /tmp/ccmvE0UG.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccmvE0UG.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccmvE0UG.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccmvE0UG.s:200    .text.MX_GPIO_Init:000000d4 $d
     /tmp/ccmvE0UG.s:207    .text.MX_DMA_Init:00000000 $t
     /tmp/ccmvE0UG.s:212    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccmvE0UG.s:258    .text.MX_DMA_Init:00000030 $d
     /tmp/ccmvE0UG.s:263    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccmvE0UG.s:269    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccmvE0UG.s:352    .text.HAL_GPIO_EXTI_Callback:0000004c $d
     /tmp/ccmvE0UG.s:1456   .bss.lastDigitalValue:00000000 lastDigitalValue
     /tmp/ccmvE0UG.s:1435   .bss.disableInterrupt:00000000 disableInterrupt
     /tmp/ccmvE0UG.s:1382   .bss.sendRequest:00000000 sendRequest
     /tmp/ccmvE0UG.s:1484   .bss.hadc1:00000000 hadc1
     /tmp/ccmvE0UG.s:1442   .bss.adcBuffer:00000000 adcBuffer
     /tmp/ccmvE0UG.s:362    .rodata.handle_cli_command.str1.4:00000000 $d
     /tmp/ccmvE0UG.s:372    .text.handle_cli_command:00000000 $t
     /tmp/ccmvE0UG.s:378    .text.handle_cli_command:00000000 handle_cli_command
     /tmp/ccmvE0UG.s:458    .text.handle_cli_command:00000054 $d
     /tmp/ccmvE0UG.s:1389   .bss.cli_command:00000000 cli_command
     /tmp/ccmvE0UG.s:1395   .bss.currentFilterMode:00000000 currentFilterMode
     /tmp/ccmvE0UG.s:467    .rodata.HAL_UARTEx_RxEventCallback.str1.4:00000000 $d
     /tmp/ccmvE0UG.s:477    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/ccmvE0UG.s:483    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/ccmvE0UG.s:597    .text.HAL_UARTEx_RxEventCallback:00000098 $d
     /tmp/ccmvE0UG.s:1376   .bss.msg_buffer:00000000 msg_buffer
     /tmp/ccmvE0UG.s:1470   .bss.huart2:00000000 huart2
     /tmp/ccmvE0UG.s:612    .text.Error_Handler:00000000 $t
     /tmp/ccmvE0UG.s:618    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccmvE0UG.s:650    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccmvE0UG.s:655    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccmvE0UG.s:709    .text.MX_USART2_UART_Init:0000002c $d
     /tmp/ccmvE0UG.s:715    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccmvE0UG.s:720    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccmvE0UG.s:822    .text.MX_ADC1_Init:00000060 $d
     /tmp/ccmvE0UG.s:829    .text.SystemClock_Config:00000000 $t
     /tmp/ccmvE0UG.s:835    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccmvE0UG.s:978    .text.SystemClock_Config:00000098 $d
     /tmp/ccmvE0UG.s:984    .rodata.main.str1.4:00000000 $d
     /tmp/ccmvE0UG.s:1001   .text.main:00000000 $t
     /tmp/ccmvE0UG.s:1007   .text.main:00000000 main
     /tmp/ccmvE0UG.s:1342   .text.main:000001d8 $d
     /tmp/ccmvE0UG.s:1408   .bss.lastTimer:00000000 lastTimer
     /tmp/ccmvE0UG.s:1422   .bss.buffer_index:00000000 buffer_index
     /tmp/ccmvE0UG.s:1429   .bss.adc_moving_average:00000000 adc_moving_average
     /tmp/ccmvE0UG.s:1415   .bss.sum:00000000 sum
     /tmp/ccmvE0UG.s:1401   .bss.isWarningState:00000000 isWarningState
     /tmp/ccmvE0UG.s:1477   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccmvE0UG.s:1449   .bss.last_index:00000000 last_index
     /tmp/ccmvE0UG.s:1463   .bss.lastAnalogValue:00000000 lastAnalogValue
     /tmp/ccmvE0UG.s:1373   .bss.msg_buffer:00000000 $d
     /tmp/ccmvE0UG.s:1383   .bss.sendRequest:00000000 $d
     /tmp/ccmvE0UG.s:1386   .bss.cli_command:00000000 $d
     /tmp/ccmvE0UG.s:1396   .bss.currentFilterMode:00000000 $d
     /tmp/ccmvE0UG.s:1402   .bss.isWarningState:00000000 $d
     /tmp/ccmvE0UG.s:1405   .bss.lastTimer:00000000 $d
ARM GAS  /tmp/ccmvE0UG.s 			page 60


     /tmp/ccmvE0UG.s:1412   .bss.sum:00000000 $d
     /tmp/ccmvE0UG.s:1419   .bss.buffer_index:00000000 $d
     /tmp/ccmvE0UG.s:1426   .bss.adc_moving_average:00000000 $d
     /tmp/ccmvE0UG.s:1436   .bss.disableInterrupt:00000000 $d
     /tmp/ccmvE0UG.s:1439   .bss.adcBuffer:00000000 $d
     /tmp/ccmvE0UG.s:1446   .bss.last_index:00000000 $d
     /tmp/ccmvE0UG.s:1453   .bss.lastDigitalValue:00000000 $d
     /tmp/ccmvE0UG.s:1460   .bss.lastAnalogValue:00000000 $d
     /tmp/ccmvE0UG.s:1467   .bss.huart2:00000000 $d
     /tmp/ccmvE0UG.s:1474   .bss.hdma_adc1:00000000 $d
     /tmp/ccmvE0UG.s:1481   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_ADC_Stop_DMA
HAL_ADC_Start_DMA
strcmp
memset
strlen
HAL_UART_Transmit
HAL_UARTEx_ReceiveToIdle_IT
sprintf
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
time
srand
HAL_Init
HAL_GetTick
rand
