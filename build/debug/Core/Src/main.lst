ARM GAS  /tmp/ccS8Wk1d.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB231:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <string.h>
  25:Core/Src/main.c **** #include <stdio.h>
  26:Core/Src/main.c **** #include <time.h> //for random values
  27:Core/Src/main.c **** #include <stdlib.h>
  28:Core/Src/main.c **** /* USER CODE END Includes */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/main.c **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccS8Wk1d.s 			page 2


  32:Core/Src/main.c **** typedef enum {
  33:Core/Src/main.c ****     RAW,
  34:Core/Src/main.c ****     MOVING_AVERAGE,
  35:Core/Src/main.c ****     RANDOM_NOISE
  36:Core/Src/main.c **** } FilterMode;
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** #define ADC_BUFFER_SIZE 300
  43:Core/Src/main.c **** #define MOVING_AVG_SIZE 150
  44:Core/Src/main.c **** #define BUFFER_SIZE 50
  45:Core/Src/main.c **** #define RANDOM_RANGE 300
  46:Core/Src/main.c **** /* USER CODE END PD */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  49:Core/Src/main.c **** /* USER CODE BEGIN PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE END PM */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  54:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  55:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** UART_HandleTypeDef huart2;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* USER CODE BEGIN PV */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** //digital and analog variables
  62:Core/Src/main.c **** uint16_t lastAnalogValue = 0; 
  63:Core/Src/main.c **** uint16_t lastDigitalValue = 0;
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** uint32_t adcBuffer[ADC_BUFFER_SIZE];//dma data structure
  66:Core/Src/main.c **** uint8_t disableInterrupt = 0;
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** //moving average variables
  70:Core/Src/main.c **** uint16_t adc_moving_average[MOVING_AVG_SIZE];
  71:Core/Src/main.c **** uint16_t buffer_index = 0;
  72:Core/Src/main.c **** uint32_t sum = 0;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** //millis for warning state
  76:Core/Src/main.c **** uint32_t lastTimer = 0;
  77:Core/Src/main.c **** uint8_t isWarningState = 0;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** //filter mode for data variables
  80:Core/Src/main.c **** FilterMode currentFilterMode = RAW;
  81:Core/Src/main.c **** char cli_command[BUFFER_SIZE];
  82:Core/Src/main.c **** u_int8_t sendRequest = 0;
  83:Core/Src/main.c **** 
  84:Core/Src/main.c **** //debug/info variables
  85:Core/Src/main.c **** char msg_buffer[BUFFER_SIZE];//buffer for serial msg
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE END PV */
  88:Core/Src/main.c **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 3


  89:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  90:Core/Src/main.c **** void SystemClock_Config(void);
  91:Core/Src/main.c **** static void MX_GPIO_Init(void);
  92:Core/Src/main.c **** static void MX_DMA_Init(void);
  93:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  94:Core/Src/main.c **** static void MX_ADC1_Init(void);
  95:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /* USER CODE END PFP */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 100:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /*
 103:Core/Src/main.c **** this function will handle the interrupt whenever a new digital value is read
 104:Core/Src/main.c **** or the user button is pressed
 105:Core/Src/main.c **** */
 106:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 107:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 108:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 109:Core/Src/main.c ****   }
 110:Core/Src/main.c ****   else if(GPIO_Pin == GPIO_PIN_13){
 111:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 112:Core/Src/main.c ****     disableInterrupt = !disableInterrupt;
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****     //activate/deactivate interrupt for dma and set led pin
 115:Core/Src/main.c ****     if(disableInterrupt){
 116:Core/Src/main.c ****       //deactivate
 117:Core/Src/main.c ****       sendRequest = 0;
 118:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 119:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****     }else{
 122:Core/Src/main.c ****       //activate
 123:Core/Src/main.c ****       sendRequest = 1;
 124:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 125:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 126:Core/Src/main.c ****     }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   }
 129:Core/Src/main.c **** }
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /*
 132:Core/Src/main.c **** void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 133:Core/Src/main.c **** }
 134:Core/Src/main.c **** */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** /*
 137:Core/Src/main.c **** based on the input, change the filter mode
 138:Core/Src/main.c **** if the comand is unknown, the current filter mode is not changed but
 139:Core/Src/main.c **** a false value is returned
 140:Core/Src/main.c **** */
 141:Core/Src/main.c **** u_int8_t handle_cli_command() {
 142:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 143:Core/Src/main.c ****         currentFilterMode = RAW;
 144:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 145:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
ARM GAS  /tmp/ccS8Wk1d.s 			page 4


 146:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 147:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 148:Core/Src/main.c ****     } else {
 149:Core/Src/main.c ****         //comand not recognized
 150:Core/Src/main.c ****         memset(cli_command, '\0', sizeof(cli_command)); 
 151:Core/Src/main.c ****         return 1;
 152:Core/Src/main.c ****     }
 153:Core/Src/main.c ****     //clear buffer
 154:Core/Src/main.c ****     memset(cli_command, '\0', sizeof(cli_command)); 
 155:Core/Src/main.c ****     return 0;
 156:Core/Src/main.c **** }
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** /**
 159:Core/Src/main.c ****  * callback function to handle the receiving of a comand from the user
 160:Core/Src/main.c ****  * if the command is unknown, restart anyway
 161:Core/Src/main.c ****  */
 162:Core/Src/main.c **** void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 163:Core/Src/main.c **** {
 164:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   if(unknownComand){
 167:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 168:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 169:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 170:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);  
 171:Core/Src/main.c ****   }
 172:Core/Src/main.c ****   else{
 173:Core/Src/main.c ****     sprintf(msg_buffer, "New filter mode: %d\r\n", currentFilterMode);
 174:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 175:Core/Src/main.c ****     sendRequest = 1;
 176:Core/Src/main.c ****     disableInterrupt = 0;
 177:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 178:Core/Src/main.c ****   }
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 181:Core/Src/main.c **** }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** /* USER CODE END 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief  The application entry point.
 187:Core/Src/main.c ****   * @retval int
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** int main(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 193:Core/Src/main.c ****   srand(time(NULL)); //set seed for random number generator
 194:Core/Src/main.c ****   /* USER CODE END 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 199:Core/Src/main.c ****   HAL_Init();
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 202:Core/Src/main.c **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE END Init */
 204:Core/Src/main.c **** 
 205:Core/Src/main.c ****   /* Configure the system clock */
 206:Core/Src/main.c ****   SystemClock_Config();
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END SysInit */
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* Initialize all configured peripherals */
 213:Core/Src/main.c ****   MX_GPIO_Init();
 214:Core/Src/main.c ****   MX_DMA_Init();
 215:Core/Src/main.c ****   MX_USART2_UART_Init();
 216:Core/Src/main.c ****   MX_ADC1_Init();
 217:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   // Initialize the DMA conversion
 220:Core/Src/main.c ****   HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 221:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 222:Core/Src/main.c ****   lastTimer = HAL_GetTick();
 223:Core/Src/main.c ****   /* USER CODE END 2 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* Infinite loop */
 226:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****   while (1)
 229:Core/Src/main.c ****   {
 230:Core/Src/main.c ****     /* USER CODE END WHILE */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 233:Core/Src/main.c ****     if(!disableInterrupt){
 234:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 235:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 236:Core/Src/main.c ****       if (currentFilterMode == MOVING_AVERAGE) {
 237:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 238:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 239:Core/Src/main.c ****         sum += lastAnalogValue;
 240:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 241:Core/Src/main.c ****       }
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****       //print analog data
 244:Core/Src/main.c ****       switch (currentFilterMode)
 245:Core/Src/main.c ****       {
 246:Core/Src/main.c ****       case RAW:
 247:Core/Src/main.c ****         sprintf(msg_buffer, "A:%hu\r\n", (u_int16_t)lastAnalogValue);
 248:Core/Src/main.c ****         break;
 249:Core/Src/main.c ****       
 250:Core/Src/main.c ****       case MOVING_AVERAGE:
 251:Core/Src/main.c ****         float moving_avg = (float)sum / MOVING_AVG_SIZE;
 252:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 253:Core/Src/main.c ****         break;
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****       case RANDOM_NOISE:
 256:Core/Src/main.c ****         sprintf(msg_buffer, "A: %hu\r\n", (u_int16_t)(adcBuffer[0] + rand() % RANDOM_RANGE));
 257:Core/Src/main.c ****         break;
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****       default:
ARM GAS  /tmp/ccS8Wk1d.s 			page 6


 260:Core/Src/main.c ****         break;
 261:Core/Src/main.c ****       }
 262:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****       //print digital data
 265:Core/Src/main.c ****       sprintf(msg_buffer, "D: %hu\r\n", lastDigitalValue);
 266:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 267:Core/Src/main.c ****       
 268:Core/Src/main.c ****       if(lastDigitalValue){
 269:Core/Src/main.c ****         //check if is high for 5 seconds
 270:Core/Src/main.c ****         if(HAL_GetTick() - lastTimer >= 5000){
 271:Core/Src/main.c ****           //warning state
 272:Core/Src/main.c ****           isWarningState = 1;
 273:Core/Src/main.c ****         }
 274:Core/Src/main.c ****       }else{
 275:Core/Src/main.c ****         //reset timer
 276:Core/Src/main.c ****         lastTimer = HAL_GetTick();
 277:Core/Src/main.c ****         isWarningState = 0;
 278:Core/Src/main.c ****       }
 279:Core/Src/main.c ****       
 280:Core/Src/main.c ****     } else {
 281:Core/Src/main.c ****       if(!sendRequest){
 282:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 283:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 284:Core/Src/main.c ****         sendRequest = 1;
 285:Core/Src/main.c ****       }
 286:Core/Src/main.c ****     }
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****     if(isWarningState){
 289:Core/Src/main.c ****       sprintf(msg_buffer, "WARNING STATE!\r\n");
 290:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); 
 291:Core/Src/main.c ****     }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   }
 295:Core/Src/main.c ****   /* USER CODE END 3 */
 296:Core/Src/main.c **** }
 297:Core/Src/main.c **** 
 298:Core/Src/main.c **** /**
 299:Core/Src/main.c ****   * @brief System Clock Configuration
 300:Core/Src/main.c ****   * @retval None
 301:Core/Src/main.c ****   */
 302:Core/Src/main.c **** void SystemClock_Config(void)
 303:Core/Src/main.c **** {
 304:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 305:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 308:Core/Src/main.c ****   */
 309:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 310:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 313:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 314:Core/Src/main.c ****   */
 315:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 316:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccS8Wk1d.s 			page 7


 317:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 324:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 330:Core/Src/main.c ****   */
 331:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 332:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 333:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 334:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 335:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 336:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 339:Core/Src/main.c ****   {
 340:Core/Src/main.c ****     Error_Handler();
 341:Core/Src/main.c ****   }
 342:Core/Src/main.c **** }
 343:Core/Src/main.c **** 
 344:Core/Src/main.c **** /**
 345:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 346:Core/Src/main.c ****   * @param None
 347:Core/Src/main.c ****   * @retval None
 348:Core/Src/main.c ****   */
 349:Core/Src/main.c **** static void MX_ADC1_Init(void)
 350:Core/Src/main.c **** {
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c ****   hadc1.Instance = ADC1;
 365:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 366:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 367:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 368:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 369:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 370:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 371:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 372:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 373:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
ARM GAS  /tmp/ccS8Wk1d.s 			page 8


 374:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 375:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 376:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 377:Core/Src/main.c ****   {
 378:Core/Src/main.c ****     Error_Handler();
 379:Core/Src/main.c ****   }
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 382:Core/Src/main.c ****   */
 383:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 384:Core/Src/main.c ****   sConfig.Rank = 1;
 385:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 386:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 387:Core/Src/main.c ****   {
 388:Core/Src/main.c ****     Error_Handler();
 389:Core/Src/main.c ****   }
 390:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c **** }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c **** /**
 397:Core/Src/main.c ****   * @brief USART2 Initialization Function
 398:Core/Src/main.c ****   * @param None
 399:Core/Src/main.c ****   * @retval None
 400:Core/Src/main.c ****   */
 401:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 402:Core/Src/main.c **** {
 403:Core/Src/main.c **** 
 404:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 411:Core/Src/main.c ****   huart2.Instance = USART2;
 412:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 413:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 414:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 415:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 416:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 417:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 418:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 419:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 420:Core/Src/main.c ****   {
 421:Core/Src/main.c ****     Error_Handler();
 422:Core/Src/main.c ****   }
 423:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 426:Core/Src/main.c **** 
 427:Core/Src/main.c **** }
 428:Core/Src/main.c **** 
 429:Core/Src/main.c **** /**
 430:Core/Src/main.c ****   * Enable DMA controller clock
ARM GAS  /tmp/ccS8Wk1d.s 			page 9


 431:Core/Src/main.c ****   */
 432:Core/Src/main.c **** static void MX_DMA_Init(void)
 433:Core/Src/main.c **** {
 434:Core/Src/main.c **** 
 435:Core/Src/main.c ****   /* DMA controller clock enable */
 436:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /* DMA interrupt init */
 439:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 440:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 441:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** }
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** /**
 446:Core/Src/main.c ****   * @brief GPIO Initialization Function
 447:Core/Src/main.c ****   * @param None
 448:Core/Src/main.c ****   * @retval None
 449:Core/Src/main.c ****   */
 450:Core/Src/main.c **** static void MX_GPIO_Init(void)
 451:Core/Src/main.c **** {
  28              		.loc 1 451 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 452:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 452 3 view .LVU1
  41              		.loc 1 452 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 453:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 454:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 457:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 457 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 457 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 457 3 view .LVU5
  53 0012 304B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 457 3 view .LVU6
ARM GAS  /tmp/ccS8Wk1d.s 			page 10


  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 457 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 457 3 view .LVU8
 458:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 458 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 458 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 458 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 458 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 458 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 458 3 view .LVU14
 459:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 459 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 459 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 459 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 459 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 459 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 459 3 view .LVU20
 460:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 460 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 460 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 460 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 460 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 460 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
ARM GAS  /tmp/ccS8Wk1d.s 			page 11


 112              		.loc 1 460 3 view .LVU26
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 463:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 463 3 view .LVU27
 114 0062 1D4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 466:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 466 3 view .LVU28
 121              		.loc 1 466 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 467:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 124              		.loc 1 467 3 is_stmt 1 view .LVU30
 125              		.loc 1 467 24 is_stmt 0 view .LVU31
 126 0074 4FF40413 		mov	r3, #2162688
 127 0078 0693     		str	r3, [sp, #24]
 468:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 468 3 is_stmt 1 view .LVU32
 129              		.loc 1 468 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 469:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 469 3 is_stmt 1 view .LVU34
 132 007c 174E     		ldr	r6, .L3+8
 133 007e 05A9     		add	r1, sp, #20
 134 0080 3046     		mov	r0, r6
 135 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****   /*Configure GPIO pin : PC2 */
 472:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 137              		.loc 1 472 3 view .LVU35
 138              		.loc 1 472 23 is_stmt 0 view .LVU36
 139 0086 0423     		movs	r3, #4
 140 0088 0593     		str	r3, [sp, #20]
 473:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 141              		.loc 1 473 3 is_stmt 1 view .LVU37
 142              		.loc 1 473 24 is_stmt 0 view .LVU38
 143 008a 4FF44413 		mov	r3, #3211264
 144 008e 0693     		str	r3, [sp, #24]
 474:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 474 3 is_stmt 1 view .LVU39
 146              		.loc 1 474 24 is_stmt 0 view .LVU40
 147 0090 0794     		str	r4, [sp, #28]
 475:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 148              		.loc 1 475 3 is_stmt 1 view .LVU41
 149 0092 05A9     		add	r1, sp, #20
 150 0094 3046     		mov	r0, r6
 151 0096 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL2:
 476:Core/Src/main.c **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 12


 477:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 478:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 153              		.loc 1 478 3 view .LVU42
 154              		.loc 1 478 23 is_stmt 0 view .LVU43
 155 009a 2023     		movs	r3, #32
 156 009c 0593     		str	r3, [sp, #20]
 479:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 157              		.loc 1 479 3 is_stmt 1 view .LVU44
 158              		.loc 1 479 24 is_stmt 0 view .LVU45
 159 009e 0123     		movs	r3, #1
 160 00a0 0693     		str	r3, [sp, #24]
 480:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 480 3 is_stmt 1 view .LVU46
 162              		.loc 1 480 24 is_stmt 0 view .LVU47
 163 00a2 0794     		str	r4, [sp, #28]
 481:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 164              		.loc 1 481 3 is_stmt 1 view .LVU48
 165              		.loc 1 481 25 is_stmt 0 view .LVU49
 166 00a4 0894     		str	r4, [sp, #32]
 482:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 167              		.loc 1 482 3 is_stmt 1 view .LVU50
 168 00a6 05A9     		add	r1, sp, #20
 169 00a8 2846     		mov	r0, r5
 170 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 171              	.LVL3:
 483:Core/Src/main.c **** 
 484:Core/Src/main.c ****   /* EXTI interrupt init*/
 485:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 172              		.loc 1 485 3 view .LVU51
 173 00ae 2246     		mov	r2, r4
 174 00b0 2146     		mov	r1, r4
 175 00b2 0820     		movs	r0, #8
 176 00b4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 177              	.LVL4:
 486:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 178              		.loc 1 486 3 view .LVU52
 179 00b8 0820     		movs	r0, #8
 180 00ba FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 181              	.LVL5:
 487:Core/Src/main.c **** 
 488:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 182              		.loc 1 488 3 view .LVU53
 183 00be 2246     		mov	r2, r4
 184 00c0 2146     		mov	r1, r4
 185 00c2 2820     		movs	r0, #40
 186 00c4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 187              	.LVL6:
 489:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 188              		.loc 1 489 3 view .LVU54
 189 00c8 2820     		movs	r0, #40
 190 00ca FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 191              	.LVL7:
 490:Core/Src/main.c **** 
 491:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 492:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 493:Core/Src/main.c **** }
 192              		.loc 1 493 1 is_stmt 0 view .LVU55
ARM GAS  /tmp/ccS8Wk1d.s 			page 13


 193 00ce 0AB0     		add	sp, sp, #40
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 00d0 70BD     		pop	{r4, r5, r6, pc}
 197              	.L4:
 198 00d2 00BF     		.align	2
 199              	.L3:
 200 00d4 00380240 		.word	1073887232
 201 00d8 00000240 		.word	1073872896
 202 00dc 00080240 		.word	1073874944
 203              		.cfi_endproc
 204              	.LFE231:
 206              		.section	.text.MX_DMA_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_DMA_Init:
 213              	.LFB230:
 433:Core/Src/main.c **** 
 214              		.loc 1 433 1 is_stmt 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 8
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 00B5     		push	{lr}
 219              		.cfi_def_cfa_offset 4
 220              		.cfi_offset 14, -4
 221 0002 83B0     		sub	sp, sp, #12
 222              		.cfi_def_cfa_offset 16
 436:Core/Src/main.c **** 
 223              		.loc 1 436 3 view .LVU57
 224              	.LBB8:
 436:Core/Src/main.c **** 
 225              		.loc 1 436 3 view .LVU58
 226 0004 0021     		movs	r1, #0
 227 0006 0191     		str	r1, [sp, #4]
 436:Core/Src/main.c **** 
 228              		.loc 1 436 3 view .LVU59
 229 0008 094B     		ldr	r3, .L7
 230 000a 1A6B     		ldr	r2, [r3, #48]
 231 000c 42F48002 		orr	r2, r2, #4194304
 232 0010 1A63     		str	r2, [r3, #48]
 436:Core/Src/main.c **** 
 233              		.loc 1 436 3 view .LVU60
 234 0012 1B6B     		ldr	r3, [r3, #48]
 235 0014 03F48003 		and	r3, r3, #4194304
 236 0018 0193     		str	r3, [sp, #4]
 436:Core/Src/main.c **** 
 237              		.loc 1 436 3 view .LVU61
 238 001a 019B     		ldr	r3, [sp, #4]
 239              	.LBE8:
 436:Core/Src/main.c **** 
 240              		.loc 1 436 3 view .LVU62
 440:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 241              		.loc 1 440 3 view .LVU63
 242 001c 0A46     		mov	r2, r1
 243 001e 3820     		movs	r0, #56
ARM GAS  /tmp/ccS8Wk1d.s 			page 14


 244 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 245              	.LVL8:
 441:Core/Src/main.c **** 
 246              		.loc 1 441 3 view .LVU64
 247 0024 3820     		movs	r0, #56
 248 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 249              	.LVL9:
 443:Core/Src/main.c **** 
 250              		.loc 1 443 1 is_stmt 0 view .LVU65
 251 002a 03B0     		add	sp, sp, #12
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 002c 5DF804FB 		ldr	pc, [sp], #4
 255              	.L8:
 256              		.align	2
 257              	.L7:
 258 0030 00380240 		.word	1073887232
 259              		.cfi_endproc
 260              	.LFE230:
 262              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 263              		.align	1
 264              		.global	HAL_GPIO_EXTI_Callback
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 269              	HAL_GPIO_EXTI_Callback:
 270              	.LVL10:
 271              	.LFB223:
 106:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 272              		.loc 1 106 47 is_stmt 1 view -0
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 0, uses_anonymous_args = 0
 106:Core/Src/main.c ****   if(GPIO_Pin == GPIO_PIN_2){
 276              		.loc 1 106 47 is_stmt 0 view .LVU67
 277 0000 08B5     		push	{r3, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
 107:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 281              		.loc 1 107 3 is_stmt 1 view .LVU68
 107:Core/Src/main.c ****     lastDigitalValue = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 282              		.loc 1 107 5 is_stmt 0 view .LVU69
 283 0002 0428     		cmp	r0, #4
 284 0004 03D0     		beq	.L14
 110:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 285              		.loc 1 110 8 is_stmt 1 view .LVU70
 110:Core/Src/main.c ****     //Toggle sending of analog and digital value over serial
 286              		.loc 1 110 10 is_stmt 0 view .LVU71
 287 0006 B0F5005F 		cmp	r0, #8192
 288 000a 07D0     		beq	.L15
 289              	.LVL11:
 290              	.L9:
 129:Core/Src/main.c **** 
 291              		.loc 1 129 1 view .LVU72
 292 000c 08BD     		pop	{r3, pc}
 293              	.LVL12:
ARM GAS  /tmp/ccS8Wk1d.s 			page 15


 294              	.L14:
 108:Core/Src/main.c ****   }
 295              		.loc 1 108 5 is_stmt 1 view .LVU73
 108:Core/Src/main.c ****   }
 296              		.loc 1 108 24 is_stmt 0 view .LVU74
 297 000e 0421     		movs	r1, #4
 298 0010 1348     		ldr	r0, .L16
 299              	.LVL13:
 108:Core/Src/main.c ****   }
 300              		.loc 1 108 24 view .LVU75
 301 0012 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 302              	.LVL14:
 108:Core/Src/main.c ****   }
 303              		.loc 1 108 22 discriminator 1 view .LVU76
 304 0016 134B     		ldr	r3, .L16+4
 305 0018 1880     		strh	r0, [r3]	@ movhi
 306 001a F7E7     		b	.L9
 307              	.LVL15:
 308              	.L15:
 112:Core/Src/main.c **** 
 309              		.loc 1 112 5 is_stmt 1 view .LVU77
 112:Core/Src/main.c **** 
 310              		.loc 1 112 24 is_stmt 0 view .LVU78
 311 001c 124A     		ldr	r2, .L16+8
 312 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 313 0020 B3FA83F3 		clz	r3, r3
 314 0024 5B09     		lsrs	r3, r3, #5
 112:Core/Src/main.c **** 
 315              		.loc 1 112 22 view .LVU79
 316 0026 1370     		strb	r3, [r2]
 115:Core/Src/main.c ****       //deactivate
 317              		.loc 1 115 5 is_stmt 1 view .LVU80
 115:Core/Src/main.c ****       //deactivate
 318              		.loc 1 115 7 is_stmt 0 view .LVU81
 319 0028 5BB1     		cbz	r3, .L12
 117:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 320              		.loc 1 117 7 is_stmt 1 view .LVU82
 117:Core/Src/main.c ****       HAL_ADC_Stop_DMA(&hadc1);
 321              		.loc 1 117 19 is_stmt 0 view .LVU83
 322 002a 104B     		ldr	r3, .L16+12
 323 002c 0022     		movs	r2, #0
 324 002e 1A70     		strb	r2, [r3]
 118:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 325              		.loc 1 118 7 is_stmt 1 view .LVU84
 326 0030 0F48     		ldr	r0, .L16+16
 327              	.LVL16:
 118:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 328              		.loc 1 118 7 is_stmt 0 view .LVU85
 329 0032 FFF7FEFF 		bl	HAL_ADC_Stop_DMA
 330              	.LVL17:
 119:Core/Src/main.c **** 
 331              		.loc 1 119 7 is_stmt 1 view .LVU86
 332 0036 0122     		movs	r2, #1
 333 0038 2021     		movs	r1, #32
 334 003a 0E48     		ldr	r0, .L16+20
 335 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
 336              	.LVL18:
ARM GAS  /tmp/ccS8Wk1d.s 			page 16


 337 0040 E4E7     		b	.L9
 338              	.LVL19:
 339              	.L12:
 123:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 340              		.loc 1 123 7 view .LVU87
 123:Core/Src/main.c ****       HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 341              		.loc 1 123 19 is_stmt 0 view .LVU88
 342 0042 0A4B     		ldr	r3, .L16+12
 343 0044 0122     		movs	r2, #1
 344 0046 1A70     		strb	r2, [r3]
 124:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 345              		.loc 1 124 7 is_stmt 1 view .LVU89
 346 0048 4FF49672 		mov	r2, #300
 347 004c 0A49     		ldr	r1, .L16+24
 348 004e 0848     		ldr	r0, .L16+16
 349              	.LVL20:
 124:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 350              		.loc 1 124 7 is_stmt 0 view .LVU90
 351 0050 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 352              	.LVL21:
 125:Core/Src/main.c ****     }
 353              		.loc 1 125 7 is_stmt 1 view .LVU91
 354 0054 0022     		movs	r2, #0
 355 0056 2021     		movs	r1, #32
 356 0058 0648     		ldr	r0, .L16+20
 357 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 358              	.LVL22:
 129:Core/Src/main.c **** 
 359              		.loc 1 129 1 is_stmt 0 view .LVU92
 360 005e D5E7     		b	.L9
 361              	.L17:
 362              		.align	2
 363              	.L16:
 364 0060 00080240 		.word	1073874944
 365 0064 00000000 		.word	lastDigitalValue
 366 0068 00000000 		.word	disableInterrupt
 367 006c 00000000 		.word	sendRequest
 368 0070 00000000 		.word	hadc1
 369 0074 00000240 		.word	1073872896
 370 0078 00000000 		.word	adcBuffer
 371              		.cfi_endproc
 372              	.LFE223:
 374              		.section	.rodata.handle_cli_command.str1.4,"aMS",%progbits,1
 375              		.align	2
 376              	.LC0:
 377 0000 72617700 		.ascii	"raw\000"
 378              		.align	2
 379              	.LC1:
 380 0004 6D6F7669 		.ascii	"moving average\000"
 380      6E672061 
 380      76657261 
 380      676500
 381 0013 00       		.align	2
 382              	.LC2:
 383 0014 72616E64 		.ascii	"random noise\000"
 383      6F6D206E 
 383      6F697365 
ARM GAS  /tmp/ccS8Wk1d.s 			page 17


 383      00
 384              		.section	.text.handle_cli_command,"ax",%progbits
 385              		.align	1
 386              		.global	handle_cli_command
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 391              	handle_cli_command:
 392              	.LFB224:
 141:Core/Src/main.c ****     if (strcmp(cli_command, "raw") == 0) {
 393              		.loc 1 141 31 is_stmt 1 view -0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397 0000 08B5     		push	{r3, lr}
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 3, -8
 400              		.cfi_offset 14, -4
 142:Core/Src/main.c ****         currentFilterMode = RAW;
 401              		.loc 1 142 5 view .LVU94
 142:Core/Src/main.c ****         currentFilterMode = RAW;
 402              		.loc 1 142 9 is_stmt 0 view .LVU95
 403 0002 1449     		ldr	r1, .L25
 404 0004 1448     		ldr	r0, .L25+4
 405 0006 FFF7FEFF 		bl	strcmp
 406              	.LVL23:
 142:Core/Src/main.c ****         currentFilterMode = RAW;
 407              		.loc 1 142 8 discriminator 1 view .LVU96
 408 000a 48B9     		cbnz	r0, .L19
 143:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 409              		.loc 1 143 9 is_stmt 1 view .LVU97
 143:Core/Src/main.c ****     } else if (strcmp(cli_command, "moving average") == 0) {
 410              		.loc 1 143 27 is_stmt 0 view .LVU98
 411 000c 134B     		ldr	r3, .L25+8
 412 000e 0022     		movs	r2, #0
 413 0010 1A70     		strb	r2, [r3]
 414              	.L20:
 154:Core/Src/main.c ****     return 0;
 415              		.loc 1 154 5 is_stmt 1 view .LVU99
 416 0012 3222     		movs	r2, #50
 417 0014 0021     		movs	r1, #0
 418 0016 1048     		ldr	r0, .L25+4
 419 0018 FFF7FEFF 		bl	memset
 420              	.LVL24:
 155:Core/Src/main.c **** }
 421              		.loc 1 155 5 view .LVU100
 155:Core/Src/main.c **** }
 422              		.loc 1 155 12 is_stmt 0 view .LVU101
 423 001c 0020     		movs	r0, #0
 424              	.L23:
 156:Core/Src/main.c **** 
 425              		.loc 1 156 1 view .LVU102
 426 001e 08BD     		pop	{r3, pc}
 427              	.L19:
 144:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 428              		.loc 1 144 12 is_stmt 1 view .LVU103
 144:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
ARM GAS  /tmp/ccS8Wk1d.s 			page 18


 429              		.loc 1 144 16 is_stmt 0 view .LVU104
 430 0020 0F49     		ldr	r1, .L25+12
 431 0022 0D48     		ldr	r0, .L25+4
 432 0024 FFF7FEFF 		bl	strcmp
 433              	.LVL25:
 144:Core/Src/main.c ****         currentFilterMode = MOVING_AVERAGE;
 434              		.loc 1 144 15 discriminator 1 view .LVU105
 435 0028 18B9     		cbnz	r0, .L21
 145:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 436              		.loc 1 145 9 is_stmt 1 view .LVU106
 145:Core/Src/main.c ****     } else if (strcmp(cli_command, "random noise") == 0) {
 437              		.loc 1 145 27 is_stmt 0 view .LVU107
 438 002a 0C4B     		ldr	r3, .L25+8
 439 002c 0122     		movs	r2, #1
 440 002e 1A70     		strb	r2, [r3]
 441 0030 EFE7     		b	.L20
 442              	.L21:
 146:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 443              		.loc 1 146 12 is_stmt 1 view .LVU108
 146:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 444              		.loc 1 146 16 is_stmt 0 view .LVU109
 445 0032 0C49     		ldr	r1, .L25+16
 446 0034 0848     		ldr	r0, .L25+4
 447 0036 FFF7FEFF 		bl	strcmp
 448              	.LVL26:
 146:Core/Src/main.c ****         currentFilterMode = RANDOM_NOISE;
 449              		.loc 1 146 15 discriminator 1 view .LVU110
 450 003a 18B9     		cbnz	r0, .L22
 147:Core/Src/main.c ****     } else {
 451              		.loc 1 147 9 is_stmt 1 view .LVU111
 147:Core/Src/main.c ****     } else {
 452              		.loc 1 147 27 is_stmt 0 view .LVU112
 453 003c 074B     		ldr	r3, .L25+8
 454 003e 0222     		movs	r2, #2
 455 0040 1A70     		strb	r2, [r3]
 456 0042 E6E7     		b	.L20
 457              	.L22:
 150:Core/Src/main.c ****         return 1;
 458              		.loc 1 150 9 is_stmt 1 view .LVU113
 459 0044 3222     		movs	r2, #50
 460 0046 0021     		movs	r1, #0
 461 0048 0348     		ldr	r0, .L25+4
 462 004a FFF7FEFF 		bl	memset
 463              	.LVL27:
 151:Core/Src/main.c ****     }
 464              		.loc 1 151 9 view .LVU114
 151:Core/Src/main.c ****     }
 465              		.loc 1 151 16 is_stmt 0 view .LVU115
 466 004e 0120     		movs	r0, #1
 467 0050 E5E7     		b	.L23
 468              	.L26:
 469 0052 00BF     		.align	2
 470              	.L25:
 471 0054 00000000 		.word	.LC0
 472 0058 00000000 		.word	cli_command
 473 005c 00000000 		.word	currentFilterMode
 474 0060 04000000 		.word	.LC1
ARM GAS  /tmp/ccS8Wk1d.s 			page 19


 475 0064 14000000 		.word	.LC2
 476              		.cfi_endproc
 477              	.LFE224:
 479              		.section	.rodata.HAL_UARTEx_RxEventCallback.str1.4,"aMS",%progbits,1
 480              		.align	2
 481              	.LC3:
 482 0000 436F6D6D 		.ascii	"Command not valid. Try again.\015\012\000"
 482      616E6420 
 482      6E6F7420 
 482      76616C69 
 482      642E2054 
 483              		.align	2
 484              	.LC4:
 485 0020 433A0D0A 		.ascii	"C:\015\012\000"
 485      00
 486 0025 000000   		.align	2
 487              	.LC5:
 488 0028 4E657720 		.ascii	"New filter mode: %d\015\012\000"
 488      66696C74 
 488      6572206D 
 488      6F64653A 
 488      2025640D 
 489              		.section	.text.HAL_UARTEx_RxEventCallback,"ax",%progbits
 490              		.align	1
 491              		.global	HAL_UARTEx_RxEventCallback
 492              		.syntax unified
 493              		.thumb
 494              		.thumb_func
 496              	HAL_UARTEx_RxEventCallback:
 497              	.LVL28:
 498              	.LFB225:
 163:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 499              		.loc 1 163 1 is_stmt 1 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Core/Src/main.c ****   uint8_t unknownComand = handle_cli_command();
 503              		.loc 1 163 1 is_stmt 0 view .LVU117
 504 0000 38B5     		push	{r3, r4, r5, lr}
 505              		.cfi_def_cfa_offset 16
 506              		.cfi_offset 3, -16
 507              		.cfi_offset 4, -12
 508              		.cfi_offset 5, -8
 509              		.cfi_offset 14, -4
 164:Core/Src/main.c **** 
 510              		.loc 1 164 3 is_stmt 1 view .LVU118
 164:Core/Src/main.c **** 
 511              		.loc 1 164 27 is_stmt 0 view .LVU119
 512 0002 FFF7FEFF 		bl	handle_cli_command
 513              	.LVL29:
 166:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 514              		.loc 1 166 3 is_stmt 1 view .LVU120
 166:Core/Src/main.c ****     sprintf(msg_buffer, "Command not valid. Try again.\r\n");
 515              		.loc 1 166 5 is_stmt 0 view .LVU121
 516 0006 48B3     		cbz	r0, .L28
 167:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 517              		.loc 1 167 5 is_stmt 1 view .LVU122
ARM GAS  /tmp/ccS8Wk1d.s 			page 20


 518 0008 234D     		ldr	r5, .L31
 519 000a AC46     		mov	ip, r5
 520 000c 234C     		ldr	r4, .L31+4
 521 000e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 522              	.LVL30:
 167:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 523              		.loc 1 167 5 is_stmt 0 view .LVU123
 524 0010 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 525 0014 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 526 0018 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 168:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 527              		.loc 1 168 5 is_stmt 1 view .LVU124
 168:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 528              		.loc 1 168 55 is_stmt 0 view .LVU125
 529 001c 2846     		mov	r0, r5
 530 001e FFF7FEFF 		bl	strlen
 531              	.LVL31:
 168:Core/Src/main.c ****     sprintf(msg_buffer, "C:\r\n");//send comand request to user
 532              		.loc 1 168 5 discriminator 1 view .LVU126
 533 0022 1F4C     		ldr	r4, .L31+8
 534 0024 4FF0FF33 		mov	r3, #-1
 535 0028 82B2     		uxth	r2, r0
 536 002a 2946     		mov	r1, r5
 537 002c 2046     		mov	r0, r4
 538 002e FFF7FEFF 		bl	HAL_UART_Transmit
 539              	.LVL32:
 169:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);  
 540              		.loc 1 169 5 is_stmt 1 view .LVU127
 541 0032 1C4B     		ldr	r3, .L31+12
 542 0034 93E80300 		ldm	r3, {r0, r1}
 543 0038 2860     		str	r0, [r5]
 544 003a 2971     		strb	r1, [r5, #4]
 170:Core/Src/main.c ****   }
 545              		.loc 1 170 5 view .LVU128
 170:Core/Src/main.c ****   }
 546              		.loc 1 170 55 is_stmt 0 view .LVU129
 547 003c 2846     		mov	r0, r5
 548 003e FFF7FEFF 		bl	strlen
 549              	.LVL33:
 170:Core/Src/main.c ****   }
 550              		.loc 1 170 5 discriminator 1 view .LVU130
 551 0042 4FF0FF33 		mov	r3, #-1
 552 0046 82B2     		uxth	r2, r0
 553 0048 2946     		mov	r1, r5
 554 004a 2046     		mov	r0, r4
 555 004c FFF7FEFF 		bl	HAL_UART_Transmit
 556              	.LVL34:
 557              	.L29:
 180:Core/Src/main.c **** }
 558              		.loc 1 180 3 is_stmt 1 view .LVU131
 559 0050 3222     		movs	r2, #50
 560 0052 1549     		ldr	r1, .L31+16
 561 0054 1248     		ldr	r0, .L31+8
 562 0056 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 563              	.LVL35:
 181:Core/Src/main.c **** 
 564              		.loc 1 181 1 is_stmt 0 view .LVU132
ARM GAS  /tmp/ccS8Wk1d.s 			page 21


 565 005a 38BD     		pop	{r3, r4, r5, pc}
 566              	.LVL36:
 567              	.L28:
 173:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 568              		.loc 1 173 5 is_stmt 1 view .LVU133
 569 005c 0E4C     		ldr	r4, .L31
 570 005e 134B     		ldr	r3, .L31+20
 571 0060 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 572 0062 1349     		ldr	r1, .L31+24
 573 0064 2046     		mov	r0, r4
 574              	.LVL37:
 173:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 575              		.loc 1 173 5 is_stmt 0 view .LVU134
 576 0066 FFF7FEFF 		bl	sprintf
 577              	.LVL38:
 174:Core/Src/main.c ****     sendRequest = 1;
 578              		.loc 1 174 5 is_stmt 1 view .LVU135
 174:Core/Src/main.c ****     sendRequest = 1;
 579              		.loc 1 174 55 is_stmt 0 view .LVU136
 580 006a 2046     		mov	r0, r4
 581 006c FFF7FEFF 		bl	strlen
 582              	.LVL39:
 174:Core/Src/main.c ****     sendRequest = 1;
 583              		.loc 1 174 5 discriminator 1 view .LVU137
 584 0070 4FF0FF33 		mov	r3, #-1
 585 0074 82B2     		uxth	r2, r0
 586 0076 2146     		mov	r1, r4
 587 0078 0948     		ldr	r0, .L31+8
 588 007a FFF7FEFF 		bl	HAL_UART_Transmit
 589              	.LVL40:
 175:Core/Src/main.c ****     disableInterrupt = 0;
 590              		.loc 1 175 5 is_stmt 1 view .LVU138
 175:Core/Src/main.c ****     disableInterrupt = 0;
 591              		.loc 1 175 17 is_stmt 0 view .LVU139
 592 007e 0D4B     		ldr	r3, .L31+28
 593 0080 0122     		movs	r2, #1
 594 0082 1A70     		strb	r2, [r3]
 176:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 595              		.loc 1 176 5 is_stmt 1 view .LVU140
 176:Core/Src/main.c ****     HAL_ADC_Start_DMA(&hadc1, adcBuffer, ADC_BUFFER_SIZE);
 596              		.loc 1 176 22 is_stmt 0 view .LVU141
 597 0084 0C4B     		ldr	r3, .L31+32
 598 0086 0022     		movs	r2, #0
 599 0088 1A70     		strb	r2, [r3]
 177:Core/Src/main.c ****   }
 600              		.loc 1 177 5 is_stmt 1 view .LVU142
 601 008a 4FF49672 		mov	r2, #300
 602 008e 0B49     		ldr	r1, .L31+36
 603 0090 0B48     		ldr	r0, .L31+40
 604 0092 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 605              	.LVL41:
 606 0096 DBE7     		b	.L29
 607              	.L32:
 608              		.align	2
 609              	.L31:
 610 0098 00000000 		.word	msg_buffer
 611 009c 00000000 		.word	.LC3
ARM GAS  /tmp/ccS8Wk1d.s 			page 22


 612 00a0 00000000 		.word	huart2
 613 00a4 20000000 		.word	.LC4
 614 00a8 00000000 		.word	cli_command
 615 00ac 00000000 		.word	currentFilterMode
 616 00b0 28000000 		.word	.LC5
 617 00b4 00000000 		.word	sendRequest
 618 00b8 00000000 		.word	disableInterrupt
 619 00bc 00000000 		.word	adcBuffer
 620 00c0 00000000 		.word	hadc1
 621              		.cfi_endproc
 622              	.LFE225:
 624              		.section	.text.Error_Handler,"ax",%progbits
 625              		.align	1
 626              		.global	Error_Handler
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 631              	Error_Handler:
 632              	.LFB232:
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 496:Core/Src/main.c **** 
 497:Core/Src/main.c **** /* USER CODE END 4 */
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** /**
 500:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 501:Core/Src/main.c ****   * @retval None
 502:Core/Src/main.c ****   */
 503:Core/Src/main.c **** void Error_Handler(void)
 504:Core/Src/main.c **** {
 633              		.loc 1 504 1 view -0
 634              		.cfi_startproc
 635              		@ Volatile: function does not return.
 636              		@ args = 0, pretend = 0, frame = 0
 637              		@ frame_needed = 0, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 505:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 506:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 507:Core/Src/main.c ****   __disable_irq();
 639              		.loc 1 507 3 view .LVU144
 640              	.LBB9:
 641              	.LBI9:
 642              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
ARM GAS  /tmp/ccS8Wk1d.s 			page 23


  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccS8Wk1d.s 			page 24


  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
ARM GAS  /tmp/ccS8Wk1d.s 			page 25


 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
ARM GAS  /tmp/ccS8Wk1d.s 			page 26


 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
ARM GAS  /tmp/ccS8Wk1d.s 			page 27


 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  /tmp/ccS8Wk1d.s 			page 28


 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 29


 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
ARM GAS  /tmp/ccS8Wk1d.s 			page 30


 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccS8Wk1d.s 			page 31


 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
ARM GAS  /tmp/ccS8Wk1d.s 			page 32


 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 33


 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccS8Wk1d.s 			page 34


 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
ARM GAS  /tmp/ccS8Wk1d.s 			page 35


 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
ARM GAS  /tmp/ccS8Wk1d.s 			page 36


 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 37


 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
ARM GAS  /tmp/ccS8Wk1d.s 			page 38


 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
ARM GAS  /tmp/ccS8Wk1d.s 			page 39


 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 643              		.loc 2 960 27 view .LVU145
 644              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 645              		.loc 2 962 3 view .LVU146
 646              		.syntax unified
 647              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 648 0000 72B6     		cpsid i
 649              	@ 0 "" 2
 650              		.thumb
 651              		.syntax unified
 652              	.L34:
 653              	.LBE10:
 654              	.LBE9:
 508:Core/Src/main.c ****   while (1)
 655              		.loc 1 508 3 view .LVU147
 509:Core/Src/main.c ****   {
 510:Core/Src/main.c ****   }
 656              		.loc 1 510 3 view .LVU148
 508:Core/Src/main.c ****   while (1)
 657              		.loc 1 508 9 view .LVU149
 658 0002 FEE7     		b	.L34
 659              		.cfi_endproc
ARM GAS  /tmp/ccS8Wk1d.s 			page 40


 660              	.LFE232:
 662              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 663              		.align	1
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 668              	MX_USART2_UART_Init:
 669              	.LFB229:
 402:Core/Src/main.c **** 
 670              		.loc 1 402 1 view -0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 0
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674 0000 08B5     		push	{r3, lr}
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 3, -8
 677              		.cfi_offset 14, -4
 411:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 678              		.loc 1 411 3 view .LVU151
 411:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 679              		.loc 1 411 19 is_stmt 0 view .LVU152
 680 0002 0A48     		ldr	r0, .L39
 681 0004 0A4B     		ldr	r3, .L39+4
 682 0006 0360     		str	r3, [r0]
 412:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 683              		.loc 1 412 3 is_stmt 1 view .LVU153
 412:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 684              		.loc 1 412 24 is_stmt 0 view .LVU154
 685 0008 4FF4E133 		mov	r3, #115200
 686 000c 4360     		str	r3, [r0, #4]
 413:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 687              		.loc 1 413 3 is_stmt 1 view .LVU155
 413:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 688              		.loc 1 413 26 is_stmt 0 view .LVU156
 689 000e 0023     		movs	r3, #0
 690 0010 8360     		str	r3, [r0, #8]
 414:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 691              		.loc 1 414 3 is_stmt 1 view .LVU157
 414:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 692              		.loc 1 414 24 is_stmt 0 view .LVU158
 693 0012 C360     		str	r3, [r0, #12]
 415:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 694              		.loc 1 415 3 is_stmt 1 view .LVU159
 415:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 695              		.loc 1 415 22 is_stmt 0 view .LVU160
 696 0014 0361     		str	r3, [r0, #16]
 416:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 697              		.loc 1 416 3 is_stmt 1 view .LVU161
 416:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 698              		.loc 1 416 20 is_stmt 0 view .LVU162
 699 0016 0C22     		movs	r2, #12
 700 0018 4261     		str	r2, [r0, #20]
 417:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 701              		.loc 1 417 3 is_stmt 1 view .LVU163
 417:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 702              		.loc 1 417 25 is_stmt 0 view .LVU164
 703 001a 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/ccS8Wk1d.s 			page 41


 418:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 704              		.loc 1 418 3 is_stmt 1 view .LVU165
 418:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 705              		.loc 1 418 28 is_stmt 0 view .LVU166
 706 001c C361     		str	r3, [r0, #28]
 419:Core/Src/main.c ****   {
 707              		.loc 1 419 3 is_stmt 1 view .LVU167
 419:Core/Src/main.c ****   {
 708              		.loc 1 419 7 is_stmt 0 view .LVU168
 709 001e FFF7FEFF 		bl	HAL_UART_Init
 710              	.LVL42:
 419:Core/Src/main.c ****   {
 711              		.loc 1 419 6 discriminator 1 view .LVU169
 712 0022 00B9     		cbnz	r0, .L38
 427:Core/Src/main.c **** 
 713              		.loc 1 427 1 view .LVU170
 714 0024 08BD     		pop	{r3, pc}
 715              	.L38:
 421:Core/Src/main.c ****   }
 716              		.loc 1 421 5 is_stmt 1 view .LVU171
 717 0026 FFF7FEFF 		bl	Error_Handler
 718              	.LVL43:
 719              	.L40:
 720 002a 00BF     		.align	2
 721              	.L39:
 722 002c 00000000 		.word	huart2
 723 0030 00440040 		.word	1073759232
 724              		.cfi_endproc
 725              	.LFE229:
 727              		.section	.text.MX_ADC1_Init,"ax",%progbits
 728              		.align	1
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 733              	MX_ADC1_Init:
 734              	.LFB228:
 350:Core/Src/main.c **** 
 735              		.loc 1 350 1 view -0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 16
 738              		@ frame_needed = 0, uses_anonymous_args = 0
 739 0000 00B5     		push	{lr}
 740              		.cfi_def_cfa_offset 4
 741              		.cfi_offset 14, -4
 742 0002 85B0     		sub	sp, sp, #20
 743              		.cfi_def_cfa_offset 24
 356:Core/Src/main.c **** 
 744              		.loc 1 356 3 view .LVU173
 356:Core/Src/main.c **** 
 745              		.loc 1 356 26 is_stmt 0 view .LVU174
 746 0004 0023     		movs	r3, #0
 747 0006 0093     		str	r3, [sp]
 748 0008 0193     		str	r3, [sp, #4]
 749 000a 0293     		str	r3, [sp, #8]
 750 000c 0393     		str	r3, [sp, #12]
 364:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 751              		.loc 1 364 3 is_stmt 1 view .LVU175
ARM GAS  /tmp/ccS8Wk1d.s 			page 42


 364:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 752              		.loc 1 364 18 is_stmt 0 view .LVU176
 753 000e 1448     		ldr	r0, .L47
 754 0010 144A     		ldr	r2, .L47+4
 755 0012 0260     		str	r2, [r0]
 365:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 756              		.loc 1 365 3 is_stmt 1 view .LVU177
 365:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 757              		.loc 1 365 29 is_stmt 0 view .LVU178
 758 0014 4FF48032 		mov	r2, #65536
 759 0018 4260     		str	r2, [r0, #4]
 366:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 760              		.loc 1 366 3 is_stmt 1 view .LVU179
 366:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 761              		.loc 1 366 25 is_stmt 0 view .LVU180
 762 001a 8360     		str	r3, [r0, #8]
 367:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 763              		.loc 1 367 3 is_stmt 1 view .LVU181
 367:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = ENABLE;
 764              		.loc 1 367 27 is_stmt 0 view .LVU182
 765 001c 0361     		str	r3, [r0, #16]
 368:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 766              		.loc 1 368 3 is_stmt 1 view .LVU183
 368:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 767              		.loc 1 368 33 is_stmt 0 view .LVU184
 768 001e 0122     		movs	r2, #1
 769 0020 0276     		strb	r2, [r0, #24]
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 770              		.loc 1 369 3 is_stmt 1 view .LVU185
 369:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 771              		.loc 1 369 36 is_stmt 0 view .LVU186
 772 0022 80F82030 		strb	r3, [r0, #32]
 370:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 773              		.loc 1 370 3 is_stmt 1 view .LVU187
 370:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 774              		.loc 1 370 35 is_stmt 0 view .LVU188
 775 0026 C362     		str	r3, [r0, #44]
 371:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 776              		.loc 1 371 3 is_stmt 1 view .LVU189
 371:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 777              		.loc 1 371 31 is_stmt 0 view .LVU190
 778 0028 0F49     		ldr	r1, .L47+8
 779 002a 8162     		str	r1, [r0, #40]
 372:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 780              		.loc 1 372 3 is_stmt 1 view .LVU191
 372:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 781              		.loc 1 372 24 is_stmt 0 view .LVU192
 782 002c C360     		str	r3, [r0, #12]
 373:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 783              		.loc 1 373 3 is_stmt 1 view .LVU193
 373:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 784              		.loc 1 373 30 is_stmt 0 view .LVU194
 785 002e C261     		str	r2, [r0, #28]
 374:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 786              		.loc 1 374 3 is_stmt 1 view .LVU195
 374:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 787              		.loc 1 374 36 is_stmt 0 view .LVU196
ARM GAS  /tmp/ccS8Wk1d.s 			page 43


 788 0030 80F83020 		strb	r2, [r0, #48]
 375:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 789              		.loc 1 375 3 is_stmt 1 view .LVU197
 375:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 790              		.loc 1 375 27 is_stmt 0 view .LVU198
 791 0034 4261     		str	r2, [r0, #20]
 376:Core/Src/main.c ****   {
 792              		.loc 1 376 3 is_stmt 1 view .LVU199
 376:Core/Src/main.c ****   {
 793              		.loc 1 376 7 is_stmt 0 view .LVU200
 794 0036 FFF7FEFF 		bl	HAL_ADC_Init
 795              	.LVL44:
 376:Core/Src/main.c ****   {
 796              		.loc 1 376 6 discriminator 1 view .LVU201
 797 003a 60B9     		cbnz	r0, .L45
 383:Core/Src/main.c ****   sConfig.Rank = 1;
 798              		.loc 1 383 3 is_stmt 1 view .LVU202
 383:Core/Src/main.c ****   sConfig.Rank = 1;
 799              		.loc 1 383 19 is_stmt 0 view .LVU203
 800 003c 0023     		movs	r3, #0
 801 003e 0093     		str	r3, [sp]
 384:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 802              		.loc 1 384 3 is_stmt 1 view .LVU204
 384:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 803              		.loc 1 384 16 is_stmt 0 view .LVU205
 804 0040 0122     		movs	r2, #1
 805 0042 0192     		str	r2, [sp, #4]
 385:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 806              		.loc 1 385 3 is_stmt 1 view .LVU206
 385:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 807              		.loc 1 385 24 is_stmt 0 view .LVU207
 808 0044 0293     		str	r3, [sp, #8]
 386:Core/Src/main.c ****   {
 809              		.loc 1 386 3 is_stmt 1 view .LVU208
 386:Core/Src/main.c ****   {
 810              		.loc 1 386 7 is_stmt 0 view .LVU209
 811 0046 6946     		mov	r1, sp
 812 0048 0548     		ldr	r0, .L47
 813 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 814              	.LVL45:
 386:Core/Src/main.c ****   {
 815              		.loc 1 386 6 discriminator 1 view .LVU210
 816 004e 20B9     		cbnz	r0, .L46
 394:Core/Src/main.c **** 
 817              		.loc 1 394 1 view .LVU211
 818 0050 05B0     		add	sp, sp, #20
 819              		.cfi_remember_state
 820              		.cfi_def_cfa_offset 4
 821              		@ sp needed
 822 0052 5DF804FB 		ldr	pc, [sp], #4
 823              	.L45:
 824              		.cfi_restore_state
 378:Core/Src/main.c ****   }
 825              		.loc 1 378 5 is_stmt 1 view .LVU212
 826 0056 FFF7FEFF 		bl	Error_Handler
 827              	.LVL46:
 828              	.L46:
ARM GAS  /tmp/ccS8Wk1d.s 			page 44


 388:Core/Src/main.c ****   }
 829              		.loc 1 388 5 view .LVU213
 830 005a FFF7FEFF 		bl	Error_Handler
 831              	.LVL47:
 832              	.L48:
 833 005e 00BF     		.align	2
 834              	.L47:
 835 0060 00000000 		.word	hadc1
 836 0064 00200140 		.word	1073815552
 837 0068 0100000F 		.word	251658241
 838              		.cfi_endproc
 839              	.LFE228:
 841              		.section	.text.SystemClock_Config,"ax",%progbits
 842              		.align	1
 843              		.global	SystemClock_Config
 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 848              	SystemClock_Config:
 849              	.LFB227:
 303:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 850              		.loc 1 303 1 view -0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 80
 853              		@ frame_needed = 0, uses_anonymous_args = 0
 854 0000 00B5     		push	{lr}
 855              		.cfi_def_cfa_offset 4
 856              		.cfi_offset 14, -4
 857 0002 95B0     		sub	sp, sp, #84
 858              		.cfi_def_cfa_offset 88
 304:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 859              		.loc 1 304 3 view .LVU215
 304:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 860              		.loc 1 304 22 is_stmt 0 view .LVU216
 861 0004 3022     		movs	r2, #48
 862 0006 0021     		movs	r1, #0
 863 0008 08A8     		add	r0, sp, #32
 864 000a FFF7FEFF 		bl	memset
 865              	.LVL48:
 305:Core/Src/main.c **** 
 866              		.loc 1 305 3 is_stmt 1 view .LVU217
 305:Core/Src/main.c **** 
 867              		.loc 1 305 22 is_stmt 0 view .LVU218
 868 000e 0023     		movs	r3, #0
 869 0010 0393     		str	r3, [sp, #12]
 870 0012 0493     		str	r3, [sp, #16]
 871 0014 0593     		str	r3, [sp, #20]
 872 0016 0693     		str	r3, [sp, #24]
 873 0018 0793     		str	r3, [sp, #28]
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 874              		.loc 1 309 3 is_stmt 1 view .LVU219
 875              	.LBB11:
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 876              		.loc 1 309 3 view .LVU220
 877 001a 0193     		str	r3, [sp, #4]
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 878              		.loc 1 309 3 view .LVU221
ARM GAS  /tmp/ccS8Wk1d.s 			page 45


 879 001c 1E4A     		ldr	r2, .L55
 880 001e 116C     		ldr	r1, [r2, #64]
 881 0020 41F08051 		orr	r1, r1, #268435456
 882 0024 1164     		str	r1, [r2, #64]
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 883              		.loc 1 309 3 view .LVU222
 884 0026 126C     		ldr	r2, [r2, #64]
 885 0028 02F08052 		and	r2, r2, #268435456
 886 002c 0192     		str	r2, [sp, #4]
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 887              		.loc 1 309 3 view .LVU223
 888 002e 019A     		ldr	r2, [sp, #4]
 889              	.LBE11:
 309:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 890              		.loc 1 309 3 view .LVU224
 310:Core/Src/main.c **** 
 891              		.loc 1 310 3 view .LVU225
 892              	.LBB12:
 310:Core/Src/main.c **** 
 893              		.loc 1 310 3 view .LVU226
 894 0030 0293     		str	r3, [sp, #8]
 310:Core/Src/main.c **** 
 895              		.loc 1 310 3 view .LVU227
 896 0032 1A4A     		ldr	r2, .L55+4
 897 0034 1168     		ldr	r1, [r2]
 898 0036 41F44041 		orr	r1, r1, #49152
 899 003a 1160     		str	r1, [r2]
 310:Core/Src/main.c **** 
 900              		.loc 1 310 3 view .LVU228
 901 003c 1268     		ldr	r2, [r2]
 902 003e 02F44042 		and	r2, r2, #49152
 903 0042 0292     		str	r2, [sp, #8]
 310:Core/Src/main.c **** 
 904              		.loc 1 310 3 view .LVU229
 905 0044 029A     		ldr	r2, [sp, #8]
 906              	.LBE12:
 310:Core/Src/main.c **** 
 907              		.loc 1 310 3 view .LVU230
 315:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 908              		.loc 1 315 3 view .LVU231
 315:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 909              		.loc 1 315 36 is_stmt 0 view .LVU232
 910 0046 0221     		movs	r1, #2
 911 0048 0891     		str	r1, [sp, #32]
 316:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 912              		.loc 1 316 3 is_stmt 1 view .LVU233
 316:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 913              		.loc 1 316 30 is_stmt 0 view .LVU234
 914 004a 0122     		movs	r2, #1
 915 004c 0B92     		str	r2, [sp, #44]
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 916              		.loc 1 317 3 is_stmt 1 view .LVU235
 317:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 917              		.loc 1 317 41 is_stmt 0 view .LVU236
 918 004e 1022     		movs	r2, #16
 919 0050 0C92     		str	r2, [sp, #48]
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  /tmp/ccS8Wk1d.s 			page 46


 920              		.loc 1 318 3 is_stmt 1 view .LVU237
 318:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 921              		.loc 1 318 34 is_stmt 0 view .LVU238
 922 0052 0E91     		str	r1, [sp, #56]
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 923              		.loc 1 319 3 is_stmt 1 view .LVU239
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 924              		.loc 1 319 35 is_stmt 0 view .LVU240
 925 0054 0F93     		str	r3, [sp, #60]
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 926              		.loc 1 320 3 is_stmt 1 view .LVU241
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 927              		.loc 1 320 30 is_stmt 0 view .LVU242
 928 0056 1092     		str	r2, [sp, #64]
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 929              		.loc 1 321 3 is_stmt 1 view .LVU243
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 930              		.loc 1 321 30 is_stmt 0 view .LVU244
 931 0058 4FF4A873 		mov	r3, #336
 932 005c 1193     		str	r3, [sp, #68]
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 933              		.loc 1 322 3 is_stmt 1 view .LVU245
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 934              		.loc 1 322 30 is_stmt 0 view .LVU246
 935 005e 0423     		movs	r3, #4
 936 0060 1293     		str	r3, [sp, #72]
 323:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 937              		.loc 1 323 3 is_stmt 1 view .LVU247
 323:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 938              		.loc 1 323 30 is_stmt 0 view .LVU248
 939 0062 1393     		str	r3, [sp, #76]
 324:Core/Src/main.c ****   {
 940              		.loc 1 324 3 is_stmt 1 view .LVU249
 324:Core/Src/main.c ****   {
 941              		.loc 1 324 7 is_stmt 0 view .LVU250
 942 0064 08A8     		add	r0, sp, #32
 943 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 944              	.LVL49:
 324:Core/Src/main.c ****   {
 945              		.loc 1 324 6 discriminator 1 view .LVU251
 946 006a 80B9     		cbnz	r0, .L53
 331:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 947              		.loc 1 331 3 is_stmt 1 view .LVU252
 331:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 948              		.loc 1 331 31 is_stmt 0 view .LVU253
 949 006c 0F23     		movs	r3, #15
 950 006e 0393     		str	r3, [sp, #12]
 333:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 951              		.loc 1 333 3 is_stmt 1 view .LVU254
 333:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 952              		.loc 1 333 34 is_stmt 0 view .LVU255
 953 0070 0221     		movs	r1, #2
 954 0072 0491     		str	r1, [sp, #16]
 334:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 955              		.loc 1 334 3 is_stmt 1 view .LVU256
 334:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 956              		.loc 1 334 35 is_stmt 0 view .LVU257
ARM GAS  /tmp/ccS8Wk1d.s 			page 47


 957 0074 0023     		movs	r3, #0
 958 0076 0593     		str	r3, [sp, #20]
 335:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 959              		.loc 1 335 3 is_stmt 1 view .LVU258
 335:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 960              		.loc 1 335 36 is_stmt 0 view .LVU259
 961 0078 4FF48052 		mov	r2, #4096
 962 007c 0692     		str	r2, [sp, #24]
 336:Core/Src/main.c **** 
 963              		.loc 1 336 3 is_stmt 1 view .LVU260
 336:Core/Src/main.c **** 
 964              		.loc 1 336 36 is_stmt 0 view .LVU261
 965 007e 0793     		str	r3, [sp, #28]
 338:Core/Src/main.c ****   {
 966              		.loc 1 338 3 is_stmt 1 view .LVU262
 338:Core/Src/main.c ****   {
 967              		.loc 1 338 7 is_stmt 0 view .LVU263
 968 0080 03A8     		add	r0, sp, #12
 969 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 970              	.LVL50:
 338:Core/Src/main.c ****   {
 971              		.loc 1 338 6 discriminator 1 view .LVU264
 972 0086 20B9     		cbnz	r0, .L54
 342:Core/Src/main.c **** 
 973              		.loc 1 342 1 view .LVU265
 974 0088 15B0     		add	sp, sp, #84
 975              		.cfi_remember_state
 976              		.cfi_def_cfa_offset 4
 977              		@ sp needed
 978 008a 5DF804FB 		ldr	pc, [sp], #4
 979              	.L53:
 980              		.cfi_restore_state
 326:Core/Src/main.c ****   }
 981              		.loc 1 326 5 is_stmt 1 view .LVU266
 982 008e FFF7FEFF 		bl	Error_Handler
 983              	.LVL51:
 984              	.L54:
 340:Core/Src/main.c ****   }
 985              		.loc 1 340 5 view .LVU267
 986 0092 FFF7FEFF 		bl	Error_Handler
 987              	.LVL52:
 988              	.L56:
 989 0096 00BF     		.align	2
 990              	.L55:
 991 0098 00380240 		.word	1073887232
 992 009c 00700040 		.word	1073770496
 993              		.cfi_endproc
 994              	.LFE227:
 996              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 997              		.align	2
 998              	.LC6:
 999 0000 413A2568 		.ascii	"A:%hu\015\012\000"
 999      750D0A00 
 1000              		.global	__aeabi_f2d
 1001              		.align	2
 1002              	.LC7:
 1003 0008 413A2025 		.ascii	"A: %.3f\015\012\000"
ARM GAS  /tmp/ccS8Wk1d.s 			page 48


 1003      2E33660D 
 1003      0A00
 1004 0012 0000     		.align	2
 1005              	.LC8:
 1006 0014 413A2025 		.ascii	"A: %hu\015\012\000"
 1006      68750D0A 
 1006      00
 1007 001d 000000   		.align	2
 1008              	.LC9:
 1009 0020 443A2025 		.ascii	"D: %hu\015\012\000"
 1009      68750D0A 
 1009      00
 1010 0029 000000   		.align	2
 1011              	.LC10:
 1012 002c 5741524E 		.ascii	"WARNING STATE!\015\012\000"
 1012      494E4720 
 1012      53544154 
 1012      45210D0A 
 1012      00
 1013              		.section	.text.main,"ax",%progbits
 1014              		.align	1
 1015              		.global	main
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1020              	main:
 1021              	.LFB226:
 190:Core/Src/main.c **** 
 1022              		.loc 1 190 1 view -0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1027              		.cfi_def_cfa_offset 24
 1028              		.cfi_offset 3, -24
 1029              		.cfi_offset 4, -20
 1030              		.cfi_offset 5, -16
 1031              		.cfi_offset 6, -12
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 193:Core/Src/main.c ****   /* USER CODE END 1 */
 1034              		.loc 1 193 3 view .LVU269
 193:Core/Src/main.c ****   /* USER CODE END 1 */
 1035              		.loc 1 193 9 is_stmt 0 view .LVU270
 1036 0002 0020     		movs	r0, #0
 1037 0004 FFF7FEFF 		bl	time
 1038              	.LVL53:
 193:Core/Src/main.c ****   /* USER CODE END 1 */
 1039              		.loc 1 193 3 discriminator 1 view .LVU271
 1040 0008 FFF7FEFF 		bl	srand
 1041              	.LVL54:
 199:Core/Src/main.c **** 
 1042              		.loc 1 199 3 is_stmt 1 view .LVU272
 1043 000c FFF7FEFF 		bl	HAL_Init
 1044              	.LVL55:
 206:Core/Src/main.c **** 
 1045              		.loc 1 206 3 view .LVU273
ARM GAS  /tmp/ccS8Wk1d.s 			page 49


 1046 0010 FFF7FEFF 		bl	SystemClock_Config
 1047              	.LVL56:
 213:Core/Src/main.c ****   MX_DMA_Init();
 1048              		.loc 1 213 3 view .LVU274
 1049 0014 FFF7FEFF 		bl	MX_GPIO_Init
 1050              	.LVL57:
 214:Core/Src/main.c ****   MX_USART2_UART_Init();
 1051              		.loc 1 214 3 view .LVU275
 1052 0018 FFF7FEFF 		bl	MX_DMA_Init
 1053              	.LVL58:
 215:Core/Src/main.c ****   MX_ADC1_Init();
 1054              		.loc 1 215 3 view .LVU276
 1055 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 1056              	.LVL59:
 216:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1057              		.loc 1 216 3 view .LVU277
 1058 0020 FFF7FEFF 		bl	MX_ADC1_Init
 1059              	.LVL60:
 220:Core/Src/main.c ****   HAL_UARTEx_ReceiveToIdle_IT(&huart2, (uint8_t *)cli_command, BUFFER_SIZE);
 1060              		.loc 1 220 3 view .LVU278
 1061 0024 4FF49672 		mov	r2, #300
 1062 0028 6349     		ldr	r1, .L71
 1063 002a 6448     		ldr	r0, .L71+4
 1064 002c FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1065              	.LVL61:
 221:Core/Src/main.c ****   lastTimer = HAL_GetTick();
 1066              		.loc 1 221 3 view .LVU279
 1067 0030 3222     		movs	r2, #50
 1068 0032 6349     		ldr	r1, .L71+8
 1069 0034 6348     		ldr	r0, .L71+12
 1070 0036 FFF7FEFF 		bl	HAL_UARTEx_ReceiveToIdle_IT
 1071              	.LVL62:
 222:Core/Src/main.c ****   /* USER CODE END 2 */
 1072              		.loc 1 222 3 view .LVU280
 222:Core/Src/main.c ****   /* USER CODE END 2 */
 1073              		.loc 1 222 15 is_stmt 0 view .LVU281
 1074 003a FFF7FEFF 		bl	HAL_GetTick
 1075              	.LVL63:
 222:Core/Src/main.c ****   /* USER CODE END 2 */
 1076              		.loc 1 222 13 discriminator 1 view .LVU282
 1077 003e 624B     		ldr	r3, .L71+16
 1078 0040 1860     		str	r0, [r3]
 1079 0042 4FE0     		b	.L65
 1080              	.L70:
 237:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1081              		.loc 1 237 9 is_stmt 1 view .LVU283
 237:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1082              		.loc 1 237 34 is_stmt 0 view .LVU284
 1083 0044 614E     		ldr	r6, .L71+20
 1084 0046 3188     		ldrh	r1, [r6]
 1085 0048 614F     		ldr	r7, .L71+24
 1086 004a 37F811C0 		ldrh	ip, [r7, r1, lsl #1]
 237:Core/Src/main.c ****         adc_moving_average[buffer_index] = lastAnalogValue;
 1087              		.loc 1 237 13 view .LVU285
 1088 004e 614D     		ldr	r5, .L71+28
 1089 0050 2868     		ldr	r0, [r5]
 1090 0052 A0EB0C00 		sub	r0, r0, ip
ARM GAS  /tmp/ccS8Wk1d.s 			page 50


 1091 0056 2860     		str	r0, [r5]
 238:Core/Src/main.c ****         sum += lastAnalogValue;
 1092              		.loc 1 238 9 is_stmt 1 view .LVU286
 238:Core/Src/main.c ****         sum += lastAnalogValue;
 1093              		.loc 1 238 42 is_stmt 0 view .LVU287
 1094 0058 27F81140 		strh	r4, [r7, r1, lsl #1]	@ movhi
 239:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 1095              		.loc 1 239 9 is_stmt 1 view .LVU288
 239:Core/Src/main.c ****         buffer_index = (buffer_index + 1) % MOVING_AVG_SIZE;
 1096              		.loc 1 239 13 is_stmt 0 view .LVU289
 1097 005c 10FA82F0 		uxtah	r0, r0, r2
 1098 0060 2860     		str	r0, [r5]
 240:Core/Src/main.c ****       }
 1099              		.loc 1 240 9 is_stmt 1 view .LVU290
 240:Core/Src/main.c ****       }
 1100              		.loc 1 240 38 is_stmt 0 view .LVU291
 1101 0062 481C     		adds	r0, r1, #1
 240:Core/Src/main.c ****       }
 1102              		.loc 1 240 43 view .LVU292
 1103 0064 5C49     		ldr	r1, .L71+32
 1104 0066 81FB0051 		smull	r5, r1, r1, r0
 1105 006a 0911     		asrs	r1, r1, #4
 1106 006c 9625     		movs	r5, #150
 1107 006e 05FB1101 		mls	r1, r5, r1, r0
 240:Core/Src/main.c ****       }
 1108              		.loc 1 240 22 view .LVU293
 1109 0072 3180     		strh	r1, [r6]	@ movhi
 1110 0074 43E0     		b	.L59
 1111              	.L60:
 1112              	.LBB13:
 251:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1113              		.loc 1 251 9 is_stmt 1 view .LVU294
 251:Core/Src/main.c ****         sprintf(msg_buffer, "A: %.3f\r\n", moving_avg);
 1114              		.loc 1 251 28 is_stmt 0 view .LVU295
 1115 0076 574B     		ldr	r3, .L71+28
 1116 0078 D3ED007A 		vldr.32	s15, [r3]	@ int
 1117 007c F8EE677A 		vcvt.f32.u32	s15, s15
 1118              	.LVL64:
 252:Core/Src/main.c ****         break;
 1119              		.loc 1 252 9 is_stmt 1 view .LVU296
 1120 0080 9FED567A 		vldr.32	s14, .L71+36
 1121 0084 C7EE877A 		vdiv.f32	s15, s15, s14
 1122              	.LVL65:
 252:Core/Src/main.c ****         break;
 1123              		.loc 1 252 9 is_stmt 0 view .LVU297
 1124 0088 17EE900A 		vmov	r0, s15
 1125 008c FFF7FEFF 		bl	__aeabi_f2d
 1126              	.LVL66:
 252:Core/Src/main.c ****         break;
 1127              		.loc 1 252 9 view .LVU298
 1128 0090 0246     		mov	r2, r0
 1129 0092 0B46     		mov	r3, r1
 1130 0094 5249     		ldr	r1, .L71+40
 1131 0096 5348     		ldr	r0, .L71+44
 1132 0098 FFF7FEFF 		bl	sprintf
 1133              	.LVL67:
 253:Core/Src/main.c **** 
ARM GAS  /tmp/ccS8Wk1d.s 			page 51


 1134              		.loc 1 253 9 is_stmt 1 view .LVU299
 1135 009c 39E0     		b	.L62
 1136              	.LVL68:
 1137              	.L61:
 256:Core/Src/main.c ****         break;
 1138              		.loc 1 256 9 view .LVU300
 256:Core/Src/main.c ****         break;
 1139              		.loc 1 256 70 is_stmt 0 view .LVU301
 1140 009e FFF7FEFF 		bl	rand
 1141              	.LVL69:
 256:Core/Src/main.c ****         break;
 1142              		.loc 1 256 77 discriminator 1 view .LVU302
 1143 00a2 4D4A     		ldr	r2, .L71+32
 1144 00a4 82FB0032 		smull	r3, r2, r2, r0
 1145 00a8 C317     		asrs	r3, r0, #31
 1146 00aa C3EB6213 		rsb	r3, r3, r2, asr #5
 1147 00ae 4FF49672 		mov	r2, #300
 1148 00b2 02FB1303 		mls	r3, r2, r3, r0
 256:Core/Src/main.c ****         break;
 1149              		.loc 1 256 43 discriminator 1 view .LVU303
 1150 00b6 E218     		adds	r2, r4, r3
 256:Core/Src/main.c ****         break;
 1151              		.loc 1 256 9 discriminator 1 view .LVU304
 1152 00b8 92B2     		uxth	r2, r2
 1153 00ba 4B49     		ldr	r1, .L71+48
 1154 00bc 4948     		ldr	r0, .L71+44
 1155 00be FFF7FEFF 		bl	sprintf
 1156              	.LVL70:
 257:Core/Src/main.c **** 
 1157              		.loc 1 257 9 is_stmt 1 view .LVU305
 1158 00c2 26E0     		b	.L62
 1159              	.L63:
 1160              	.LBE13:
 276:Core/Src/main.c ****         isWarningState = 0;
 1161              		.loc 1 276 9 view .LVU306
 276:Core/Src/main.c ****         isWarningState = 0;
 1162              		.loc 1 276 21 is_stmt 0 view .LVU307
 1163 00c4 FFF7FEFF 		bl	HAL_GetTick
 1164              	.LVL71:
 276:Core/Src/main.c ****         isWarningState = 0;
 1165              		.loc 1 276 19 discriminator 1 view .LVU308
 1166 00c8 3F4B     		ldr	r3, .L71+16
 1167 00ca 1860     		str	r0, [r3]
 277:Core/Src/main.c ****       }
 1168              		.loc 1 277 9 is_stmt 1 view .LVU309
 277:Core/Src/main.c ****       }
 1169              		.loc 1 277 24 is_stmt 0 view .LVU310
 1170 00cc 474B     		ldr	r3, .L71+52
 1171 00ce 0022     		movs	r2, #0
 1172 00d0 1A70     		strb	r2, [r3]
 1173 00d2 03E0     		b	.L64
 1174              	.L58:
 281:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1175              		.loc 1 281 7 is_stmt 1 view .LVU311
 281:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1176              		.loc 1 281 10 is_stmt 0 view .LVU312
 1177 00d4 464B     		ldr	r3, .L71+56
ARM GAS  /tmp/ccS8Wk1d.s 			page 52


 1178 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 281:Core/Src/main.c ****         sprintf(msg_buffer, "C:\r\n");//send comand request to user
 1179              		.loc 1 281 9 view .LVU313
 1180 00d8 002B     		cmp	r3, #0
 1181 00da 46D0     		beq	.L68
 1182              	.L64:
 288:Core/Src/main.c ****       sprintf(msg_buffer, "WARNING STATE!\r\n");
 1183              		.loc 1 288 5 is_stmt 1 view .LVU314
 288:Core/Src/main.c ****       sprintf(msg_buffer, "WARNING STATE!\r\n");
 1184              		.loc 1 288 8 is_stmt 0 view .LVU315
 1185 00dc 434B     		ldr	r3, .L71+52
 1186 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288:Core/Src/main.c ****       sprintf(msg_buffer, "WARNING STATE!\r\n");
 1187              		.loc 1 288 7 view .LVU316
 1188 00e0 002B     		cmp	r3, #0
 1189 00e2 56D1     		bne	.L69
 1190              	.L65:
 228:Core/Src/main.c ****   {
 1191              		.loc 1 228 3 is_stmt 1 view .LVU317
 233:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1192              		.loc 1 233 5 view .LVU318
 233:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1193              		.loc 1 233 8 is_stmt 0 view .LVU319
 1194 00e4 434B     		ldr	r3, .L71+60
 1195 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 233:Core/Src/main.c ****       lastAnalogValue = adcBuffer[0];
 1196              		.loc 1 233 7 view .LVU320
 1197 00e8 002B     		cmp	r3, #0
 1198 00ea F3D1     		bne	.L58
 234:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1199              		.loc 1 234 7 is_stmt 1 view .LVU321
 234:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1200              		.loc 1 234 34 is_stmt 0 view .LVU322
 1201 00ec 324B     		ldr	r3, .L71
 1202 00ee 1A68     		ldr	r2, [r3]
 234:Core/Src/main.c ****       // Update moving average if in MOVING_AVERAGE mode
 1203              		.loc 1 234 23 view .LVU323
 1204 00f0 94B2     		uxth	r4, r2
 1205 00f2 414B     		ldr	r3, .L71+64
 1206 00f4 1C80     		strh	r4, [r3]	@ movhi
 236:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1207              		.loc 1 236 7 is_stmt 1 view .LVU324
 236:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1208              		.loc 1 236 29 is_stmt 0 view .LVU325
 1209 00f6 414B     		ldr	r3, .L71+68
 1210 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 236:Core/Src/main.c ****         sum -= adc_moving_average[buffer_index];
 1211              		.loc 1 236 10 view .LVU326
 1212 00fa 012B     		cmp	r3, #1
 1213 00fc A2D0     		beq	.L70
 1214              	.L59:
 244:Core/Src/main.c ****       {
 1215              		.loc 1 244 7 is_stmt 1 view .LVU327
 1216 00fe 012B     		cmp	r3, #1
 1217 0100 B9D0     		beq	.L60
 1218 0102 022B     		cmp	r3, #2
 1219 0104 CBD0     		beq	.L61
ARM GAS  /tmp/ccS8Wk1d.s 			page 53


 1220 0106 23B9     		cbnz	r3, .L62
 1221              	.LBB14:
 247:Core/Src/main.c ****         break;
 1222              		.loc 1 247 9 view .LVU328
 1223 0108 92B2     		uxth	r2, r2
 1224 010a 3D49     		ldr	r1, .L71+72
 1225 010c 3548     		ldr	r0, .L71+44
 1226 010e FFF7FEFF 		bl	sprintf
 1227              	.LVL72:
 248:Core/Src/main.c ****       
 1228              		.loc 1 248 9 view .LVU329
 1229              	.L62:
 1230              	.LBE14:
 262:Core/Src/main.c **** 
 1231              		.loc 1 262 7 view .LVU330
 262:Core/Src/main.c **** 
 1232              		.loc 1 262 57 is_stmt 0 view .LVU331
 1233 0112 344C     		ldr	r4, .L71+44
 1234 0114 2046     		mov	r0, r4
 1235 0116 FFF7FEFF 		bl	strlen
 1236              	.LVL73:
 262:Core/Src/main.c **** 
 1237              		.loc 1 262 7 discriminator 1 view .LVU332
 1238 011a 2A4E     		ldr	r6, .L71+12
 1239 011c 4FF0FF33 		mov	r3, #-1
 1240 0120 82B2     		uxth	r2, r0
 1241 0122 2146     		mov	r1, r4
 1242 0124 3046     		mov	r0, r6
 1243 0126 FFF7FEFF 		bl	HAL_UART_Transmit
 1244              	.LVL74:
 265:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 1245              		.loc 1 265 7 is_stmt 1 view .LVU333
 1246 012a 364D     		ldr	r5, .L71+76
 1247 012c 2A88     		ldrh	r2, [r5]
 1248 012e 3649     		ldr	r1, .L71+80
 1249 0130 2046     		mov	r0, r4
 1250 0132 FFF7FEFF 		bl	sprintf
 1251              	.LVL75:
 266:Core/Src/main.c ****       
 1252              		.loc 1 266 7 view .LVU334
 266:Core/Src/main.c ****       
 1253              		.loc 1 266 57 is_stmt 0 view .LVU335
 1254 0136 2046     		mov	r0, r4
 1255 0138 FFF7FEFF 		bl	strlen
 1256              	.LVL76:
 266:Core/Src/main.c ****       
 1257              		.loc 1 266 7 discriminator 1 view .LVU336
 1258 013c 4FF0FF33 		mov	r3, #-1
 1259 0140 82B2     		uxth	r2, r0
 1260 0142 2146     		mov	r1, r4
 1261 0144 3046     		mov	r0, r6
 1262 0146 FFF7FEFF 		bl	HAL_UART_Transmit
 1263              	.LVL77:
 268:Core/Src/main.c ****         //check if is high for 5 seconds
 1264              		.loc 1 268 7 is_stmt 1 view .LVU337
 268:Core/Src/main.c ****         //check if is high for 5 seconds
 1265              		.loc 1 268 10 is_stmt 0 view .LVU338
ARM GAS  /tmp/ccS8Wk1d.s 			page 54


 1266 014a 2B88     		ldrh	r3, [r5]
 268:Core/Src/main.c ****         //check if is high for 5 seconds
 1267              		.loc 1 268 9 view .LVU339
 1268 014c 002B     		cmp	r3, #0
 1269 014e B9D0     		beq	.L63
 270:Core/Src/main.c ****           //warning state
 1270              		.loc 1 270 9 is_stmt 1 view .LVU340
 270:Core/Src/main.c ****           //warning state
 1271              		.loc 1 270 12 is_stmt 0 view .LVU341
 1272 0150 FFF7FEFF 		bl	HAL_GetTick
 1273              	.LVL78:
 270:Core/Src/main.c ****           //warning state
 1274              		.loc 1 270 26 discriminator 1 view .LVU342
 1275 0154 1C4B     		ldr	r3, .L71+16
 1276 0156 1B68     		ldr	r3, [r3]
 1277 0158 C01A     		subs	r0, r0, r3
 270:Core/Src/main.c ****           //warning state
 1278              		.loc 1 270 11 discriminator 1 view .LVU343
 1279 015a 41F28733 		movw	r3, #4999
 1280 015e 9842     		cmp	r0, r3
 1281 0160 BCD9     		bls	.L64
 272:Core/Src/main.c ****         }
 1282              		.loc 1 272 11 is_stmt 1 view .LVU344
 272:Core/Src/main.c ****         }
 1283              		.loc 1 272 26 is_stmt 0 view .LVU345
 1284 0162 224B     		ldr	r3, .L71+52
 1285 0164 0122     		movs	r2, #1
 1286 0166 1A70     		strb	r2, [r3]
 1287 0168 B8E7     		b	.L64
 1288              	.L68:
 282:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 1289              		.loc 1 282 9 is_stmt 1 view .LVU346
 1290 016a 1E4C     		ldr	r4, .L71+44
 1291 016c 274B     		ldr	r3, .L71+84
 1292 016e 93E80300 		ldm	r3, {r0, r1}
 1293 0172 2060     		str	r0, [r4]
 1294 0174 2171     		strb	r1, [r4, #4]
 283:Core/Src/main.c ****         sendRequest = 1;
 1295              		.loc 1 283 9 view .LVU347
 283:Core/Src/main.c ****         sendRequest = 1;
 1296              		.loc 1 283 59 is_stmt 0 view .LVU348
 1297 0176 2046     		mov	r0, r4
 1298 0178 FFF7FEFF 		bl	strlen
 1299              	.LVL79:
 283:Core/Src/main.c ****         sendRequest = 1;
 1300              		.loc 1 283 9 discriminator 1 view .LVU349
 1301 017c 4FF0FF33 		mov	r3, #-1
 1302 0180 82B2     		uxth	r2, r0
 1303 0182 2146     		mov	r1, r4
 1304 0184 0F48     		ldr	r0, .L71+12
 1305 0186 FFF7FEFF 		bl	HAL_UART_Transmit
 1306              	.LVL80:
 284:Core/Src/main.c ****       }
 1307              		.loc 1 284 9 is_stmt 1 view .LVU350
 284:Core/Src/main.c ****       }
 1308              		.loc 1 284 21 is_stmt 0 view .LVU351
 1309 018a 194B     		ldr	r3, .L71+56
ARM GAS  /tmp/ccS8Wk1d.s 			page 55


 1310 018c 0122     		movs	r2, #1
 1311 018e 1A70     		strb	r2, [r3]
 1312 0190 A4E7     		b	.L64
 1313              	.L69:
 289:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); 
 1314              		.loc 1 289 7 is_stmt 1 view .LVU352
 1315 0192 144E     		ldr	r6, .L71+44
 1316 0194 3446     		mov	r4, r6
 1317 0196 1E4D     		ldr	r5, .L71+88
 1318 0198 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1319 019a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1320 019c 2B68     		ldr	r3, [r5]
 1321 019e 2370     		strb	r3, [r4]
 290:Core/Src/main.c ****     }
 1322              		.loc 1 290 7 view .LVU353
 290:Core/Src/main.c ****     }
 1323              		.loc 1 290 57 is_stmt 0 view .LVU354
 1324 01a0 3046     		mov	r0, r6
 1325 01a2 FFF7FEFF 		bl	strlen
 1326              	.LVL81:
 290:Core/Src/main.c ****     }
 1327              		.loc 1 290 7 discriminator 1 view .LVU355
 1328 01a6 4FF0FF33 		mov	r3, #-1
 1329 01aa 82B2     		uxth	r2, r0
 1330 01ac 3146     		mov	r1, r6
 1331 01ae 0548     		ldr	r0, .L71+12
 1332 01b0 FFF7FEFF 		bl	HAL_UART_Transmit
 1333              	.LVL82:
 1334 01b4 96E7     		b	.L65
 1335              	.L72:
 1336 01b6 00BF     		.align	2
 1337              	.L71:
 1338 01b8 00000000 		.word	adcBuffer
 1339 01bc 00000000 		.word	hadc1
 1340 01c0 00000000 		.word	cli_command
 1341 01c4 00000000 		.word	huart2
 1342 01c8 00000000 		.word	lastTimer
 1343 01cc 00000000 		.word	buffer_index
 1344 01d0 00000000 		.word	adc_moving_average
 1345 01d4 00000000 		.word	sum
 1346 01d8 B5814E1B 		.word	458129845
 1347 01dc 00001643 		.word	1125515264
 1348 01e0 08000000 		.word	.LC7
 1349 01e4 00000000 		.word	msg_buffer
 1350 01e8 14000000 		.word	.LC8
 1351 01ec 00000000 		.word	isWarningState
 1352 01f0 00000000 		.word	sendRequest
 1353 01f4 00000000 		.word	disableInterrupt
 1354 01f8 00000000 		.word	lastAnalogValue
 1355 01fc 00000000 		.word	currentFilterMode
 1356 0200 00000000 		.word	.LC6
 1357 0204 00000000 		.word	lastDigitalValue
 1358 0208 20000000 		.word	.LC9
 1359 020c 20000000 		.word	.LC4
 1360 0210 2C000000 		.word	.LC10
 1361              		.cfi_endproc
 1362              	.LFE226:
ARM GAS  /tmp/ccS8Wk1d.s 			page 56


 1364              		.global	msg_buffer
 1365              		.section	.bss.msg_buffer,"aw",%nobits
 1366              		.align	2
 1369              	msg_buffer:
 1370 0000 00000000 		.space	50
 1370      00000000 
 1370      00000000 
 1370      00000000 
 1370      00000000 
 1371              		.global	sendRequest
 1372              		.section	.bss.sendRequest,"aw",%nobits
 1375              	sendRequest:
 1376 0000 00       		.space	1
 1377              		.global	cli_command
 1378              		.section	.bss.cli_command,"aw",%nobits
 1379              		.align	2
 1382              	cli_command:
 1383 0000 00000000 		.space	50
 1383      00000000 
 1383      00000000 
 1383      00000000 
 1383      00000000 
 1384              		.global	currentFilterMode
 1385              		.section	.bss.currentFilterMode,"aw",%nobits
 1388              	currentFilterMode:
 1389 0000 00       		.space	1
 1390              		.global	isWarningState
 1391              		.section	.bss.isWarningState,"aw",%nobits
 1394              	isWarningState:
 1395 0000 00       		.space	1
 1396              		.global	lastTimer
 1397              		.section	.bss.lastTimer,"aw",%nobits
 1398              		.align	2
 1401              	lastTimer:
 1402 0000 00000000 		.space	4
 1403              		.global	sum
 1404              		.section	.bss.sum,"aw",%nobits
 1405              		.align	2
 1408              	sum:
 1409 0000 00000000 		.space	4
 1410              		.global	buffer_index
 1411              		.section	.bss.buffer_index,"aw",%nobits
 1412              		.align	1
 1415              	buffer_index:
 1416 0000 0000     		.space	2
 1417              		.global	adc_moving_average
 1418              		.section	.bss.adc_moving_average,"aw",%nobits
 1419              		.align	2
 1422              	adc_moving_average:
 1423 0000 00000000 		.space	300
 1423      00000000 
 1423      00000000 
 1423      00000000 
 1423      00000000 
 1424              		.global	disableInterrupt
 1425              		.section	.bss.disableInterrupt,"aw",%nobits
 1428              	disableInterrupt:
ARM GAS  /tmp/ccS8Wk1d.s 			page 57


 1429 0000 00       		.space	1
 1430              		.global	adcBuffer
 1431              		.section	.bss.adcBuffer,"aw",%nobits
 1432              		.align	2
 1435              	adcBuffer:
 1436 0000 00000000 		.space	1200
 1436      00000000 
 1436      00000000 
 1436      00000000 
 1436      00000000 
 1437              		.global	lastDigitalValue
 1438              		.section	.bss.lastDigitalValue,"aw",%nobits
 1439              		.align	1
 1442              	lastDigitalValue:
 1443 0000 0000     		.space	2
 1444              		.global	lastAnalogValue
 1445              		.section	.bss.lastAnalogValue,"aw",%nobits
 1446              		.align	1
 1449              	lastAnalogValue:
 1450 0000 0000     		.space	2
 1451              		.global	huart2
 1452              		.section	.bss.huart2,"aw",%nobits
 1453              		.align	2
 1456              	huart2:
 1457 0000 00000000 		.space	72
 1457      00000000 
 1457      00000000 
 1457      00000000 
 1457      00000000 
 1458              		.global	hdma_adc1
 1459              		.section	.bss.hdma_adc1,"aw",%nobits
 1460              		.align	2
 1463              	hdma_adc1:
 1464 0000 00000000 		.space	96
 1464      00000000 
 1464      00000000 
 1464      00000000 
 1464      00000000 
 1465              		.global	hadc1
 1466              		.section	.bss.hadc1,"aw",%nobits
 1467              		.align	2
 1470              	hadc1:
 1471 0000 00000000 		.space	72
 1471      00000000 
 1471      00000000 
 1471      00000000 
 1471      00000000 
 1472              		.text
 1473              	.Letext0:
 1474              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 1475              		.file 4 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1476              		.file 5 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1477              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1478              		.file 7 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-n
 1479              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1480              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1481              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
ARM GAS  /tmp/ccS8Wk1d.s 			page 58


 1482              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1483              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1484              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1485              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1486              		.file 15 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1487              		.file 16 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1488              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1489              		.file 18 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1490              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1491              		.file 20 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1492              		.file 21 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1493              		.file 22 "/home/dorijan/.config/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tools/arm-
 1494              		.file 23 "<built-in>"
ARM GAS  /tmp/ccS8Wk1d.s 			page 59


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccS8Wk1d.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccS8Wk1d.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccS8Wk1d.s:200    .text.MX_GPIO_Init:000000d4 $d
     /tmp/ccS8Wk1d.s:207    .text.MX_DMA_Init:00000000 $t
     /tmp/ccS8Wk1d.s:212    .text.MX_DMA_Init:00000000 MX_DMA_Init
     /tmp/ccS8Wk1d.s:258    .text.MX_DMA_Init:00000030 $d
     /tmp/ccS8Wk1d.s:263    .text.HAL_GPIO_EXTI_Callback:00000000 $t
     /tmp/ccS8Wk1d.s:269    .text.HAL_GPIO_EXTI_Callback:00000000 HAL_GPIO_EXTI_Callback
     /tmp/ccS8Wk1d.s:364    .text.HAL_GPIO_EXTI_Callback:00000060 $d
     /tmp/ccS8Wk1d.s:1442   .bss.lastDigitalValue:00000000 lastDigitalValue
     /tmp/ccS8Wk1d.s:1428   .bss.disableInterrupt:00000000 disableInterrupt
     /tmp/ccS8Wk1d.s:1375   .bss.sendRequest:00000000 sendRequest
     /tmp/ccS8Wk1d.s:1470   .bss.hadc1:00000000 hadc1
     /tmp/ccS8Wk1d.s:1435   .bss.adcBuffer:00000000 adcBuffer
     /tmp/ccS8Wk1d.s:375    .rodata.handle_cli_command.str1.4:00000000 $d
     /tmp/ccS8Wk1d.s:385    .text.handle_cli_command:00000000 $t
     /tmp/ccS8Wk1d.s:391    .text.handle_cli_command:00000000 handle_cli_command
     /tmp/ccS8Wk1d.s:471    .text.handle_cli_command:00000054 $d
     /tmp/ccS8Wk1d.s:1382   .bss.cli_command:00000000 cli_command
     /tmp/ccS8Wk1d.s:1388   .bss.currentFilterMode:00000000 currentFilterMode
     /tmp/ccS8Wk1d.s:480    .rodata.HAL_UARTEx_RxEventCallback.str1.4:00000000 $d
     /tmp/ccS8Wk1d.s:490    .text.HAL_UARTEx_RxEventCallback:00000000 $t
     /tmp/ccS8Wk1d.s:496    .text.HAL_UARTEx_RxEventCallback:00000000 HAL_UARTEx_RxEventCallback
     /tmp/ccS8Wk1d.s:610    .text.HAL_UARTEx_RxEventCallback:00000098 $d
     /tmp/ccS8Wk1d.s:1369   .bss.msg_buffer:00000000 msg_buffer
     /tmp/ccS8Wk1d.s:1456   .bss.huart2:00000000 huart2
     /tmp/ccS8Wk1d.s:625    .text.Error_Handler:00000000 $t
     /tmp/ccS8Wk1d.s:631    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccS8Wk1d.s:663    .text.MX_USART2_UART_Init:00000000 $t
     /tmp/ccS8Wk1d.s:668    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
     /tmp/ccS8Wk1d.s:722    .text.MX_USART2_UART_Init:0000002c $d
     /tmp/ccS8Wk1d.s:728    .text.MX_ADC1_Init:00000000 $t
     /tmp/ccS8Wk1d.s:733    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
     /tmp/ccS8Wk1d.s:835    .text.MX_ADC1_Init:00000060 $d
     /tmp/ccS8Wk1d.s:842    .text.SystemClock_Config:00000000 $t
     /tmp/ccS8Wk1d.s:848    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccS8Wk1d.s:991    .text.SystemClock_Config:00000098 $d
     /tmp/ccS8Wk1d.s:997    .rodata.main.str1.4:00000000 $d
     /tmp/ccS8Wk1d.s:1014   .text.main:00000000 $t
     /tmp/ccS8Wk1d.s:1020   .text.main:00000000 main
     /tmp/ccS8Wk1d.s:1338   .text.main:000001b8 $d
     /tmp/ccS8Wk1d.s:1401   .bss.lastTimer:00000000 lastTimer
     /tmp/ccS8Wk1d.s:1415   .bss.buffer_index:00000000 buffer_index
     /tmp/ccS8Wk1d.s:1422   .bss.adc_moving_average:00000000 adc_moving_average
     /tmp/ccS8Wk1d.s:1408   .bss.sum:00000000 sum
     /tmp/ccS8Wk1d.s:1394   .bss.isWarningState:00000000 isWarningState
     /tmp/ccS8Wk1d.s:1449   .bss.lastAnalogValue:00000000 lastAnalogValue
     /tmp/ccS8Wk1d.s:1366   .bss.msg_buffer:00000000 $d
     /tmp/ccS8Wk1d.s:1376   .bss.sendRequest:00000000 $d
     /tmp/ccS8Wk1d.s:1379   .bss.cli_command:00000000 $d
     /tmp/ccS8Wk1d.s:1389   .bss.currentFilterMode:00000000 $d
     /tmp/ccS8Wk1d.s:1395   .bss.isWarningState:00000000 $d
     /tmp/ccS8Wk1d.s:1398   .bss.lastTimer:00000000 $d
     /tmp/ccS8Wk1d.s:1405   .bss.sum:00000000 $d
     /tmp/ccS8Wk1d.s:1412   .bss.buffer_index:00000000 $d
ARM GAS  /tmp/ccS8Wk1d.s 			page 60


     /tmp/ccS8Wk1d.s:1419   .bss.adc_moving_average:00000000 $d
     /tmp/ccS8Wk1d.s:1429   .bss.disableInterrupt:00000000 $d
     /tmp/ccS8Wk1d.s:1432   .bss.adcBuffer:00000000 $d
     /tmp/ccS8Wk1d.s:1439   .bss.lastDigitalValue:00000000 $d
     /tmp/ccS8Wk1d.s:1446   .bss.lastAnalogValue:00000000 $d
     /tmp/ccS8Wk1d.s:1453   .bss.huart2:00000000 $d
     /tmp/ccS8Wk1d.s:1463   .bss.hdma_adc1:00000000 hdma_adc1
     /tmp/ccS8Wk1d.s:1460   .bss.hdma_adc1:00000000 $d
     /tmp/ccS8Wk1d.s:1467   .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_ReadPin
HAL_ADC_Stop_DMA
HAL_ADC_Start_DMA
strcmp
memset
strlen
HAL_UART_Transmit
HAL_UARTEx_ReceiveToIdle_IT
sprintf
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_f2d
time
srand
HAL_Init
HAL_GetTick
rand
