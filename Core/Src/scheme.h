/******************************************************************************
Finite State Machine
Project: scheme.dot
Description: micro-nucleo

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.3.7
Generation date: 2024-10-15 09:51:40 +0200
Generated from: scheme.dot
The finite state machine has:
  6 states
  0 transition functions
******************************************************************************/

#ifndef SCHEME_H
#define SCHEME_H
#ifdef __cplusplus
extern "C" {
#endif
#include <stdlib.h>

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef void state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  STATE_INIT = 0,  
  STATE_WAIT_REQUEST,  
  STATE_ERROR,  
  STATE_LISTENING,  
  STATE_WARNING,  
  STATE_PAUSE,  
  NUM_STATES,
  NO_CHANGE
} state_t;

// State human-readable names
extern const char *state_names[];

// State function prototype
typedef state_t state_func_t(state_data_t *data);

// State functions

// Function to be executed in state init
// valid return states: STATE_WAIT_REQUEST, STATE_ERROR
state_t do_init(state_data_t *data);

// Function to be executed in state wait_request
// valid return states: STATE_ERROR, STATE_LISTENING
state_t do_wait_request(state_data_t *data);

// Function to be executed in state error
// valid return states: NO_CHANGE
state_t do_error(state_data_t *data);

// Function to be executed in state listening
// valid return states: STATE_ERROR, STATE_WARNING, STATE_PAUSE
state_t do_listening(state_data_t *data);

// Function to be executed in state warning
// valid return states: STATE_WAIT_REQUEST, STATE_ERROR
state_t do_warning(state_data_t *data);

// Function to be executed in state pause
// valid return states: STATE_ERROR, STATE_LISTENING
state_t do_pause(state_data_t *data);


// List of state functions
extern state_func_t *const state_table[NUM_STATES];


// No transition functions

// state manager
state_t run_state(state_data_t *data);

#ifdef __cplusplus
}
#endif
#endif // SCHEME_H
